<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub图床搭建</title>
    <url>/post/51637.html</url>
    <content><![CDATA[<h1 id="github-上的操作"><a href="#github-上的操作" class="headerlink" title="github 上的操作"></a>github 上的操作</h1><p>先创建一个仓库，记得是公开的，<a href="https://github.com/settings/apps%E8%BF%99%E9%87%8C">https://github.com/settings/apps这里</a></p>
<p>可以看到 Personal access tokens 点开，点 Tokens 再点 new token，我设置 token 永不过期，然后保存一下 token 等会要用，如果看不到图片就需要科学上网了！</p>
<p><img src="https://cdn.jsdelivr.net/gh/luckyaaaa/photoSS@main/img/Snipaste_2023-03-11_13-45-34.png"></p>
<h1 id="下载-picGo，并进行配置"><a href="#下载-picGo，并进行配置" class="headerlink" title="下载 picGo，并进行配置"></a>下载 picGo，并进行配置</h1><p>如果不能启动，右键勾起兼容模式，管理员身份启动</p>
<p>然后配置 Github 床库，参考如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/luckyaaaa/photoSS@main/img/Snipaste_2023-03-11_13-33-43.png"></p>
<p><a href="https://cdn.jsdelivr.net/gh/luckyaaaa/photoSS@main">https://cdn.jsdelivr.net/gh/luckyaaaa/photoSS@main</a></p>
<p>设定自定义域名：<a href="https://cdn.jsdelivr.net/gh/[github%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@main%EF%BC%8C%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%AD%A4%E5%A4%84%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%80%E5%AE%9A%E8%A6%81%E5%A1%AB%E5%86%99@main%EF%BC%8C%E5%90%A6%E5%88%99%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8master%E5%88%86%E6%94%AF%E3%80%82%E8%80%8C%E7%8E%B0%E5%9C%A8github%E5%88%9B%E5%BB%BA%E7%9A%84%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%90%8D%E4%B8%BAmain%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%8C%87%E5%AE%9A%EF%BC%8C%E5%88%99%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E8%83%BD%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%83%85%E5%86%B5">https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main，注意，此处的分支一定要填写@main，否则默认使用master分支。而现在github创建的默认分支名为main，如果不指定，则会出现图片不能上传的情况</a></p>
<p>picgo-server 设置里端口必须 36677</p>
<h1 id="绑定-Typora"><a href="#绑定-Typora" class="headerlink" title="绑定 Typora"></a>绑定 Typora</h1><p>在 typora 顶部菜单界面，选择“文件” - &gt; “偏好设置”，设置图片存储方式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/luckyaaaa/photoSS@main/img/Snipaste_2023-03-11_13-37-45.png"></p>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Figure-Bed</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora常用语法</title>
    <url>/post/2645.html</url>
    <content><![CDATA[<p>1、前面某个字段使用两个<em>，</em>加粗字体* 或者快捷键 Ctrl+B</p>
<p>2、使用一个”星“，字体倾斜了 或者快捷键 Ctrl+I</p>
<p>3、直接拖你想要图片进来即可</p>
<p>4、<strong>代码区域</strong> 使用&#96;&#96;&#96;+回车即可在内容区编辑内容</p>
<p>5、<strong>任务列表</strong> ：</p>
<p>- [ ] 文字 （<strong>注</strong>：注意用空格隔开）</p>
<p>6、<strong>创建无序列</strong> :+ 、- 、* （后面加空格）</p>
<p>如：</p>
<ul>
<li><code>+空格</code></li>
<li><ul>
<li><code>-空格</code></li>
<li><code>*空格</code></li>
</ul>
</li>
</ul>
<p>7、表情 ：+单词字母 :smile:</p>
<p>8、</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体* 或 _斜体_</span><br><span class="line">**粗体** 或 __粗体__</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br><span class="line">++下划线++（又是CSDN不支持···）</span><br><span class="line">==背景高亮==</span><br><span class="line"></span><br><span class="line">![]() 小括号里面是图片的链接可以是图床里面的地址</span><br><span class="line"></span><br><span class="line">&gt;单行块引用</span><br><span class="line">空&gt;强制换行 多行引用</span><br><span class="line"></span><br><span class="line">链接可以内联或者引用</span><br><span class="line"></span><br><span class="line">[百度](https://www.baidu.com/ &quot;www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">[1]:https://www.baidu.com/</span><br><span class="line"></span><br><span class="line">图片类似</span><br><span class="line"></span><br><span class="line">![图片1](/1.jpg &#x27;这是描述内联的&#x27;)</span><br><span class="line"></span><br><span class="line">[![图片1](/1.jpg &#x27;这是描述内联的&#x27;)](url地址)</span><br><span class="line"></span><br><span class="line">普通超链接 &lt;https://www.baidu.com&gt;</span><br><span class="line"></span><br><span class="line">[TOC]  结尾使用将标题生成目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 阿里云优惠券：[点我领取](https://www.aliyun.com/minisite/goods?userCode=brki8iof&amp;share_source=copy_link)，腾讯云优惠券：[点我领取](https://cloud.tencent.com/redirect.php?redirect=1025&amp;cps_key=198c8df2ed259157187173bc7f4f32fd&amp;from=console)&amp;nbsp;&amp;nbsp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按下ctrl</span><br><span class="line">[点击跳转](https://WWW.baidu.com)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/">ctrl+点击跳转</a></p>
<ul>
<li>阿里云优惠券：<a href="https://www.aliyun.com/minisite/goods?userCode=brki8iof&share_source=copy_link">点我领取</a></li>
</ul>
<p>QQ 群：<a href="https://jq.qq.com/?_wv=1027&k=SWCtLnMz"><img src="https://img.shields.io/badge/%E5%B7%B2%E6%BB%A1-167385320-blue.svg" alt="加入QQ群"></a> <a href="https://jq.qq.com/?_wv=1027&k=eCx8eyoJ"><img src="https://img.shields.io/badge/108482800-blue.svg" alt="加入QQ群"></a> 点击按钮入群。</p>
<p>演示图</p>
<table>
    <tr>
        <td><img src="https://oscimg.oschina.net/oscnet/cd1f90be5f2684f4560c9519c0f2a232ee8.jpg"/></td>
    </tr>
...
</table>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Md-Use</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建笔记</title>
    <url>/post/17956.html</url>
    <content><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>安装 node、git、Vscode 软件,我前面 node 没有配置好，补充下面的配置</p>
<p>搜索里面查 cmd，右键命令指示符以管理员身份运行下面 下面都是管理员的 cmd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;N:\soft\node-v14.0.0-win-x64\node_global&quot;</span><br><span class="line">npm config set cache &quot;N:\soft\node-v14.0.0-win-x64\node_cache&quot;</span><br><span class="line"></span><br><span class="line">创建 NODE_HOME = N:\soft\node-v14.0.0-win-x64</span><br><span class="line">修改path：和node相关留下下面3个即可</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">NODE_HOME%</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">NODE_HOME%\node_cache</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">NODE_HOME%\node_global</span></span><br><span class="line"></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install -g cnpm</span><br><span class="line"></span><br><span class="line">npm config ls  可以查看配置路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;nwa&quot;</span><br><span class="line">git config --global user.email &quot;2428284043@qq.com&quot;</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;2428284043@qq.com&quot;</span><br><span class="line">C:\Users\Administrator\.ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ssh 配置看<a href="http://luckynwa.top/post/6724.html">http://luckynwa.top/post/6724.html</a></p>
<h1 id="Init-项目生成本地版"><a href="#Init-项目生成本地版" class="headerlink" title="Init 项目生成本地版"></a>Init 项目生成本地版</h1><p>cmd 打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install webpack -g 再全局装</span><br><span class="line">如果有问题则evering搜索npmrc文件，c盘用户名下的，删除它</span><br><span class="line">运行npm install express -g</span><br><span class="line">npm install hexo-cli -g   全局安装</span><br><span class="line"></span><br><span class="line">桌面新建文件夹blog</span><br><span class="line">右键gitbash输入</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">生成本地页面</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">http://localhost:4000/   本地版</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="同步到-Github"><a href="#同步到-Github" class="headerlink" title="同步到 Github"></a>同步到 Github</h1><p>打开_config.yml 最后一行改成下面,创建的仓库名称一定是自己的那个名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 	git@github.com:luckyNwa/luckyNwa.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line">在blog文件夹路径cmd输入  自动部署发布工具</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">bash输入</span><br><span class="line"></span><br><span class="line">hexo g  生成页面</span><br><span class="line"></span><br><span class="line">hexo d  上传到github</span><br><span class="line"></span><br><span class="line">https://luckynwa.github.io/   刷新几次即可</span><br></pre></td></tr></table></figure>

<h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl 清除缓存</span><br><span class="line">hexo g</span><br><span class="line">hexo s 这是本地预览  http://localhost:4000/</span><br><span class="line">hexo d 这是同步远程</span><br><span class="line"></span><br><span class="line">主题安装</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line">打开_config.yml修改主题</span><br><span class="line">theme: butterfly</span><br><span class="line"></span><br><span class="line">_config.yml同级别创建_config.butterfly.yml,把themes里的butterfly文件夹下的config内容复制进去</span><br><span class="line"></span><br><span class="line">发现直接再bash里也可以直接运行npm安装pug 以及stylus的渲染器</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br><span class="line">文章的URL路径就是把中文变成了一大堆字符串编码</span><br><span class="line">blog打开cmd</span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line">_config.yml 找到 permalink</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">改成</span><br><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">	alg:crc32</span><br><span class="line">	rep:hex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">发布博客</span><br><span class="line">npm i hexo-deployer-git</span><br><span class="line"></span><br><span class="line">hexo new post &quot;博客搭建笔记&quot;     创建文章</span><br><span class="line"></span><br><span class="line">hexo new page categories       创建页面</span><br><span class="line"></span><br><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s   多合一生成到本地</span><br><span class="line"></span><br><span class="line">hexo version  查看版本</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Blog-Build</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具</title>
    <url>/post/1839.html</url>
    <content><![CDATA[<h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p>卸载：</p>
<p>软件卸载，弹出来 2 个删除都勾选</p>
<p>安装：放在这个目录下 D:\soft\idea2023.2，需要新建它,将 jetbra 里面的文件复制到这个文件夹下面即可,</p>
<p>接着安装 idea，也到这个目录下面就行</p>
<p>正常该勾选勾选，文件夹右键那个记得勾，别重启</p>
<p>右键管理员运行 D:\soft\idea2023.2\jetbra\scripts 里 install-all-users.vbs，出现 done 即成功</p>
<p>cmd 输入 echo %IDEA_VM_OPTIONS%</p>
<p>结果 D:\soft\idea2023.2\jetbra\vmoptions\idea.vmoptions 成功</p>
<p>再打开 idea 软件,选择 Activation code 来激活它</p>
<p>激活码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1/9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy/WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0/d00dy1k3zI+zJyTRpDxkCaGgijlY/LZ/wqd/kRfcbQuRzdJ/JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro/hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插件</p>
<p>新版自带很多插件，看着关闭，留下数据库、maven、spring 相关等</p>
<p>使用它的 ui 风格，UI Options 里第一列全部勾选，第二列勾选前和后</p>
<h2 id="保存并自动格式化代码"><a href="#保存并自动格式化代码" class="headerlink" title="保存并自动格式化代码"></a>保存并自动格式化代码</h2><p>Save</p>
<p>勾选 Reformat code 和 optimize imports</p>
<h2 id="自动编译与热部署"><a href="#自动编译与热部署" class="headerlink" title="自动编译与热部署"></a>自动编译与热部署</h2><p>Compiler 勾选图中 2 个</p>
<p>advance 勾选 allow auto-make ….</p>
<p>2023idea 版再引入依赖就可以热部署</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切换到别的软件，就开始热部署了 🙂</p>
<p><img src="https://imgs.luckynwa.top/mdS/2fc4d2d3139d44cd9e9d4dbed7477d55.png" alt="img"></p>
<h2 id="设置头文件自动生成"><a href="#设置头文件自动生成" class="headerlink" title="设置头文件自动生成"></a>设置头文件自动生成</h2><p>Templates 配置完新建一个类就有效果了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> <span class="doctag">@Date</span> $&#123;DATE&#125; -$&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><img src="https://imgs.luckynwa.top/mdS/beb3718241de46edb65d6318bb41cc8d.png" alt="img"></p>
<h2 id="滚轮设置编辑区字体大小"><a href="#滚轮设置编辑区字体大小" class="headerlink" title="滚轮设置编辑区字体大小"></a>滚轮设置编辑区字体大小</h2><p>General 临时生效，第二次进入，又变回去</p>
<p><img src="https://imgs.luckynwa.top/mdS/716b4cb25e7846b183789a8fe9929f37.png" alt="img"></p>
<h2 id="自动导包"><a href="#自动导包" class="headerlink" title="自动导包"></a>自动导包</h2><p>File | Settings | Editor | General | Auto Import</p>
<p>上面一个自动导包，下面自动删除无用包</p>
<p><img src="https://imgs.luckynwa.top/mdS/b6b87225fce343e581a931e8598e7fa8.png" alt="img"></p>
<h2 id="显示行号和方法的分隔符"><a href="#显示行号和方法的分隔符" class="headerlink" title="显示行号和方法的分隔符"></a>显示行号和方法的分隔符</h2><p>File | Settings | Editor | General | Appearance</p>
<p><img src="https://imgs.luckynwa.top/mdS/901142a1dfc5430eb280aff4f1bd0ca7.png" alt="img"></p>
<h2 id="设置鼠标悬浮提示"><a href="#设置鼠标悬浮提示" class="headerlink" title="设置鼠标悬浮提示"></a><strong>设置鼠标悬浮提示</strong></h2><p>File | Settings | Editor | General | Code Completion 勾选显示标题功能</p>
<p><img src="https://imgs.luckynwa.top/mdS/0fe541133367443db67f435fa38b4f09.png" alt="img"></p>
<h2 id="忽略字母大小写的提示"><a href="#忽略字母大小写的提示" class="headerlink" title="忽略字母大小写的提示"></a><strong>忽略字母大小写的提示</strong></h2><p>File | Settings | Editor | General | Code Completion 取消勾选</p>
<p><img src="https://imgs.luckynwa.top/mdS/e6c08d5733cd4b65ab0678fdebf07a07.png" alt="img"></p>
<h2 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h2><p>Encodings 影响 i18n 里中文，必配，那个勾选也记得</p>
<p><img src="https://imgs.luckynwa.top/mdS/63b5b37ebdec4731b6c8378569275851.png" alt="img"></p>
<h2 id="取消-tab-页单行显示"><a href="#取消-tab-页单行显示" class="headerlink" title="取消 tab 页单行显示"></a>取消 tab 页单行显示</h2><p>File | Settings | Editor | General | Editor Tabs</p>
<p>2023 版 Idea 选择单选那个<strong>multiple rows</strong></p>
<p><img src="https://imgs.luckynwa.top/mdS/5fe98091ba9246ee8f48156bfcc16687.png" alt="img"></p>
<h2 id="设置字体、字体大小、行间距"><a href="#设置字体、字体大小、行间距" class="headerlink" title="设置字体、字体大小、行间距"></a>设置字体、字体大小、行间距</h2><p>File | Settings | Editor | Font</p>
<p><img src="https://imgs.luckynwa.top/mdS/85de093acf034b0da65581b18c330e06.png" alt="img"></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Plugins 安装的插件有下面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Lombok   @Data注解插件</span><br><span class="line"></span><br><span class="line">MybatisX   快速定位实现类以及方法在xml的位置</span><br><span class="line"></span><br><span class="line">Rainbow Brackets 不同颜色&#123;&#125;</span><br><span class="line">设置里搜disable when取消掉1000那个</span><br><span class="line">设置Round Brackets中5颜色E8BA36   46A97B E594D2 8F8BFF A938D7</span><br><span class="line"></span><br><span class="line">Dark Purple Theme   主题  appearance  +Colpr Scheme里导入luckyColor.icls样式</span><br><span class="line"></span><br><span class="line">不满意则在language defaults中修改样式颜色</span><br><span class="line">其中Semantic hig..是参数的颜色</span><br><span class="line"></span><br><span class="line">translation翻译  选择百度，配置如下5w字符内免费</span><br><span class="line"></span><br><span class="line">GenerateAllSetter   A a=new A(); 右键a用alt+enter用插件，选set</span><br><span class="line"></span><br><span class="line">Mybatis Log Free   恢复mybatis/ibatis sql日志到原始的整个可执行sql  Tools里打开它</span><br><span class="line">使用前要开启mybatis 日志功能：</span><br><span class="line">log-impl: org.apache.ibatis.logging.stdout.StdOutImpl 或者mybatisplus就不用了</span><br><span class="line"></span><br><span class="line">JUnit4 Paraller Runner 不然测试类不能运行</span><br><span class="line"></span><br><span class="line">Compiler 相关插件记得开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CamelCase 快捷键 SHIFT+ALT+U，选中目标单词，按 u 就会变，大小写的转换，还支持驼峰与下划线的转换</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Get Emoji 和	Yet anther emoji support   md文件，输入: +需要的图标，图标是字符串可以显示在终端   emoji可以去这https://gitmoji.dev/看看</span><br><span class="line"></span><br><span class="line">Background Image Plus 给代码加入背景图片  Appearance  ---&gt;BackgroundImag...-----&gt;Opacity：透明度的意思  image：自己图片的位置</span><br><span class="line"></span><br><span class="line">Easy Javadoc   生成代码注释用的，将鼠标放在方法、类名上默认ctrl+/如果有问题去设置快捷键</span><br><span class="line"><span class="meta prompt_">settings---&gt;</span><span class="language-bash">keymap----&gt;搜一下这个名字，右键添加键盘快捷键 alt+/ 有冲突选移除,保存即可</span></span><br><span class="line"></span><br><span class="line">SonarLint 代码规范，可以看看自己的代码该优化的地方</span><br><span class="line"></span><br><span class="line">CodeGeeX   代码ai助手   可以批量注释  提示功能tab键输入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Chinese    中文包必装</span><br><span class="line"></span><br><span class="line">Nyan Progress Bar  让idea所有的进度条变成彩虹猫</span><br><span class="line"></span><br><span class="line">Grep console  改变控制台日志颜色的插件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>20230908001809439 <span class="hide-inline"><button type="button" class="hide-button" style="background-color: skyblue;color: #fff">翻译
  </button><span class="hide-content">PEXtjvB3p2CoLF5TNEa3</span></span></p>
<h2 id="新项目设置"><a href="#新项目设置" class="headerlink" title="新项目设置"></a>新项目设置</h2><p>file——&gt;New Projects—–&gt; Settings for New…..</p>
<p>maven 的路径配置一下，还有保存自动格式化..</p>
<h1 id="Nvm"><a href="#Nvm" class="headerlink" title="Nvm"></a>Nvm</h1><p>nvm（<a href="https://so.csdn.net/so/search?q=Node&spm=1001.2101.3001.7020">Node</a> Version Manager）是一款用于管理 Node.js 版本的工具，可以轻松地在一个系统中切换和安装多个 Node.js 版本。使用 nvm 可以让你轻松地升级或降级 Node.js 版本，也可以在同一台机器上同时使用多个版本的 Node.js。</p>
<p>先删除电脑上的 node</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v      查看</span><br></pre></td></tr></table></figure>

<p>能卸载卸载，不能去删除 node 目录，再去 C:\User\用户名\.npmrc 删除</p>
<p>C:\Program Files (x86)\Nodejs<br>C:\Program Files\Nodejs<br>C:\Users\用户名\AppData\Roaming\npm<br>C:\Users\用户名\AppData\Roaming\npm-cache</p>
<p>查找，有则删除，再去删除环境变量</p>
<p>然后再查看版本，差不多就可以装 nvm 了,nvm 文件夹不需要建，nodejs 文件夹要建</p>
<p>装的时候路径 D:\bgsoft\nvm</p>
<p>node 资源也 D:\bgsoft\nodejs</p>
<p>nvm 下找到 setting.txt,粘贴进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node_mirror: https://registry.npmmirror.com</span><br><span class="line">npm_mirror: https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<p>完成，它的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install &lt;version&gt;                           安装指定版本的 Node.js</span><br><span class="line">nvm use &lt;version&gt;                               切换到指定版本的 Node.js</span><br><span class="line">nvm ls                                          列出已安装的所有 Node.js 版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt;                      给指定版本创建别名</span><br><span class="line">nvm run &lt;version&gt; &lt;script&gt;                      在指定版本下运行脚本</span><br><span class="line">nvm current                                     显示当前正在使用的 Node.js 版本</span><br><span class="line">nvm uninstall &lt;version&gt;                         卸载指定版本的 Node.js</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install 16.20.1</span><br><span class="line">nvm install 14.0.0</span><br><span class="line">nvm use 14.0.0</span><br><span class="line"></span><br><span class="line">nvm install 14.17.6     人人前端最少需要的</span><br><span class="line">nvm use 14.17.6</span><br><span class="line"></span><br><span class="line">nvm install 18.16.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm config set registry https://registry.npm.taobao.org    //有问题用下面这个最新的</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nvm use 16.20.1</span><br><span class="line"></span><br><span class="line">nvm use  18.16.1</span><br></pre></td></tr></table></figure>

<p>遇到 node-sass 无法安装，切 14 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>

<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><p>因为想用 pnpm 所以 node 最少 Node.js v16.14 推荐只用一个就好了 16 版本</p>
<p>直接移动 node16 文件到本地盘</p>
<p>版本 1：v16.20.1 版本 2：v14.0.0</p>
<p><em>tip：node_modules 同级需要新建 node_cache 和 node_global 文件夹</em></p>
<p>添加环境变量：</p>
<p>NODE_HOME</p>
<p>D:\bgsoft\node16 node 的路径,不同版本切这 版本 1 选这个就行了，14 就不装了</p>
<p>D:\bgsoft\node14 上面切这个 版本 2</p>
<p>添加 path 路径：<br>%NODE_HOME%<br>%NODE_HOME%\node_cache<br>%NODE_HOME%\node_global</p>
<p>查看 版本 cmd 打开输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>查看镜像源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<p>修改镜像源为淘宝</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>全局安装 pnpm，yarn 的话也有安装包在硬盘中，直接安装即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br><span class="line">npm install webpack -g</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\bgsoft\node16\node_cache&quot;    //设置缓存文件夹</span><br><span class="line">npm config set prefix &quot;D:\bgsoft\node16\node_global&quot;    //设置全局模块存放路径</span><br></pre></td></tr></table></figure>

<p>全局装这个插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-gyp -g</span><br></pre></td></tr></table></figure>

<p>重置镜像为官网的，比较慢</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<h1 id="Jdk"><a href="#Jdk" class="headerlink" title="Jdk"></a>Jdk</h1><p>1、先装 jdk 默认安装即可，再配置环境变量<br>“我的电脑”右键 → 属性 → 高级系统设置 → 环境变量</p>
<p>新建 JAVA_HOME</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_271</span><br></pre></td></tr></table></figure>

<p>新建 CLASSPATH</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure>

<p>编辑 path</p>
<p>新增 %JAVA_HOME%\bin</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java –version        java version &quot;1.8.0_271&quot;</span><br><span class="line">javac</span><br></pre></td></tr></table></figure>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>直接将开发工具里解压好的文件复制到 D:\bgsoft 下面<br>(它的下载镜像源和本地仓库地址都在 conf&#x2F;settings.xml 里面写好了)<br>添加环境变量 MAVEN_HOME</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\bgsoft\apache-maven-3.6.3</span><br></pre></td></tr></table></figure>

<p>编辑变量 Path</p>
<p>添加变量值%MAVEN_HOME%\bin</p>
<p>cmd 查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<h1 id="RocketMq"><a href="#RocketMq" class="headerlink" title="RocketMq"></a>RocketMq</h1><p>移动包到 D:\bgsoft\rocketmq-4.9.3</p>
<p>运行 bin 下 mqnamesrv.cmd<br>再 bin 下目录 cmd 打开，输入下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">bin&gt;</span><span class="language-bash">mqbroker.cmd -n localhost:9876</span></span><br></pre></td></tr></table></figure>

<p>配置修改（文件夹中已配置）<br>bin 目录，修改 runserver.cmd 的 JAVA_OPT 为，大小可自己调整</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rem set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g&quot;</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m&quot;</span><br></pre></td></tr></table></figure>

<p>修改 runbroker.cmd 的 JAVA_OPT 为，大小可自己调整</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rem set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g&quot;</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>nacos 是 1.4.1 版本</p>
<p>修改 startup.cmd 配置</p>
<p>set MODE&#x3D;”standalone”</p>
<p>移动文件夹的，不需要配置了，直接打开 D:\bgsoft\nacos\bin 里的 startup.cmd 即可启动</p>
<p><a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a></p>
<p>账号:nacos,密码:nacos</p>
<p>2.2.0 以及之前都有漏洞，这个版本只适合单机</p>
<h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><p>1、添加线程组<br>测试计划-右键-add-thread-线程组</p>
<p>2、线程数 1000 ramp-up 启动时间 10s 循环 10 等于访问 1w 次</p>
<p>3、右键线程组-添加 sampler（取样器）-http 请求</p>
<p>4、填写协议（http）、ip(192.168.1.103)、端口（10010）、路径是（play&#x2F;lucky）、编码输入 UTF<br>有参数填参数<br>productId 1</p>
<p>5、再右键 http 请求添加监听器查看结果树 和汇总报告(.. report)里有个 ThroughPut 是吞吐量,就是每秒能进行多少次请求!</p>
<p>6、点击绿运行</p>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>版本:apache-tomcat-8.5.83</p>
<p>去环境变量新建下面 2 个名称</p>
<p>CATALINA_HOME<br>CATALINA_BASE</p>
<p>地址如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\bgsoft\apache-tomcat-8.5.83</span><br></pre></td></tr></table></figure>

<p>path 中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">CATALINA_HOME%\bin</span></span><br></pre></td></tr></table></figure>

<p>直接 c 自己的文件夹下面就不会有问题<br>乱码修改下面</p>
<p>D:\bgsoft\apache-tomcat-8.5.83\conf logging.properties 修改配置文件</p>
<p>47 行 java.util.logging.ConsoleHandler.encoding &#x3D; UTF-8 改<br>java.util.logging.ConsoleHandler.encoding &#x3D;GBK</p>
<p>去 bin 目录 cmd startup.bat 打开服务器，浏览器打开下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure>

<p>对应本地打包的 war 可以直接放 tomcat 上面跑，war 放在 D:\bgsoft\apache-tomcat-8.5.83\webapps 中<br><a href="http://localhost:8080/luckyNwa">http://localhost:8080/luckyNwa</a> 即可访问，后面这个是 war 的名称<br><a href="http://localhost:8080/luckyDemo/goodsTb.html">http://localhost:8080/luckyDemo/goodsTb.html</a> 静态页面也可以<br>也可以上传 war 包到 tomcat 服务器，点击 manager App ，输入账号 root 密码 123456，这些都是已经配置了，找到要部署的 war 包上传，并部署即可</p>
<p>idea 使用本地 tomcat：</p>
<p>idea 上面点编辑—&gt;+—-&gt;找到 tomcat 本地—-&gt;name 起个—-&gt;主要 deploymen 那选择 artifact 的，项目编译 war 的,确定 ok，就能跑了</p>
<h1 id="VsCode"><a href="#VsCode" class="headerlink" title="VsCode"></a>VsCode</h1><p><strong>安装</strong></p>
<p>直接安装软件包，记得添加到 win 资源管理器，这样右键文件可以用它打开</p>
<p>设置—搜 Update mode—-default 改成 none</p>
<p>搜 update 取消第一个后台更新</p>
<p>这 2 个弄完再去安装语言插件，再重启 vscode</p>
<p><strong>卸载</strong></p>
<p>卸载软件</p>
<p>去找到 C:\Users\用户名下的.vscode 文件夹，将其删除</p>
<p>win+R 输入%appdata%找到 Code 和 Visual Studio Setup 文件夹，将其删除，即可彻底删除用户信息和缓存信息</p>
<p><strong>插件推荐</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Chinese (Simplified) (简体中文)   去设置里搜缩略图弄掉</span><br><span class="line"></span><br><span class="line">Atom One Dark Theme       设置颜色主题</span><br><span class="line"></span><br><span class="line">vscode-icons       设置文件夹图标</span><br><span class="line"></span><br><span class="line"><span class="punctuation">:</span>emojisense<span class="punctuation">:</span>        代码中输入    <span class="punctuation">:</span>smile_cat<span class="punctuation">:</span> -&gt; 😸</span><br><span class="line"></span><br><span class="line">Auto Close Tag       键入一个开始标记（例如 &lt;div&gt;）时，它会自动为你插入相应的结束标记</span><br><span class="line"></span><br><span class="line">Auto Rename Tag       同步修改 HTML/XML标签</span><br><span class="line"></span><br><span class="line">Live Server          快速启动本地服务，自动监听</span><br><span class="line"></span><br><span class="line">Image preview         鼠标悬停图片地址查看图片</span><br><span class="line"></span><br><span class="line">Code Spell Checker   拼音接检查器，配合驼峰大小写</span><br><span class="line"></span><br><span class="line">Vetur       语法高亮、智能感知、Emmet等 包含格式化功能</span><br><span class="line"></span><br><span class="line">Quokka.js  练习JS的， ctrl+shift+p  输入Quokka 找到newFile   设置快捷键ctrl+n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vue-component 直接在template输入组件名称即可自动导入它</span><br><span class="line"></span><br><span class="line">CodeSnap       选中代码右键去用这个插件，显示代码比截图好看</span><br><span class="line"></span><br><span class="line">IntelliCode   代码智能提示</span><br><span class="line"></span><br><span class="line">Path Intellisense  路径提示</span><br><span class="line"></span><br><span class="line">Prettier - Code formatter     前端代码格式化，记得使用最后的配置</span><br><span class="line"></span><br><span class="line">vue-format vue2的格式化插件<span class="number">3</span>会删除setup  快捷键ctrl+alt+p</span><br><span class="line"></span><br><span class="line">可以在项目中添加.prettierrc.js自定义文件，没有则使用默认规则</span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">  extends<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;airbnb&#x27;<span class="punctuation">,</span> &#x27;prettier&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//使用了 Airbnb 的代码规范和 Prettier 的代码格式化规则</span></span><br><span class="line">  singleQuote<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 使用单引号</span></span><br><span class="line">  printWidth<span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span> <span class="comment">// 超过最大值换行</span></span><br><span class="line">  htmlWhitespaceSensitivity<span class="punctuation">:</span> &#x27;ignore&#x27;<span class="punctuation">,</span> <span class="comment">//处理 HTML 文件时忽略空格敏感度</span></span><br><span class="line">  semi<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 结尾不用分号</span></span><br><span class="line">  disableLanguages<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;vue&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 不格式化vue文件，vue文件的格式化单独设置</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bracket Pair Colorizer    彩虹的<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>被弃用也装，比内置的好<span class="punctuation">,</span>配置看最后就行了</span><br><span class="line"></span><br><span class="line">Highlight Matching Tag    突出标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Markdown Preview Enhanced  md文档预览<span class="punctuation">,</span>进入文档右键MPE打开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Codelf 变量起名神器在变量名右键打开它</span><br><span class="line"></span><br><span class="line">Turbo Console Log  点击需要生成console.log的变量，默认快捷键ctrl+alt+l改成ctrl+shift+r</span><br><span class="line">因为我的idea全局搜索就是这个指令，vscode去设置里键盘快捷方式搜ctrl+alt+l改成上面那个回车确定即可</span><br><span class="line"></span><br><span class="line">Vue Peek             让我们快速跳转到组件、模块定义的文件</span><br><span class="line"></span><br><span class="line">Git Graph 类似SourceTree软件的可视化版本控制插件，可以更新、提交代码，查看提交记录，审视代码</span><br><span class="line"></span><br><span class="line">GitLens 可以在代码行上显示Git提交信息</span><br><span class="line"></span><br><span class="line">Git History 查看Git提交历史记录，该插件还支持显示具有不同颜色的分支，显示提交信息和更改详细信息，以及搜索提交历史记录</span><br><span class="line"></span><br><span class="line">Git Blame   轻量的提交信息查看</span><br><span class="line"></span><br><span class="line">koroFileHeader   头部注释自动生成加方法也可以快捷键 在方法上方空白按   去左下角设置---》键盘快捷键ctrl+windows+T改成alt+/</span><br><span class="line">头部图案设置不展示</span><br><span class="line"></span><br><span class="line">Jest Runner  测试用的，加上debugger点右键</span><br></pre></td></tr></table></figure>

<p>**VSCode 快捷键:**<a href="https://www.bilibili.com/read/cv9699783/">https://www.bilibili.com/read/cv9699783/</a></p>
<p>自己快捷键修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl+enter   改成  ctrl+shift+enter  换行</span><br><span class="line"></span><br><span class="line">给i18nally插件将文案提取到lang的中文json中，设置--&gt;键盘快捷方式---&gt;i18点击提取文案那个改为快捷</span><br><span class="line">ctrl+.  使用，选中中文再快捷键，直接回车可生成i18的中文</span><br></pre></td></tr></table></figure>

<p>settings.json 配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;update.enableWindowsBackgroundUpdates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//禁用 Windows 后台更新vscode</span></span><br><span class="line">  <span class="attr">&quot;update.mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span> <span class="comment">//禁用vscode更新</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Atom One Dark&quot;</span><span class="punctuation">,</span> <span class="comment">//主题</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//文本保存自动开启格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span> <span class="comment">//格式化默认</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;editor.bracketPairColorization.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//彩虹&#123;&#125;</span></span><br><span class="line">  <span class="attr">&quot;editor.guides.bracketPairs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;active&quot;</span><span class="punctuation">,</span> <span class="comment">//激活</span></span><br><span class="line">  <span class="attr">&quot;extensions.ignoreRecommendations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//忽略 Visual Studio Code 的扩展推荐提示</span></span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons&quot;</span><span class="punctuation">,</span> <span class="comment">//文件夹图标</span></span><br><span class="line">  <span class="attr">&quot;workbench.startupEditor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span> <span class="comment">//启动时的编辑器选项不要欢迎页面</span></span><br><span class="line">  <span class="attr">&quot;bracket-pair-colorizer-2.depreciation-notice&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//是否显示 Bracket Pair Colorizer 2 的弃用通知</span></span><br><span class="line">  <span class="attr">&quot;editor.minimap.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//缩略图功能关闭</span></span><br><span class="line">  <span class="attr">&quot;vetur.ignoreProjectWarning&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//忽略警告</span></span><br><span class="line">  <span class="attr">&quot;path-intellisense.mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//路径提示将@指向src</span></span><br><span class="line">    <span class="attr">&quot;@&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">//关闭预览覆盖</span></span><br><span class="line">  <span class="attr">&quot;workbench.editor.wrapTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//文件太多可以换行</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotVerifyTags&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Codegeex.Comment.LanguagePreference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Codegeex.Privacy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 自定义的颜色 (代替当前颜色主题中的编辑器语法颜色和字形)</span></span><br><span class="line">  <span class="attr">&quot;editor.tokenColorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//基本上使用默认的就好不需要这些</span></span><br><span class="line">    <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#6A9955&quot;</span><span class="punctuation">,</span> <span class="comment">// 注释</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#ff55ff&quot;</span><span class="punctuation">,</span> <span class="comment">// 关键字</span></span><br><span class="line">    <span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#5eccf8&quot;</span><span class="punctuation">,</span> <span class="comment">// 变量名 函数的参数名</span></span><br><span class="line">    <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#CE9178&quot;</span><span class="punctuation">,</span> <span class="comment">// 字符串</span></span><br><span class="line">    <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DCDCAA&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定义及内置的函数名称 如：print</span></span><br><span class="line">    <span class="attr">&quot;numbers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00eeff&quot;</span><span class="punctuation">,</span> <span class="comment">// 数字</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#55bbff&quot;</span><span class="punctuation">,</span> <span class="comment">//类定义颜色</span></span><br><span class="line">    <span class="comment">//文本匹配规则(自定义的主要部分)</span></span><br><span class="line">    <span class="attr">&quot;textMateRules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="comment">//要修改的文本</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string.quoted.double&quot;</span><span class="punctuation">,</span> <span class="comment">//作用域(下方提到的foreground内容粘贴在这里就好)</span></span><br><span class="line">        <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#9CDCFE&quot;</span> <span class="comment">//字体颜色</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.editor.untitled.hint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hidden&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;git.enableSmartCommit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;git.confirmSync&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typescript.updateImportsOnFileMove.enabled&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.maxTokenizationLineLength&quot;</span><span class="punctuation">:</span> <span class="number">1.1111111111111111e22</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileheader.customMade&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LuckyNwa⭐️&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Do not edit&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件创建时间(不变)</span></span><br><span class="line">    <span class="attr">&quot;FilePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Do not edit&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件在项目中的相对路径 自动更新</span></span><br><span class="line">    <span class="attr">&quot;LastEditTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Do not edit&quot;</span><span class="punctuation">,</span> <span class="comment">// 文件最后编辑时间</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">// 介绍文件的作用、文件的入参、出参。</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 函数注释</span></span><br><span class="line">  <span class="attr">&quot;fileheader.cursorMode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 函数注释生成之后，光标移动到这里</span></span><br><span class="line">    <span class="attr">&quot;param&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行</span></span><br><span class="line">    <span class="attr">&quot;return&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileheader.configObj&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;autoAdd&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 检测文件没有头部注释，自动添加文件头部注释</span></span><br><span class="line">    <span class="attr">&quot;autoAddLine&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">// 文件超过多少行数 不再自动添加头部注释</span></span><br><span class="line">    <span class="attr">&quot;designAddHead&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// false关闭, 生成的图案注释是否附带头部注释</span></span><br><span class="line">    <span class="attr">&quot;headDesignName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;grassHorse2&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认为随机图案 生成哪个注释图案</span></span><br><span class="line">    <span class="attr">&quot;headDesign&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// false关闭 开启后,所有生成头部注释的场景都会生成图案注释。图案注释替换头部注释</span></span><br><span class="line">    <span class="attr">&quot;prohibitAutoAdd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;md&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.cjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.conf&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.yaml&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.scss&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.svg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;.ts&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 禁止.json .md文件，自动添加头部注释</span></span><br><span class="line">    <span class="attr">&quot;prohibitItemAutoAdd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;test_vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 禁止test_vue项目自动添加头部注释</span></span><br><span class="line">    <span class="attr">&quot;moveCursor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 自动移动光标到Description所在行</span></span><br><span class="line">    <span class="attr">&quot;dateFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;folderBlacklist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;vite.config.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;vite.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;文件夹或文件名禁止自动添加头部注释&quot;</span></span><br><span class="line">      <span class="comment">// &quot;webpack.config.js&quot; // 可以禁止某些文件自动添加注释</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue3-插件"><a href="#vue3-插件" class="headerlink" title="vue3 插件"></a>vue3 插件</h2><p>记得禁用或者删除 vetur，不然爆红很多地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Vue VSCode Snippets           | 新vue文件输入vbase选模板                   |</span><br><span class="line">| TypeScript Vue Plugin (Volar) | 用于 TypeScript 的 Vue 插件               |</span><br><span class="line">| Vue Language Features (Volar) | Vue3.0 语法支持                           |</span><br><span class="line">| WindiCSS IntelliSense         | 自动完成、语法突出显示、代码折叠和构建等高级功能  |</span><br><span class="line">| Iconify IntelliSense          | Iconify 预览和搜索                         |</span><br><span class="line">| i18n Ally                     | 国际化智能提示                              |</span><br><span class="line">| Stylelint                     | Css    格式化                             |</span><br><span class="line">| Prettier                      | 代码格式化                                 |</span><br><span class="line">| ESLint                        | 脚本代码检查                               |</span><br><span class="line">| DotENV                        | env 文件高亮                              |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Es6特性</title>
    <url>/post/30769.html</url>
    <content><![CDATA[<h1 id="const-和-let"><a href="#const-和-let" class="headerlink" title="const 和 let"></a>const 和 let</h1><p>ES6 推荐使用 let 声明局部变量，相比之前的 var（无论声明在何处，都会被视为声明在函数的最顶部），let 具有块级作用域（即在使用 let 的那一对大括号 {}内起作用），可以避免变量提升和污染全局作用域的问题。</p>
<p>const 则用来声明常量，即一旦赋值就不能再改变。const 也具有块级作用域，并且必须在声明时就初始化。const 适合用来定义不会改变的值，如 PI、URL 等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用var</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// 这里会覆盖上面的a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用let</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>; <span class="comment">// 这里不会影响外面的b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用const</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.15</span>; <span class="comment">// 报错：Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&quot;https://www.bing.com&quot;</span>;</span><br><span class="line"><span class="variable constant_">URL</span> = <span class="string">&quot;https://www.google.com&quot;</span>; <span class="comment">// 报错：Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><strong>解构赋值</strong></h1><p>解构赋值是一种从数组或对象中提取数据并赋值给变量的简洁写法。它可以减少代码量，提高可读性，并且支持默认值、嵌套结构、别名等特性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组解构：按照数组元素位置对应赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> [f, g, h] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构：按照对象属性名对应赋值给同名变量（也可以使用别名）</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: i, <span class="attr">age</span>: j &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// Bob</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j); <span class="comment">//19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值：如果没有匹配到相应的数据，则使用默认值（如果有）</span></span><br><span class="line"><span class="keyword">let</span> [k, l = <span class="number">0</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(l); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; m = <span class="number">0</span>, n = <span class="number">0</span> &#125; = &#123; <span class="attr">m</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//0</span></span><br><span class="line"><span class="comment">// 嵌套结构：可以解构嵌套的数组或对象</span></span><br><span class="line"><span class="keyword">let</span> [o, [p, q]] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(q); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">r</span>: &#123; s, t &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">r</span>: &#123; <span class="attr">s</span>: <span class="number">4</span>, <span class="attr">t</span>: <span class="number">5</span> &#125; &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值的应用场景：交换变量、函数参数、返回值等</span></span><br><span class="line"><span class="keyword">let</span> u = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> v = <span class="number">7</span>;</span><br><span class="line">[u, v] = [v, u]; <span class="comment">// 不需要使用临时变量来交换u和v的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(u); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>([<span class="number">8</span>, <span class="number">9</span>])); <span class="comment">//17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [w, z] = <span class="title function_">bar</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w); <span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">//11</span></span><br></pre></td></tr></table></figure>

<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数是一种使用 &#x3D;&gt; 符号定义函数的简洁写法 。它可以省略 function 关键字、参数括号、返回值括号等，使得代码更加简洁和清晰。箭头函数还有一个重要的特性，就是它不会改变 this 的指向，即箭头函数内部的 this 始终指向定义时所在的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数和箭头函数的对比</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; x + y; <span class="comment">// 省略了 function 关键字、参数括号、返回值括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只有一个参数，可以省略参数括号；如果没有参数，必须使用空括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">square</span> = (<span class="params">x</span>) =&gt; x * x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hello</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有多条语句，需要使用大括号包裹，并且显式返回（如果需要）</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">max</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数不会改变 this 的指向，即箭头函数内部的 this 始终指向定义时所在的对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// Alice</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// undefined （因为setTimeout中的this指向window）</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// Alice （因为箭头函数中的this指向obj）</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>; <span class="comment">//用它就可以拿到obj</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + that.<span class="property">name</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure>

<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>模板字符串是一种使用反引号 &#96;&#96; 包裹字符串，并且支持插入变量或表达式的新语法 。它可以避免使用 + 号连接字符串和变量，并且支持多行字符串和标签模板等特性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用模板字符串插入变量或表达式，用 $&#123;&#125; 包裹即可（注意是反引号而不是单引号）</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, you are <span class="subst">$&#123;age&#125;</span> years old.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模板字符串可以直接换行，不需要使用 \n 或者 + 号连接多行字符串</span></span><br><span class="line"><span class="keyword">let</span> poem = <span class="string">`Do not go gentle into that good night,</span></span><br><span class="line"><span class="string">Old age should burn and rave at close of day;</span></span><br><span class="line"><span class="string">Rage, rage against the dying of the light.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(poem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用标签模板可以自定义模板字符串的处理方式（标签是一个函数名）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">strings, ...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strings.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result += strings[i];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; values.<span class="property">length</span>) &#123;</span><br><span class="line">      result += values[i].<span class="title function_">toUpperCase</span>(); <span class="comment">// 将变量转为大写</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> message = tag<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you?`</span>; <span class="comment">// 使用tag函数处理模板字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// Hello ALICE, how are you?</span></span><br></pre></td></tr></table></figure>

<h1 id="默认参数、剩余参数和展开运算符"><a href="#默认参数、剩余参数和展开运算符" class="headerlink" title="默认参数、剩余参数和展开运算符"></a>默认参数、剩余参数和展开运算符</h1><p>ES6 提供了一些新的语法，可以让函数的参数更加灵活和方便。默认参数可以让函数在没有传入参数或传入 undefined 时，使用预设的默认值。剩余参数可以让函数接收任意数量的参数，并将它们存储在一个数组中。展开运算符可以将一个数组或对象展开为多个元素或属性，用于函数调用、数组合并、对象复制等场景。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认参数：在函数定义时，给参数赋予默认值（如果没有传入或传入undefined）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="literal">undefined</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数：在函数定义时，使用 ... 符号表示剩余的所有参数，并将它们存储在一个数组中（必须是最后一个参数）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    result += number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开运算符：在函数调用时，使用 ... 符号将一个数组或对象展开为多个元素或属性（相当于逐个传入）</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...arr)); <span class="comment">// 15 （相当于sum(4,5,6)）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开运算符也可以用于数组合并、对象复制等场景</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, ...arr]; <span class="comment">// [3,4,5,6]</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; ...obj1 &#125;; <span class="comment">// &#123;name: &quot;Alice&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h1><p>ES6 提供了一种新的语法，可以让 JavaScript 支持类和继承这两个面向对象编程的重要概念。类是一种定义对象属性和方法的模板，可以通过 new 关键字创建类的实例。继承是一种让子类拥有父类属性和方法的机制，可以通过 extends 和 super 关键字实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个类：使用 class 关键字，并且提供一个 constructor 方法作为构造函数（初始化实例属性）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// this 指向实例对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义类的方法：直接在类中写函数名和函数体（不需要使用 function 关键字）</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, you are <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建类的实例：使用 new 关键字，并且传入构造函数所需的参数</span></span><br><span class="line"><span class="keyword">let</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">18</span>);</span><br><span class="line">alice.<span class="title function_">sayHi</span>(); <span class="comment">// Hello Alice, you are 18 years old.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类：使用 extends 关键字继承父类，并且可以重写或新增属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, grade</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age); <span class="comment">// 使用 super 关键字调用父类的构造函数（必须在子类构造函数中第一行执行）</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade; <span class="comment">// 子类可以新增自己的属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类可以重写或新增父类的方法</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`Hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, you are <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old and in grade <span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>.`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is studying hard.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子类的实例：使用 new 关键字，并且传入构造函数所需的参数（包括父类和子类的参数）</span></span><br><span class="line"><span class="keyword">let</span> bob = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">19</span>, <span class="number">12</span>);</span><br><span class="line">bob.<span class="title function_">sayHi</span>(); <span class="comment">// Hello Bob, you are 19 years old and in grade 12.</span></span><br><span class="line">bob.<span class="title function_">study</span>(); <span class="comment">// Bob is studying hard.</span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-和-async-await"><a href="#Promise-和-async-await" class="headerlink" title="Promise 和 async&#x2F;await"></a>Promise 和 async&#x2F;await</h1><p>Promise 是一种用于处理异步操作的对象，它表示一个未来可能完成或失败的事件。Promise 有三种状态：pending（等待）、fulfilled（成功）、rejected（失败）。Promise 可以通过 then 方法添加成功或失败时执行的回调函数，也可以通过 catch 方法添加失败时执行的回调函数。Promise 还可以通过 all 和 race 方法组合多个 Promise 对象。</p>
<p>async&#x2F;await 是一种基于 Promise 的新语法，可以让异步操作更加简洁和清晰。async 是一个修饰符，用于声明一个异步函数，该函数返回一个 Promise 对象。await 是一个运算符，用于等待一个 Promise 对象的结果，只能在异步函数中使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Promise对象：使用 new 关键字，并且传入一个执行器函数（该函数接收两个参数：resolve和reject）</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个异步操作</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>(); <span class="comment">// 随机生成一个0到1之间的数</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num); <span class="comment">// 如果大于0.5，则表示成功，调用resolve并传入结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(num); <span class="comment">// 如果小于等于0.5，则表示失败，调用reject并传入结果</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 then 方法添加成功或失败时执行的回调函数（可以链式调用）</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Success: <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// 如果Promise状态变为fulfilled，打印成功的结果</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>; <span class="comment">// 可以返回一个新的值，传递给下一个then</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Double: <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// 打印上一个then返回的值乘以2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fail: <span class="subst">$&#123;reason&#125;</span>`</span>); <span class="comment">// 如果Promise状态变为rejected，打印失败的结果</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Promise.all 方法组合多个Promise对象，返回一个新的Promise对象，该对象在所有Promise都成功时成功，否则失败</span></span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>); <span class="comment">// 创建一个立即成功的Promise对象</span></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise4 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3]); <span class="comment">// 组合三个Promise对象</span></span><br><span class="line"></span><br><span class="line">promise4</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [1,2,3] （如果所有Promise都成功，打印一个包含所有结果的数组）</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 如果有任何一个Promise失败，打印失败的结果</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Promise.race 方法组合多个Promise对象，返回一个新的Promise对象，该对象在任何一个Promise完成时完成（无论成功或失败）</span></span><br><span class="line"><span class="keyword">let</span> promise5 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>); <span class="comment">// 0.5秒后成功</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> promise6 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">6</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>); <span class="comment">// 1秒后失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise7 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([promise5, promise6]); <span class="comment">// 组合两个Promise对象</span></span><br><span class="line"></span><br><span class="line">promise7</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 5 （如果有任何一个Promise先成功，打印成功的结果）</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 如果有任何一个Promise先失败，打印失败的结果</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 async/await 语法简化异步操作（需要在函数前加上 async 关键字，并且在等待的地方加上 await 关键字）</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> promise; <span class="comment">// 等待promise对象的结果（如果成功，赋值给value；如果失败，抛出异常）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Success: <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// 如果成功，打印结果</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fail: <span class="subst">$&#123;error&#125;</span>`</span>); <span class="comment">// 如果失败，打印错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// 调用异步函数</span></span><br></pre></td></tr></table></figure>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>模块化是一种将代码分割为不同的文件或模块的方法，可以提高代码的可读性、可维护性和复用性。ES6 提供了一种原生的模块化语法，可以让 JavaScript 支持导入和导出模块。导入模块使用 import 关键字，导出模块使用 export 关键字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为 math.js 的模块文件，并且导出两个函数：add 和 multiply</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个文件中，使用 import 关键字导入 math.js 模块，并且使用它们</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, multiply &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>; <span class="comment">// 导入指定的函数（需要使用花括号）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 as 关键字给导入或导出的函数起别名</span></span><br><span class="line"><span class="keyword">import</span> &#123; add <span class="keyword">as</span> plus, multiply <span class="keyword">as</span> times &#125; <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>; <span class="comment">// 导入并重命名函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">plus</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">times</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add <span class="keyword">as</span> plus, multiply <span class="keyword">as</span> times &#125;; <span class="comment">// 导出并重命名函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 * 符号导入或导出所有的函数（需要起一个别名）</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>; <span class="comment">// 导入所有函数并起一个别名为math</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>; <span class="comment">// 导出所有函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 default 关键字指定一个默认的导出（只能有一个，默认导出不需要花括号）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subtract <span class="keyword">from</span> <span class="string">&quot;./math.js&quot;</span>; <span class="comment">// 导入默认导出（不需要花括号）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">4</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><p>迭代器是一种遵循迭代协议的对象，可以按照一定的顺序访问一个集合中的元素。迭代器有一个 next 方法，每次调用返回一个包含 value 和 done 属性的对象，value 表示当前元素的值，done 表示是否还有更多元素。ES6 提供了一种新的语法 for…of 循环，可以方便地遍历迭代器。</p>
<p>生成器是一种特殊的函数，可以返回一个迭代器对象，并且可以在函数体内使用 yield 关键字暂停和恢复执行。生成器使用 function* 关键字声明，并且可以接收参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个迭代器对象：使用 Symbol.iterator 符号作为属性名，并且返回一个具有 next 方法的对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: i++, <span class="attr">done</span>: <span class="literal">false</span> &#125;; <span class="comment">// 返回当前元素的值和状态</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;; <span class="comment">// 返回结束状态</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 循环遍历迭代器对象（不需要调用 next 方法）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个生成器函数：使用 function* 关键字，并且在函数体内使用 yield 关键字暂停和恢复执行</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i; <span class="comment">// 每次遇到 yield 关键字，返回当前值并暂停执行，直到下一次调用 next 方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用生成器函数返回一个迭代器对象（可以传入参数）</span></span><br><span class="line"><span class="keyword">let</span> iter = <span class="title function_">generator</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 循环遍历迭代器对象（不需要调用 next 方法）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Map-和-Set"><a href="#Map-和-Set" class="headerlink" title="Map 和 Set"></a>Map 和 Set</h1><p>Map 和 Set 是两种新的数据结构，可以提供更高效和灵活的存储和操作方式。Map 是一种类似于对象的集合，但是它可以使用任意类型的值作为键（而不仅仅是字符串）。Set 是一种类似于数组的集合，但是它只存储唯一的值（不会出现重复）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Map对象：使用 new 关键字，并且可以传入一个可迭代的数组作为初始值（每个元素是一个键值对数组）</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Alice&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">18</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 set 方法添加或修改键值对（可以使用任意类型的值作为键）</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;female&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>([<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;array&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 get 方法根据键获取对应的值（如果不存在，返回 undefined）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="literal">true</span>)); <span class="comment">// yes</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>([<span class="number">1</span>, <span class="number">2</span>])); <span class="comment">// undefined （因为数组是引用类型，不相等）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 has 方法判断是否存在某个键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;grade&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 delete 方法删除某个键值对（返回一个布尔值表示是否删除成功）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 size 属性获取Map中的元素个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 clear 方法清空Map中的所有元素</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Set对象：使用 new 关键字，并且可以传入一个可迭代的数组作为初始值（重复的元素会被忽略）</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 add 方法添加元素（如果已经存在，不会重复添加）</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 has 方法判断是否存在某个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">3</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">6</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 delete 方法删除某个元素（返回一个布尔值表示是否删除成功）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">delete</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">delete</span>(<span class="number">2</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 size 属性获取Set中的元素个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 使用 clear 方法清空Set中的所有元素</span></span><br><span class="line">set.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map和Set都是可迭代的对象，可以使用 for...of 循环或扩展运算符遍历它们</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Alice&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">18</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 循环遍历Map或Set（Map的每个元素是一个键值对数组，Set的每个元素是一个值）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// name: Alice  age: 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展运算符将Map或Set转换为数组（Map的每个元素是一个键值对数组，Set的每个元素是一个值）</span></span><br><span class="line"><span class="keyword">let</span> mapArr = [...map];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapArr); <span class="comment">// [[&quot;name&quot;,&quot;Alice&quot;],[&quot;age&quot;,18]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setArr = [...set];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(setArr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Es6</tag>
      </tags>
  </entry>
  <entry>
    <title>LayUi记录贴</title>
    <url>/post/36841.html</url>
    <content><![CDATA[<h1 id="LayUi-bug—操作栏低分辨率下按钮点击无效"><a href="#LayUi-bug—操作栏低分辨率下按钮点击无效" class="headerlink" title="LayUi_bug—操作栏低分辨率下按钮点击无效"></a>LayUi_bug—操作栏低分辨率下按钮点击无效</h1><p>bug 出现的原因：</p>
<p>在低分辨率下，太多的按钮会缩起来，出现…,当点击…弹出按钮框，但是点击按钮却没有效果，是因为这个框已经不是表格里的东西了，所以照常的去监听表格的事件就没有效果了，可以通过给这个按钮添加值的传递，当点击时候，将这个值变为全局的值，这样外部访问这个弹出框就能拿到值</p>
<p>解决</p>
<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;tableGrid&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;tableGrid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;table-operate-barDemo&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-normal layui-btn-xs&quot;</span> <span class="attr">security</span>=<span class="string">&quot;&quot;</span> <span class="attr">lay-event</span>=<span class="string">&quot;edit&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">i18nLang</span>[&quot;i18n.security.编辑&quot;]&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> <span class="attr">lay-event</span>=<span class="string">&quot;del&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">i18nLang</span>[&quot;i18n.security.删除&quot;]&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-xs&quot;</span> <span class="attr">lay-event</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">i18nLang</span>[&quot;i18n.security.菜单权限&quot;]&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS–&gt;模板</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">            <span class="attr">title</span>: i18nLang[<span class="string">&#x27;i18n.security.操作&#x27;</span>],</span><br><span class="line">            <span class="attr">unresize</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">fixed</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">width</span>: <span class="string">&#x27;20%&#x27;</span>,</span><br><span class="line">            <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span><br><span class="line">              <span class="comment">//自定义显示内容</span></span><br><span class="line">              <span class="keyword">var</span> strCheck = <span class="string">&#x27;&#x27;</span></span><br><span class="line">              layui.<span class="title function_">use</span>([<span class="string">&#x27;security&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> $ = layui.<span class="property">$</span>,</span><br><span class="line">                  security = layui.<span class="property">security</span></span><br><span class="line">                <span class="keyword">if</span> (security.<span class="title function_">checkAuth</span>(<span class="string">&#x27;角色管理修改&#x27;</span>) &amp;&amp; name != d.<span class="property">name</span>) &#123;</span><br><span class="line">                  strCheck += <span class="string">&#x27;&lt;a class=&quot;layui-btn layui-btn-normal layui-btn-xs&quot; lay-event=&quot;edit&quot; data-row=\&#x27;&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(d) + <span class="string">&quot;&#x27;&gt;&quot;</span> + i18nLang[<span class="string">&#x27;i18n.security.编辑&#x27;</span>] + <span class="string">&#x27;&lt;/a&gt;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (security.<span class="title function_">checkAuth</span>(<span class="string">&#x27;角色管理删除&#x27;</span>) &amp;&amp; name != d.<span class="property">name</span>) &#123;</span><br><span class="line">                  strCheck += <span class="string">&#x27;&lt;a class=&quot;layui-btn layui-btn-danger layui-btn-xs&quot; lay-event=&quot;del&quot; data-row=\&#x27;&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(d) + <span class="string">&quot;&#x27;&gt;&quot;</span> + i18nLang[<span class="string">&#x27;i18n.security.删除&#x27;</span>] + <span class="string">&#x27;&lt;/a&gt;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (security.<span class="title function_">checkAuth</span>(<span class="string">&#x27;角色管理权限菜单&#x27;</span>) &amp;&amp; name != d.<span class="property">name</span>) &#123;</span><br><span class="line">                  strCheck += <span class="string">&#x27;&lt;a class=&quot;layui-btn  layui-btn-xs&quot; lay-event=&quot;auth&quot; data-row=\&#x27;&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(d) + <span class="string">&quot;&#x27;&gt;&quot;</span> + i18nLang[<span class="string">&#x27;i18n.security.菜单权限&#x27;</span>] + <span class="string">&#x27;&lt;/a&gt;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> strCheck</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure>

<p>Js-方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentRowData = <span class="literal">null</span>; <span class="comment">//存放一行的data值,设置为全局</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCurrentRowData</span>(<span class="params">rowData</span>) &#123;</span><br><span class="line">  currentRowData = rowData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解绑之前的事件监听器</span></span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;edit&quot;]&#x27;</span>);</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;del&quot;]&#x27;</span>);</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;auth&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定新的事件监听器</span></span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;edit&quot;]&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rowData = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&quot;row&quot;</span>);</span><br><span class="line">    <span class="title function_">setCurrentRowData</span>(rowData);</span><br><span class="line">    location.<span class="property">hash</span> = <span class="string">&quot;/security/role/edit/uid=&quot;</span> + currentRowData.<span class="property">id</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;del&quot;]&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rowData = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&quot;row&quot;</span>);</span><br><span class="line">    <span class="title function_">setCurrentRowData</span>(rowData);</span><br><span class="line">    layer.<span class="title function_">confirm</span>(</span><br><span class="line">      i18nLang[<span class="string">&quot;i18n.security.确认删除?&quot;</span>],</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">btn</span>: [i18nLang[<span class="string">&quot;i18n.security.确定&quot;</span>], i18nLang[<span class="string">&quot;i18n.security.取消&quot;</span>]],</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.layui.信息&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">        admin.<span class="title function_">req</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&quot;/console/security/role/delete?id=&quot;</span> + currentRowData.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="property">code</span> == <span class="number">0</span>) &#123;</span><br><span class="line">              layer.<span class="title function_">msg</span>(</span><br><span class="line">                data.<span class="property">message</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">anim</span>: <span class="number">0</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                  table.<span class="title function_">reload</span>(<span class="string">&quot;tableGrid&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              layer.<span class="title function_">msg</span>(data.<span class="property">message</span>, &#123;</span><br><span class="line">                <span class="attr">icon</span>: <span class="number">0</span>,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">        layer.<span class="title function_">close</span>(index);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&#x27;[lay-event=&quot;auth&quot;]&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rowData = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&quot;row&quot;</span>);</span><br><span class="line">    <span class="title function_">setCurrentRowData</span>(rowData);</span><br><span class="line">    location.<span class="property">hash</span> = <span class="string">&quot;/security/role/auth/uid=&quot;</span> + currentRowData.<span class="property">id</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初次绑定事件监听器</span></span><br><span class="line"><span class="title function_">bindEventListeners</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设在切换页面时调用以下函数重新绑定事件监听器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">switchPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解绑旧的事件监听器并绑定新的事件监听器</span></span><br><span class="line">  <span class="title function_">bindEventListeners</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="LayUi-功能—全选包含全部页面数据"><a href="#LayUi-功能—全选包含全部页面数据" class="headerlink" title="LayUi 功能—全选包含全部页面数据"></a>LayUi 功能—全选包含全部页面数据</h1><p>思路：当点击全选时候，后端会返回 ids，就是要选中的行，每次表格渲染的时候会去先获取一下 id 和 ids 进行比较，如果一样就是选中的状态，如果加入条件，需要再复制一下 done 后面的到搜索那的重载表格，而且分页页数走这个里面的重载表格，需要再之前将下面 3 个变量值清空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置全局变量以保存选中行信息(仅需要id的话在你的业务位置调用ids即可，数据格式是int数组)</span></span><br><span class="line"><span class="keyword">var</span> ids = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储所有选中的数据(需要行内全量数据在你的业务位置调用lists即可，数据格式是对象集合)</span></span><br><span class="line"><span class="keyword">var</span> lists = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存当前页全部数据id，点击全选时使用</span></span><br><span class="line"><span class="keyword">var</span> tableIds = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个实例</span></span><br><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&quot;#tableGrid&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">620</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/console/marketing/userPricing/page&quot;</span>, <span class="comment">//数据接口</span></span><br><span class="line">  <span class="attr">page</span>: <span class="literal">true</span>, <span class="comment">//开启分页</span></span><br><span class="line">  <span class="comment">// , skin: &#x27;line&#x27; //行边框风格</span></span><br><span class="line">  <span class="attr">even</span>: <span class="literal">false</span>, <span class="comment">//开启隔行背景</span></span><br><span class="line">  <span class="attr">size</span>: <span class="string">&quot;lg&quot;</span>,</span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="comment">//表头</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">80</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.marketing.序号&quot;</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;numbers&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">80</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&quot;c_code&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.marketing.用户编码&quot;</span>],</span><br><span class="line">        <span class="attr">minWidth</span>: <span class="number">120</span>,</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> data[<span class="string">&quot;c_code&quot;</span>] || <span class="string">&quot;--&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.marketing.操作&quot;</span>],</span><br><span class="line">        <span class="attr">unresize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">fixed</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">toolbar</span>: <span class="string">&quot;#table-operate-barDemo&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">autoSort</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">limits</span>: [<span class="number">5</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置当前页全部数据id到全局变量,这里接收一下后端的res用来后面看看有没有接受到</span></span><br><span class="line">    test1 = res;</span><br><span class="line"></span><br><span class="line">    tableIds = res.<span class="property">data</span>.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.<span class="property">id</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 将返回的数据里的对象中的id和ids数组里的值进行比较，如果有则是选中</span></span><br><span class="line">    $.<span class="title function_">each</span>(res.<span class="property">data</span>, <span class="keyword">function</span> (<span class="params">idx, val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ids.<span class="title function_">indexOf</span>(val.<span class="property">id</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        val[<span class="string">&quot;LAY_CHECKED&quot;</span>] = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="comment">//找到对应数据改变勾选样式，呈现出选中效果</span></span><br><span class="line">        <span class="keyword">let</span> index = val[<span class="string">&quot;LAY_TABLE_INDEX&quot;</span>];</span><br><span class="line">        $(<span class="string">&quot;tr[data-index=&quot;</span> + index + <span class="string">&#x27;] input[type=&quot;checkbox&quot;]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">        form.<span class="title function_">render</span>(<span class="string">&quot;checkbox&quot;</span>); <span class="comment">//刷新checkbox选择框渲染</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取表格勾选状态，全选中时设置全选框选中</span></span><br><span class="line">    <span class="keyword">let</span> checkStatus = table.<span class="title function_">checkStatus</span>(<span class="string">&quot;tableGrid&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (checkStatus.<span class="property">isAll</span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;.layui-table-header th[data-field=&quot;0&quot;] input[type=&quot;checkbox&quot;]&#x27;</span>).<span class="title function_">prop</span>(</span><br><span class="line">        <span class="string">&quot;checked&quot;</span>,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      );</span><br><span class="line">      form.<span class="title function_">render</span>(<span class="string">&quot;checkbox&quot;</span>); <span class="comment">//刷新checkbox选择框渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用on监听checkbox选中状态并进行处理</span></span><br><span class="line">table.<span class="title function_">on</span>(<span class="string">&quot;checkbox(tableGrid)&quot;</span>, <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;🚀 ~ file: index.html:370 ~ 后端返回的对象:&#x27;, test1)</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;🚀 ~ file: index.html:505 ~ lists:&#x27;, lists)</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;🚀 ~ file: index.html:503 ~ ids:&#x27;, ids)</span></span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">checked</span> == <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">type</span> == <span class="string">&quot;one&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单选&quot;</span>);</span><br><span class="line">      ids.<span class="title function_">push</span>(obj.<span class="property">data</span>.<span class="property">id</span>);</span><br><span class="line">      lists.<span class="title function_">push</span>(obj.<span class="property">data</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:503 ~ ids:&quot;</span>, ids);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:505 ~ lists:&quot;</span>, lists);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全选&quot;</span>); <span class="comment">//这里全选时候获取后端的ids数组，这样下一页点击，它也会被勾选，因为会进行值比较再勾选</span></span><br><span class="line">      admin.<span class="title function_">req</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/console/marketing/userPricing/queryAllDeviceId&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">0</span> &amp;&amp; res.<span class="property">data</span>) &#123;</span><br><span class="line">            ids = res.<span class="property">data</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableIds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//当全选之前选中了部分行进行判断，避免重复</span></span><br><span class="line">        <span class="keyword">if</span> (ids.<span class="title function_">indexOf</span>(tableIds[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">          ids.<span class="title function_">push</span>(tableIds[i]);</span><br><span class="line">          <span class="keyword">var</span> checkStatus = table.<span class="title function_">checkStatus</span>(<span class="string">&quot;layuiReload&quot;</span>); <span class="comment">//layuiReload 为table声明的id</span></span><br><span class="line">          lists.<span class="title function_">push</span>(checkStatus.<span class="property">data</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:503 ~ ids:&quot;</span>, ids);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:505 ~ lists:&quot;</span>, lists);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">type</span> == <span class="string">&quot;one&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;取消单选&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> i = ids.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ids[i] == obj.<span class="property">data</span>.<span class="property">id</span>) &#123;</span><br><span class="line">          ids.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">          lists.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:503 ~ ids:&quot;</span>, ids);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:505 ~ lists:&quot;</span>, lists);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;取消全选&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> i = ids.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tableIds.<span class="title function_">indexOf</span>(ids[i]) != -<span class="number">1</span>) &#123;</span><br><span class="line">          ids.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">          lists.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ids = [];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:503 ~ ids:&quot;</span>, ids);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: index.html:505 ~ lists:&quot;</span>, lists);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="LayUi-功能—导出所有页数据"><a href="#LayUi-功能—导出所有页数据" class="headerlink" title="LayUi 功能—导出所有页数据"></a>LayUi 功能—导出所有页数据</h1><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h2><p>直接通过前端就将数据全部导出，第一次得到表格数据时候，顺便把总页数得到，后面按导出时候，限制数量就是最大的总页数，一次请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;export&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span> <span class="attr">i18n</span>=<span class="string">&quot;i18n.archives.导出&quot;</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> tableDataCount = <span class="number">0</span>          <span class="comment">//第一步</span></span><br><span class="line"> table.<span class="title function_">render</span>(&#123;</span><br><span class="line">   <span class="attr">elem</span>: <span class="string">&#x27;#tableGrid&#x27;</span>,</span><br><span class="line">...</span><br><span class="line">   <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">     tableDataCount = count <span class="comment">//记录所有数据数量          第二步</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加监听   第三步</span></span><br><span class="line">    $(<span class="string">&#x27;#export&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// exportFile(&quot;tableGrid&quot;, i18nLang[&quot;i18n.dma.区域漏损分析&quot;]);   //当页导出</span></span><br><span class="line">      table.<span class="title function_">reload</span>(<span class="string">&#x27;tableGrid&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">limit</span>: tableDataCount, <span class="comment">//加载所有数据</span></span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&#x27;i18n.dma.区域漏损分析&#x27;</span>],</span><br><span class="line">        <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//导出所有数据</span></span><br><span class="line">          <span class="comment">//table.exportFile(&#x27;tableGrid&#x27;, false, &#x27;xlsx&#x27;)  //这样能批量导出不过不能修改里面的字段是否隐藏</span></span><br><span class="line">          <span class="comment">//恢复数据分页显示</span></span><br><span class="line">          <span class="title function_">exportFile</span>(<span class="string">&quot;tableGrid&quot;</span>, i18nLang[<span class="string">&quot;i18n.dma.区域漏损分析&quot;</span>]);    <span class="comment">//自定义导出的方法</span></span><br><span class="line">          table.<span class="title function_">reload</span>(<span class="string">&#x27;tableGrid&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">25</span>,</span><br><span class="line">            <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">              tableDataCount = count</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">exportFile</span>(<span class="params">id, fileName</span>) &#123;</span><br><span class="line">  <span class="comment">//根据传入tableID获取表头</span></span><br><span class="line">  <span class="keyword">var</span> headers = $(<span class="string">&quot;div[lay-id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> htrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(headers.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> titles = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; htrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> hths = <span class="title class_">Array</span>.<span class="title function_">from</span>(htrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;th&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> clazz = hths[i].<span class="title function_">getAttributeNode</span>(<span class="string">&quot;class&quot;</span>).<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> fieldNode = hths[i].<span class="property">dataset</span>.<span class="property">field</span>;</span><br><span class="line">      <span class="comment">//   console.log(fieldNode);</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        clazz != <span class="string">&quot; layui-table-col-special&quot;</span> &amp;&amp;</span><br><span class="line">        clazz != <span class="string">&quot;layui-hide&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;checkbox&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;operate&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;warningState&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">//排除居左、居右、隐藏字段</span></span><br><span class="line">        <span class="comment">//排除复选框、操作栏</span></span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        titles[<span class="string">&quot;data-field&quot;</span> + i] = hths[i].<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据传入tableID获取table内容</span></span><br><span class="line">  <span class="keyword">var</span> bodys = $(<span class="string">&quot;div[lay-id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> btrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(bodys.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> bodysArr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; btrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> contents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> btds = <span class="title class_">Array</span>.<span class="title function_">from</span>(btrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;td&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> titles) &#123;</span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        <span class="keyword">var</span> field = <span class="string">&quot;data-field&quot;</span> + i;</span><br><span class="line">        <span class="keyword">if</span> (field === key) &#123;</span><br><span class="line">          <span class="comment">//根据表头字段获取table内容字段</span></span><br><span class="line">          contents[field] = btds[i].<span class="property">innerText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bodysArr.<span class="title function_">push</span>(contents);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将标题行置顶添加到数组</span></span><br><span class="line">  bodysArr.<span class="title function_">unshift</span>(titles);</span><br><span class="line">  <span class="comment">//导出excel</span></span><br><span class="line">  <span class="variable constant_">LAY_EXCEL</span>.<span class="title function_">exportExcel</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">sheet1</span>: bodysArr,</span><br><span class="line">    &#125;,</span><br><span class="line">    fileName + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>() + <span class="string">&quot;.xlsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xlsx&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> search</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> params = &#123;</span><br><span class="line">        <span class="attr">consumerTypeId</span>: $(<span class="string">&quot;select[name=&#x27;consumerTypeId&#x27;]&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">        <span class="attr">deviceCode</span>: $(<span class="string">&quot;input[name=&#x27;deviceCode&#x27;]&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">        <span class="attr">consumerName</span>: $(<span class="string">&quot;input[name=&#x27;consumerName&#x27;]&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">        <span class="attr">consumerCode</span>: $(<span class="string">&quot;input[name=&#x27;consumerCode&#x27;]&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">        <span class="attr">state</span>: $(<span class="string">&quot;select[name=&#x27;state&#x27;]&quot;</span>).<span class="title function_">val</span>(),</span><br><span class="line">       <span class="attr">areaCode</span>: areaCode,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">allExport</span>(params, <span class="string">&#x27;/console/bill/chargeOff/billManageExport&#x27;</span>, i18nLang[<span class="string">&#x27;i18n.collect.账单管理&#x27;</span>], setter)</span><br></pre></td></tr></table></figure>

<p>点击按钮请求后端接口，后端将表格数据传过来,封装了请求的方法，传入搜索的参数、url、文件名、setter 即可，全局可调用这个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式转化</span></span><br><span class="line"><span class="comment"> * &#123;name: &#x27;zs&#x27;, age: 18&#125; =&gt; name=zs&amp;age=18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params 参数对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringify</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(params)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> key + <span class="string">&#x27;=&#x27;</span> + params[key])</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">allExport</span>(<span class="params">params, url, fileName, setter</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> exportParams = <span class="title function_">stringify</span>(params)</span><br><span class="line">  <span class="comment">// console.log(&#x27;导出参数&#x27;, exportParams)</span></span><br><span class="line">  <span class="comment">// // 1. 创建 xhr 对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  <span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, setter.<span class="property">serverUrl</span> + url + <span class="string">&#x27;?&#x27;</span> + exportParams, <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 3. 设置 Content-Type 属性（固定写法）</span></span><br><span class="line">  <span class="comment">// Content-Type: multipart/form-data;</span></span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/vnd.ms-excel;charset=UTF-8&#x27;</span>)</span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;X-Auth-Token&#x27;</span>, layui.<span class="title function_">data</span>(setter.<span class="property">tableName</span>)[setter.<span class="property">request</span>.<span class="property">tokenName</span>])</span><br><span class="line">  <span class="comment">//4. 定义responseType=&#x27;blob&#x27;, 是读取文件成功的关键，这样设置可以解决下载文件乱码的问题</span></span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>, xhr.<span class="property">status</span>)</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// var responseText = xhr.responseText; 不能使用这个获取结果</span></span><br><span class="line">      <span class="comment">//返回二进制数据流</span></span><br><span class="line">      <span class="comment">// console.log(responseText);</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;成功了吗&#x27;, xhr)</span></span><br><span class="line">      <span class="comment">// console.log(xhr.response)</span></span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([xhr.<span class="property">response</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/vnd.ms-excel;charset=UTF-8&#x27;</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> blobUrl = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">      <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">      a.<span class="property">download</span> = fileName</span><br><span class="line">      a.<span class="property">href</span> = blobUrl</span><br><span class="line">      a.<span class="title function_">click</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 调用 send 函数发送携带的数据</span></span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="LayUi-功能—中英文不生效"><a href="#LayUi-功能—中英文不生效" class="headerlink" title="LayUi 功能—中英文不生效"></a>LayUi 功能—中英文不生效</h1><p>在表格渲染完后想插入一段 html，中英文不生效</p>
<p>获取中英文状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取语言,放到全局工具类里了</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookieValue</span>(<span class="params">cookieName</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = cookieName + <span class="string">&#x27;=&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> decodedCookie = <span class="built_in">decodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><br><span class="line">  <span class="keyword">var</span> cookieArray = decodedCookie.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookieArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookie = cookieArray[i].<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cookie.<span class="title function_">indexOf</span>(name) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cookie.<span class="title function_">substring</span>(name.<span class="property">length</span>, cookie.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">    tableDataCount = count <span class="comment">//记录所有数据数量</span></span><br><span class="line">    <span class="keyword">var</span> lan = <span class="title function_">getCookieValue</span>(<span class="string">&#x27;grycan.cn.bLang&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> tableTitle = <span class="string">&#x27;&#x27;</span> <span class="comment">// 表格标题文本</span></span><br><span class="line">    <span class="keyword">var</span> endTitle = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (lan === <span class="string">&#x27;en&#x27;</span>) &#123;</span><br><span class="line">      tableTitle = <span class="string">&#x27;Total(CNY):&#x27;</span></span><br><span class="line">      endTitle = <span class="string">&#x27;(Excluding pending execution)&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tableTitle = <span class="string">&#x27;合计实收金额(元):&#x27;</span></span><br><span class="line">      endTitle = <span class="string">&#x27;(不包含待执行)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      $(<span class="string">&#x27;.layui-table-page&gt;div&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;div &gt;&#x27;</span> + tableTitle + res.<span class="property">totalPaidInAmount</span> + endTitle + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="LayUi-功能—处理表格数据"><a href="#LayUi-功能—处理表格数据" class="headerlink" title="LayUi 功能—处理表格数据"></a>LayUi 功能—处理表格数据</h1><p>在 templet 里处理数据并返回给表格里的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">table.<span class="title function_">render</span>(&#123;</span><br><span class="line">  <span class="attr">where</span>: where,</span><br><span class="line">  <span class="attr">elem</span>: <span class="string">&quot;#account-table-toolbar&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">530</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/console/bill/...&quot;</span>,</span><br><span class="line">  <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.collect.AAAA&quot;</span>],</span><br><span class="line">  <span class="attr">toolbar</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">parseData</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">//渲染表格之前拿到的数据，也可以在这做假数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">code</span>: res.<span class="property">data</span>.<span class="property">page</span>.<span class="property">code</span>, <span class="comment">//解析接口状态</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">data</span>: res.<span class="property">data</span>.<span class="property">page</span>.<span class="property">data</span>, <span class="comment">//解析数据列表</span></span><br><span class="line">      <span class="attr">count</span>: res.<span class="property">data</span>.<span class="property">page</span>.<span class="property">count</span>,</span><br><span class="line">      <span class="attr">totalPaidInAmount</span>: res.<span class="property">data</span>.<span class="property">totalPaidInAmount</span>,</span><br><span class="line">      <span class="attr">msg</span>: res.<span class="property">message</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cols</span>: [</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span>,</span><br><span class="line">        <span class="attr">fixed</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&quot;totalAmount&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.collect.结算金额&quot;</span>],</span><br><span class="line">        <span class="attr">width</span>: <span class="number">170</span>,</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="property">totalAmount</span> ? (res.<span class="property">totalAmount</span> / <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&quot;billState&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.collect.账单状态&quot;</span>],</span><br><span class="line">        <span class="attr">width</span>: <span class="number">120</span>,</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">balanceState</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="property">billState</span> == <span class="number">0</span></span><br><span class="line">              ? i18nLang[<span class="string">&quot;i18n.collect.未欠费&quot;</span>]</span><br><span class="line">              : i18nLang[<span class="string">&quot;i18n.collect.欠费&quot;</span>];</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i18nLang[<span class="string">&quot;i18n.collect.未结算&quot;</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&quot;surplusAmount&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.revenue.余额(元)&quot;</span>],</span><br><span class="line">        <span class="attr">templet</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!data.<span class="property">surplusAmount</span> || data.<span class="property">surplusAmount</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">parseFloat</span>(data.<span class="property">surplusAmount</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">fixed</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="attr">title</span>: i18nLang[<span class="string">&quot;i18n.collect.操作&quot;</span>],</span><br><span class="line">        <span class="attr">unresize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">toolbar</span>: <span class="string">&quot;#account-table-toolbar-barDemo&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">130</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">initSort</span>: &#123;</span><br><span class="line">    <span class="attr">field</span>: <span class="string">&quot;period&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;desc&quot;</span>, <span class="comment">//&#x27;asc&#x27;desc</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">page</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">autoSort</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">limits</span>: [<span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">  <span class="attr">done</span>: <span class="keyword">function</span> (<span class="params">res, curr, count</span>) &#123;</span><br><span class="line">    tableDataCount = count; <span class="comment">//记录所有数据数量</span></span><br><span class="line">    count ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">elem</span></span><br><span class="line">        .<span class="title function_">next</span>(<span class="string">&quot;.layui-table-view&quot;</span>)</span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&quot;.layui-table-header&quot;</span>)</span><br><span class="line">        .<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;inline-block&quot;</span>);</span><br><span class="line">    count ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">elem</span></span><br><span class="line">        .<span class="title function_">next</span>(<span class="string">&quot;.layui-table-view&quot;</span>)</span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&quot;.layui-table-box&quot;</span>)</span><br><span class="line">        .<span class="title function_">css</span>(<span class="string">&quot;overflow-x&quot;</span>, <span class="string">&quot;auto&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h1><p>模拟点击</p>
<p>$(‘#select-payment’).trigger(‘click’);</p>
<p>时间戳</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: glq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:   2021-08-02 15:41:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last</span> Modified by: glq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last</span> Modified time: 2023-08-30 17:40:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间戳格式化函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">int</span>&#125;    timestamp 时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;           格式化的时间字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeStampToString</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (timestamp == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line">  <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> M = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">  M = M &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + M : M;</span><br><span class="line">  <span class="keyword">var</span> str = y + <span class="string">&quot;-&quot;</span> + m + <span class="string">&quot;-&quot;</span> + d + <span class="string">&quot; &quot;</span> + h + <span class="string">&quot;:&quot;</span> + M;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateStampToString</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(&quot;ffff&quot;,timestamp)</span></span><br><span class="line">  <span class="keyword">if</span> (timestamp == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line">  <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> M = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">  M = M &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + M : M;</span><br><span class="line">  <span class="keyword">var</span> str = y + <span class="string">&quot;-&quot;</span> + m + <span class="string">&quot;-&quot;</span> + d;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timesStampToString</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (timestamp == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line">  <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> M = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">  M = M &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + M : M;</span><br><span class="line">  <span class="keyword">var</span> s = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">  s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">  <span class="keyword">var</span> str = y + <span class="string">&quot;-&quot;</span> + m + <span class="string">&quot;-&quot;</span> + d + <span class="string">&quot; &quot;</span> + h + <span class="string">&quot;:&quot;</span> + M + <span class="string">&quot;:&quot;</span> + s;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHierarchy</span>(<span class="params">admin, url</span>) &#123;</span><br><span class="line">  <span class="comment">//   console.log(&quot;getHierarchy&quot;, admin, url);</span></span><br><span class="line">  <span class="comment">//获取导航栏</span></span><br><span class="line">  admin.<span class="title function_">req</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/console/security/menu/getHierarchy&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">uri</span>: url,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data = data.<span class="property">data</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        $(<span class="string">&quot;#resourcesList&quot;</span>).<span class="title function_">append</span>(</span><br><span class="line">          <span class="string">&quot;&lt;span lay-separator&gt;/&lt;/span&gt;&lt;a&gt;&quot;</span> + data[i] + <span class="string">&quot;&lt;/a&gt;&quot;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用水户类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">admin</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">form</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getConsumerType</span>(<span class="params">admin, form</span>) &#123;</span><br><span class="line">  admin.<span class="title function_">req</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/console/archives/consumerType/list&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data = json.<span class="property">data</span>;</span><br><span class="line">      <span class="keyword">var</span> select_html =</span><br><span class="line">        <span class="string">&#x27;&lt;option value=&quot;&quot; &gt; &#x27;</span> + i18nLang[<span class="string">&quot;i18n.collect.用户类型&quot;</span>] + <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">var</span> option_html =</span><br><span class="line">          <span class="string">&quot;&lt;option value=&#x27;&quot;</span> +</span><br><span class="line">          data[x][<span class="string">&quot;id&quot;</span>] +</span><br><span class="line">          <span class="string">&quot;&#x27;&gt;&quot;</span> +</span><br><span class="line">          data[x][<span class="string">&quot;name&quot;</span>] +</span><br><span class="line">          <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span><br><span class="line">        select_html = select_html + option_html;</span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&quot;select[name=&#x27;consumerTypeId&#x27;]&quot;</span>).<span class="title function_">html</span>(select_html);</span><br><span class="line">      form.<span class="title function_">render</span>(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 公共打印函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> css  打印页面样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> html 打印页面内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">word_print</span>(<span class="params">css, html</span>) &#123;</span><br><span class="line">  <span class="comment">//判断iframe是否存在，不存在则创建ifr</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;print-iframe===3=&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;print-iframe&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;print-iframe==2=&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!iframe) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;print-iframe===1=&quot;</span>);</span><br><span class="line">    iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;IFRAME&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> doc = <span class="literal">null</span>;</span><br><span class="line">    iframe.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;print-iframe&quot;</span>);</span><br><span class="line">    iframe.<span class="title function_">setAttribute</span>(</span><br><span class="line">      <span class="string">&quot;style&quot;</span>,</span><br><span class="line">      <span class="string">&quot;position:absolute;width:0px;height:0px;left:-500px;top:-500px;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line">    doc = iframe.<span class="property">contentWindow</span>.<span class="property">document</span>;</span><br><span class="line">    <span class="comment">//这里可以自定义样式</span></span><br><span class="line">    doc.<span class="title function_">write</span>(<span class="string">&quot;&lt;style&gt;&quot;</span> + css + <span class="string">&quot;&lt;/style&gt;&quot;</span>);</span><br><span class="line">    doc.<span class="title function_">write</span>(<span class="string">&quot;&lt;div&gt;&quot;</span> + html + <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">    doc.<span class="title function_">close</span>();</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  iframe.<span class="property">contentWindow</span>.<span class="title function_">print</span>();</span><br><span class="line">  <span class="comment">//清除历史打印记录</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表格导出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">fileName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exportFile</span>(<span class="params">id, fileName</span>) &#123;</span><br><span class="line">  <span class="comment">//根据传入tableID获取表头</span></span><br><span class="line">  <span class="keyword">var</span> headers = $(<span class="string">&quot;div[lay-id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> htrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(headers.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> titles = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; htrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> hths = <span class="title class_">Array</span>.<span class="title function_">from</span>(htrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;th&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> clazz = hths[i].<span class="title function_">getAttributeNode</span>(<span class="string">&quot;class&quot;</span>).<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> fieldNode = hths[i].<span class="property">dataset</span>.<span class="property">field</span>;</span><br><span class="line">      <span class="comment">//   console.log(fieldNode);</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        clazz != <span class="string">&quot; layui-table-col-special&quot;</span> &amp;&amp;</span><br><span class="line">        clazz != <span class="string">&quot;layui-hide&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;checkbox&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;operate&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;warningState&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">//排除居左、居右、隐藏字段</span></span><br><span class="line">        <span class="comment">//排除复选框、操作栏</span></span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        titles[<span class="string">&quot;data-field&quot;</span> + i] = hths[i].<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据传入tableID获取table内容</span></span><br><span class="line">  <span class="keyword">var</span> bodys = $(<span class="string">&quot;div[lay-id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> btrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(bodys.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> bodysArr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; btrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> contents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> btds = <span class="title class_">Array</span>.<span class="title function_">from</span>(btrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;td&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> titles) &#123;</span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        <span class="keyword">var</span> field = <span class="string">&quot;data-field&quot;</span> + i;</span><br><span class="line">        <span class="keyword">if</span> (field === key) &#123;</span><br><span class="line">          <span class="comment">//根据表头字段获取table内容字段</span></span><br><span class="line">          contents[field] = btds[i].<span class="property">innerText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bodysArr.<span class="title function_">push</span>(contents);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将标题行置顶添加到数组</span></span><br><span class="line">  bodysArr.<span class="title function_">unshift</span>(titles);</span><br><span class="line">  <span class="comment">//导出excel</span></span><br><span class="line">  <span class="variable constant_">LAY_EXCEL</span>.<span class="title function_">exportExcel</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">sheet1</span>: bodysArr,</span><br><span class="line">    &#125;,</span><br><span class="line">    fileName + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>() + <span class="string">&quot;.xlsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xlsx&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表格导出多个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">fileName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exportFiles</span>(<span class="params">id, fileName</span>) &#123;</span><br><span class="line">  <span class="comment">//根据传入tableID获取表头</span></span><br><span class="line">  <span class="keyword">var</span> headers = $(<span class="string">&quot;div[id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>); <span class="comment">//$(&quot;div[id=&quot; + id + &quot;] .layui-table-box table&quot;).get(0);</span></span><br><span class="line">  <span class="keyword">var</span> titles = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> htrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(headers.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> row = htrs.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; htrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> hths = <span class="title class_">Array</span>.<span class="title function_">from</span>(htrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;th&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> clazz = hths[i].<span class="title function_">getAttributeNode</span>(<span class="string">&quot;class&quot;</span>).<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> fieldNode = hths[i].<span class="property">dataset</span>.<span class="property">field</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fieldNode);</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        clazz != <span class="string">&quot; layui-table-col-special&quot;</span> &amp;&amp;</span><br><span class="line">        clazz != <span class="string">&quot;layui-hide&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;checkbox&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;operate&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">//排除居左、居右、隐藏字段</span></span><br><span class="line">        <span class="comment">//排除复选框、操作栏</span></span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        titles[<span class="string">&quot;data-field&quot;</span> + i] = hths[i].<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据传入tableID获取table内容</span></span><br><span class="line">  <span class="keyword">var</span> bodys = $(<span class="string">&quot;div[id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">1</span>); <span class="comment">//.get(1);</span></span><br><span class="line">  <span class="keyword">var</span> btrs = <span class="title class_">Array</span>.<span class="title function_">from</span>(bodys.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> bodysArr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  row += btrs.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; btrs.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> contents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> btds = <span class="title class_">Array</span>.<span class="title function_">from</span>(btrs[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;td&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> titles) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i+row&quot;</span>, i + row);</span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        <span class="keyword">var</span> field = <span class="string">&quot;data-field&quot;</span> + i;</span><br><span class="line">        <span class="keyword">if</span> (field === key) &#123;</span><br><span class="line">          <span class="comment">//根据表头字段获取table内容字段</span></span><br><span class="line">          contents[field] = btds[i].<span class="property">innerText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bodysArr.<span class="title function_">push</span>(contents);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> headers2 = $(<span class="string">&quot;div[id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> titles2 = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> htrs2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(headers2.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  row += htrs2.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; htrs2.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> hths = <span class="title class_">Array</span>.<span class="title function_">from</span>(htrs2[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;th&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hths.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> clazz = hths[i].<span class="title function_">getAttributeNode</span>(<span class="string">&quot;class&quot;</span>).<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">var</span> fieldNode = hths[i].<span class="property">dataset</span>.<span class="property">field</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fieldNode);</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        clazz != <span class="string">&quot; layui-table-col-special&quot;</span> &amp;&amp;</span><br><span class="line">        clazz != <span class="string">&quot;layui-hide&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;checkbox&quot;</span> &amp;&amp;</span><br><span class="line">        fieldNode != <span class="string">&quot;operate&quot;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">//排除居左、居右、隐藏字段</span></span><br><span class="line">        <span class="comment">//排除复选框、操作栏</span></span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        titles2[<span class="string">&quot;data-field&quot;</span> + i] = hths[i].<span class="property">innerText</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据传入tableID获取table内容</span></span><br><span class="line">  <span class="keyword">var</span> bodys2 = $(<span class="string">&quot;div[id=&quot;</span> + id + <span class="string">&quot;] .layui-table-box table&quot;</span>).<span class="title function_">get</span>(<span class="number">3</span>); <span class="comment">//.get(1);</span></span><br><span class="line">  <span class="keyword">var</span> btrs2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(bodys2.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> bodysArr2 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">  row += btrs2.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; btrs2.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">var</span> contents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> btds = <span class="title class_">Array</span>.<span class="title function_">from</span>(btrs2[j].<span class="title function_">querySelectorAll</span>(<span class="string">&quot;td&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> titles) &#123;</span><br><span class="line">        <span class="comment">//修改:默认字段data-field+i,兼容部分数据表格中不存在data-field值的问题</span></span><br><span class="line">        <span class="keyword">var</span> field = <span class="string">&quot;data-field&quot;</span> + i;</span><br><span class="line">        <span class="keyword">if</span> (field === key) &#123;</span><br><span class="line">          <span class="comment">//根据表头字段获取table内容字段</span></span><br><span class="line">          contents[field] = btds[i].<span class="property">innerText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bodysArr2.<span class="title function_">push</span>(contents);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(&quot;tr====&quot;,row)</span></span><br><span class="line">  <span class="comment">//将标题行置顶添加到数组</span></span><br><span class="line">  bodysArr.<span class="title function_">unshift</span>(titles);</span><br><span class="line">  bodysArr2.<span class="title function_">unshift</span>(titles2);</span><br><span class="line">  <span class="comment">// bodysArr.push();</span></span><br><span class="line">  <span class="comment">// console.log(bodysArr.concat(bodysArr2));</span></span><br><span class="line">  <span class="comment">// console.log(bodysArr,&quot;[...bodysArr,bodysArr2]:&quot;,[...bodysArr,...JSON.parse(JSON.stringify(bodysArr2))])</span></span><br><span class="line">  <span class="comment">//导出excel</span></span><br><span class="line">  <span class="variable constant_">LAY_EXCEL</span>.<span class="title function_">exportExcel</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">sheet1</span>: bodysArr.<span class="title function_">concat</span>(bodysArr2),</span><br><span class="line">    &#125;,</span><br><span class="line">    fileName + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>() + <span class="string">&quot;.xlsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xlsx&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNull</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (val == <span class="literal">null</span> || <span class="keyword">typeof</span> val == <span class="string">&quot;undefined&quot;</span> || val == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本周的第一天</span></span><br><span class="line"><span class="comment"> * 返回格式: YYYY-mm-dd</span></span><br><span class="line"><span class="comment"> *    例子: 当日为: 2020-11-27</span></span><br><span class="line"><span class="comment"> *      返回日期为: 2020-11-23</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentWeekFirstDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> weekFirstDay = <span class="keyword">new</span> <span class="title class_">Date</span>(date - (date.<span class="title function_">getDay</span>() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">  <span class="keyword">let</span> firstMonth = <span class="title class_">Number</span>(weekFirstDay.<span class="title function_">getMonth</span>()) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (firstMonth &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    firstMonth = <span class="string">&quot;0&quot;</span> + firstMonth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> weekFirstDays = weekFirstDay.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">if</span> (weekFirstDays &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    weekFirstDays = <span class="string">&quot;0&quot;</span> + weekFirstDays;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> weekFirstDay.<span class="title function_">getFullYear</span>() + <span class="string">&quot;-&quot;</span> + firstMonth + <span class="string">&quot;-&quot;</span> + weekFirstDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本周的最后一天</span></span><br><span class="line"><span class="comment"> * 返回格式: YYYY-mm-dd</span></span><br><span class="line"><span class="comment"> *    例子: 当日为: 2020-11-27</span></span><br><span class="line"><span class="comment"> *      返回日期为: 2020-11-29</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCurrentWeekLastDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> weekFirstDay = <span class="keyword">new</span> <span class="title class_">Date</span>(date - (date.<span class="title function_">getDay</span>() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">  <span class="keyword">let</span> weekLastDay = <span class="keyword">new</span> <span class="title class_">Date</span>((weekFirstDay / <span class="number">1000</span> + <span class="number">6</span> * <span class="number">86400</span>) * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">let</span> lastMonth = <span class="title class_">Number</span>(weekLastDay.<span class="title function_">getMonth</span>()) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (lastMonth &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    lastMonth = <span class="string">&quot;0&quot;</span> + lastMonth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> weekLastDays = weekLastDay.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">if</span> (weekLastDays &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    weekLastDays = <span class="string">&quot;0&quot;</span> + weekLastDays;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> weekFirstDay.<span class="title function_">getFullYear</span>() + <span class="string">&quot;-&quot;</span> + lastMonth + <span class="string">&quot;-&quot;</span> + weekLastDays;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//格式化月和日为MM、dd</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    value = <span class="string">&quot;0&quot;</span> + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 年份 和 季度  获取 季度 第一天 和 季度 最后 一天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">year</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">quarter</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQuartorStartDate</span>(<span class="params">year, quarter</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startMonth = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (quarter == <span class="number">1</span>) &#123;</span><br><span class="line">    startMonth = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarter == <span class="number">2</span>) &#123;</span><br><span class="line">    startMonth = <span class="number">4</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarter == <span class="number">3</span>) &#123;</span><br><span class="line">    startMonth = <span class="number">7</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarter == <span class="number">4</span>) &#123;</span><br><span class="line">    startMonth = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> endMonth = startMonth + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (quarter == <span class="number">0</span>) &#123;</span><br><span class="line">    endMonth = <span class="number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> startDate = year + <span class="string">&quot;-&quot;</span> + <span class="title function_">formatDate</span>(startMonth) + <span class="string">&quot;-01&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> endDate =</span><br><span class="line">    year +</span><br><span class="line">    <span class="string">&quot;-&quot;</span> +</span><br><span class="line">    <span class="title function_">formatDate</span>(endMonth) +</span><br><span class="line">    <span class="string">&quot;-&quot;</span> +</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Date</span>(year, endMonth, <span class="number">0</span>).<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="comment">// console.log(startDate,endDate)</span></span><br><span class="line">  <span class="keyword">return</span> [startDate, endDate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genTime</span>(<span class="params">opt</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">let</span> mth = now.<span class="title function_">getMonth</span>();</span><br><span class="line">  <span class="keyword">let</span> day = now.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">let</span> month = mth + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (day &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    day = <span class="string">&quot;0&quot;</span> + day;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str;</span><br><span class="line">  <span class="keyword">if</span> (opt == <span class="string">&quot;day&quot;</span>) &#123;</span><br><span class="line">    str = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&quot;week&quot;</span>) &#123;</span><br><span class="line">    str = <span class="title function_">getCurrentWeekFirstDay</span>() + <span class="string">&quot;~&quot;</span> + <span class="title function_">getCurrentWeekLastDay</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&quot;month&quot;</span>) &#123;</span><br><span class="line">    str = year + <span class="string">&quot;-&quot;</span> + month;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&quot;quarter&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mth &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      str = year + <span class="string">&quot; - 1&quot;</span> + i18nLang[<span class="string">&quot;i18n.report.季&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mth &lt; <span class="number">6</span>) &#123;</span><br><span class="line">      str = year + <span class="string">&quot; - 2&quot;</span> + i18nLang[<span class="string">&quot;i18n.report.季&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mth &lt; <span class="number">9</span>) &#123;</span><br><span class="line">      str = year + <span class="string">&quot; - 3&quot;</span> + i18nLang[<span class="string">&quot;i18n.report.季&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mth &lt; <span class="number">12</span>) &#123;</span><br><span class="line">      str = year + <span class="string">&quot; - 4&quot;</span> + i18nLang[<span class="string">&quot;i18n.report.季&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&quot;year&quot;</span>) &#123;</span><br><span class="line">    str = year;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间格式转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date 时间值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 时间类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStartEndTime</span>(<span class="params">date, type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (date) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">&quot;day&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;week&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = date.<span class="title function_">split</span>(<span class="string">&quot;~&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> first = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> last = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(first);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(last);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;month&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = date.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> year = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> month = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month - <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//这个月的第一天</span></span><br><span class="line">      <span class="keyword">var</span> currentMonth = startTime.<span class="title function_">getMonth</span>(); <span class="comment">//取得月份数</span></span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(startTime.<span class="title function_">getFullYear</span>(), currentMonth + <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//是0而不是-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;quarter&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> year = date.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">var</span> quarter = date.<span class="title function_">slice</span>(<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">var</span> arr = <span class="title function_">getQuartorStartDate</span>(year, quarter);</span><br><span class="line">      <span class="keyword">var</span> first = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> last = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(first);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(last);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;year&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date, <span class="number">12</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    startTime.<span class="title function_">setHours</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setMinutes</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setSeconds</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setMilliseconds</span>(<span class="number">0</span>);</span><br><span class="line">    endTime.<span class="title function_">setHours</span>(<span class="number">23</span>);</span><br><span class="line">    endTime.<span class="title function_">setMinutes</span>(<span class="number">59</span>);</span><br><span class="line">    endTime.<span class="title function_">setSeconds</span>(<span class="number">59</span>);</span><br><span class="line">    endTime.<span class="title function_">setMilliseconds</span>(<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">startAt</span>: startTime.<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">endAt</span>: endTime.<span class="title function_">getTime</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">startAt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">endAt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStartEndTime2</span>(<span class="params">date, type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (date) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">&quot;day&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;week&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = date.<span class="title function_">split</span>(<span class="string">&quot;~&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> first = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> last = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(first);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(last);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;month&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = date.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> year = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> month = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month - <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//这个月的第一天</span></span><br><span class="line">      <span class="keyword">var</span> currentMonth = startTime.<span class="title function_">getMonth</span>(); <span class="comment">//取得月份数</span></span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(startTime.<span class="title function_">getFullYear</span>(), currentMonth + <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//是0而不是-1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;quarter&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> year = date.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">var</span> quarter = date.<span class="title function_">slice</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">var</span> arr = <span class="title function_">getQuartorStartDate</span>(year, quarter);</span><br><span class="line">      <span class="keyword">var</span> first = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> last = arr[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(first);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(last);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;year&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">      <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date, <span class="number">12</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    startTime.<span class="title function_">setHours</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setMinutes</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setSeconds</span>(<span class="number">0</span>);</span><br><span class="line">    startTime.<span class="title function_">setMilliseconds</span>(<span class="number">0</span>);</span><br><span class="line">    endTime.<span class="title function_">setHours</span>(<span class="number">23</span>);</span><br><span class="line">    endTime.<span class="title function_">setMinutes</span>(<span class="number">59</span>);</span><br><span class="line">    endTime.<span class="title function_">setSeconds</span>(<span class="number">59</span>);</span><br><span class="line">    endTime.<span class="title function_">setMilliseconds</span>(<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">startAt</span>: startTime.<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">endAt</span>: endTime.<span class="title function_">getTime</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">startAt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">endAt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 周选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">weekDone</span>(<span class="params">value, date, endDate, ele</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value != <span class="string">&quot;&quot;</span> &amp;&amp; value.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(value.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">let</span> weekday = today.<span class="title function_">getDay</span>();</span><br><span class="line">    <span class="keyword">let</span> monday;</span><br><span class="line">    <span class="keyword">let</span> sunday;</span><br><span class="line">    <span class="keyword">if</span> (weekday == <span class="number">0</span>) &#123;</span><br><span class="line">      monday = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * (weekday - <span class="number">6</span>) + today.<span class="title function_">getTime</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      monday = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * (<span class="number">1</span> - weekday) + today.<span class="title function_">getTime</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (weekday == <span class="number">0</span>) &#123;</span><br><span class="line">      sunday = today;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sunday = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * (<span class="number">7</span> - weekday) + today.<span class="title function_">getTime</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> month = monday.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> day1 = monday.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">if</span> (day1 &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      day1 = <span class="string">&quot;0&quot;</span> + day1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="string">&quot;&quot;</span> + monday.<span class="title function_">getFullYear</span>() + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day1;</span><br><span class="line">    <span class="keyword">let</span> month2 = sunday.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (month2 &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      month2 = <span class="string">&quot;0&quot;</span> + month2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> day2 = sunday.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">if</span> (day2 &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      day2 = <span class="string">&quot;0&quot;</span> + day2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="string">&quot;&quot;</span> + sunday.<span class="title function_">getFullYear</span>() + <span class="string">&quot;-&quot;</span> + month2 + <span class="string">&quot;-&quot;</span> + day2;</span><br><span class="line">    ele.<span class="title function_">val</span>(start + <span class="string">&quot;~&quot;</span> + end);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ele.<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 季度选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">seasonReady</span>(<span class="params">value, date, endDate, ele</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;季度选择&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> ren = <span class="keyword">function</span> (<span class="params">thiz</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> mls = thiz.<span class="title function_">find</span>(<span class="string">&quot;.laydate-month-list&quot;</span>);</span><br><span class="line">    mls.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, e</span>) &#123;</span><br><span class="line">      $(<span class="variable language_">this</span>)</span><br><span class="line">        .<span class="title function_">find</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">        .<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">inx, ele</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> cx = ele.<span class="property">innerHTML</span>;</span><br><span class="line">          <span class="keyword">if</span> (inx &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            ele.<span class="property">innerHTML</span> = cx.<span class="title function_">replace</span>(<span class="regexp">/月/g</span>, i18nLang[<span class="string">&quot;i18n.collection.季度&quot;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (cx == <span class="string">&quot;Jan&quot;</span>) ele.<span class="property">innerHTML</span> = <span class="string">&quot;first&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cx == <span class="string">&quot;Feb&quot;</span>) ele.<span class="property">innerHTML</span> = <span class="string">&quot;second&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cx == <span class="string">&quot;Mar&quot;</span>) ele.<span class="property">innerHTML</span> = <span class="string">&quot;3rd&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (cx == <span class="string">&quot;Apr&quot;</span>) ele.<span class="property">innerHTML</span> = <span class="string">&quot;fourth&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ele.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> hd = $(<span class="string">&quot;#layui-laydate&quot;</span> + ele.<span class="title function_">attr</span>(<span class="string">&quot;lay-key&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (hd.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    hd.<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">ren</span>($(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">ren</span>(hd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">seasonDone</span>(<span class="params">value, date, endDate, ele</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;季度选择seasonDone&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isNull</span>(date) &amp;&amp; date.<span class="property">month</span> &gt; <span class="number">0</span> &amp;&amp; date.<span class="property">month</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    ele.<span class="title function_">attr</span>(<span class="string">&quot;startDate&quot;</span>, date.<span class="property">year</span> + <span class="string">&quot;-&quot;</span> + date.<span class="property">month</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ele.<span class="title function_">attr</span>(<span class="string">&quot;startDate&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isNull</span>(endDate) &amp;&amp; endDate.<span class="property">month</span> &gt; <span class="number">0</span> &amp;&amp; endDate.<span class="property">month</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    ele.<span class="title function_">attr</span>(<span class="string">&quot;endDate&quot;</span>, endDate.<span class="property">year</span> + <span class="string">&quot;-&quot;</span> + endDate.<span class="property">month</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ele.<span class="title function_">attr</span>(<span class="string">&quot;endDate&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setpage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  <span class="keyword">if</span> (height &lt; <span class="number">600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;60%&quot;</span>, <span class="string">&quot;70%&quot;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;60%&quot;</span>, <span class="string">&quot;84%&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setmin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  <span class="keyword">if</span> (height &lt; <span class="number">600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;600px&quot;</span>, <span class="string">&quot;70%&quot;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;600px&quot;</span>, <span class="string">&quot;84%&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setmin2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  <span class="keyword">if</span> (height &lt; <span class="number">600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;700px&quot;</span>, <span class="string">&quot;70%&quot;</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;700px&quot;</span>, <span class="string">&quot;84%&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validatenull</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val) === <span class="string">&quot;&#123;&#125;&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      val === <span class="string">&quot;null&quot;</span> ||</span><br><span class="line">      val === <span class="literal">null</span> ||</span><br><span class="line">      val === <span class="string">&quot;undefined&quot;</span> ||</span><br><span class="line">      val === <span class="literal">undefined</span> ||</span><br><span class="line">      val === <span class="string">&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//身份证</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cardIdVal</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> city = &#123;</span><br><span class="line">    <span class="number">11</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="number">12</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">    <span class="number">13</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">    <span class="number">14</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">    <span class="number">15</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">    <span class="number">21</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">    <span class="number">23</span>: <span class="string">&quot;黑龙江 &quot;</span>,</span><br><span class="line">    <span class="number">31</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">    <span class="number">32</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">    <span class="number">33</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">    <span class="number">34</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">    <span class="number">35</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">    <span class="number">36</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">    <span class="number">37</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">    <span class="number">41</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">    <span class="number">42</span>: <span class="string">&quot;湖北 &quot;</span>,</span><br><span class="line">    <span class="number">43</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">    <span class="number">44</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="number">45</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">    <span class="number">46</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">    <span class="number">50</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">    <span class="number">51</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">    <span class="number">52</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">    <span class="number">53</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">    <span class="number">54</span>: <span class="string">&quot;西藏 &quot;</span>,</span><br><span class="line">    <span class="number">61</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">    <span class="number">62</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">    <span class="number">63</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">    <span class="number">64</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">    <span class="number">65</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">    <span class="number">71</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">    <span class="number">81</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">    <span class="number">82</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">    <span class="number">91</span>: <span class="string">&quot;国外 &quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">validatenull</span>(value)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ffff&quot;</span>, value);</span><br><span class="line">    <span class="keyword">if</span> (value.<span class="property">length</span> === <span class="number">18</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value || !<span class="regexp">/(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        msg = <span class="string">&quot;证件号码格式错误&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!city[value.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>)]) &#123;</span><br><span class="line">        msg = <span class="string">&quot;地址编码错误&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 18位身份证需要验证最后一位校验位</span></span><br><span class="line">        value = value.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ∑(ai×Wi)(mod 11)</span></span><br><span class="line">        <span class="comment">// 加权因子</span></span><br><span class="line">        <span class="keyword">const</span> factor = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 校验位</span></span><br><span class="line">        <span class="keyword">const</span> parity = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;X&quot;</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;x&quot;</span>];</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> ai = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> wi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">          ai = value[i];</span><br><span class="line">          wi = factor[i];</span><br><span class="line">          sum += ai * wi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> last = parity[sum % <span class="number">11</span>];</span><br><span class="line">        <span class="keyword">if</span> (parity[sum % <span class="number">11</span>] !== value[<span class="number">17</span>]) &#123;</span><br><span class="line">          msg = <span class="string">&quot;证件号码校验位错误&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      msg = <span class="string">&quot;证件号码长度不为18位&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    msg = <span class="string">&quot;证件号码不能为空&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// list.push(result);</span></span><br><span class="line">  <span class="comment">// list.push(msg);</span></span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取最近7天</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSeventh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> days = [];</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">144</span>; i += <span class="number">24</span>) &#123;</span><br><span class="line">    <span class="comment">//144是前六天的小时数</span></span><br><span class="line">    <span class="keyword">let</span> dateItem = <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getTime</span>() - i * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">//使用当天时间戳减去以前的时间毫秒（小时*分*秒*毫秒）</span></span><br><span class="line">    <span class="keyword">let</span> y = dateItem.<span class="title function_">getFullYear</span>(); <span class="comment">//获取年份</span></span><br><span class="line">    <span class="keyword">let</span> m = dateItem.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">//获取月份js月份从0开始，需要+1</span></span><br><span class="line">    <span class="keyword">let</span> d = dateItem.<span class="title function_">getDate</span>(); <span class="comment">//获取日期</span></span><br><span class="line">    m = <span class="title function_">addDate0</span>(m); <span class="comment">//给为单数的月份补零</span></span><br><span class="line">    d = <span class="title function_">addDate0</span>(d); <span class="comment">//给为单数的日期补零</span></span><br><span class="line">    <span class="keyword">let</span> valueItem = y + <span class="string">&quot;-&quot;</span> + m + <span class="string">&quot;-&quot;</span> + d; <span class="comment">//组合</span></span><br><span class="line">    days.<span class="title function_">push</span>(valueItem); <span class="comment">//添加至数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最近七天日期：&quot;</span>, days);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给日期加0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addDate0</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (time.<span class="title function_">toString</span>().<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    time = <span class="string">&quot;0&quot;</span> + time.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 近3个月</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLast3Month</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">//0-11表示1-12月</span></span><br><span class="line">  <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> dateObj = &#123;&#125;;</span><br><span class="line">  dateObj.<span class="property">now</span> = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">  <span class="keyword">var</span> nowMonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, <span class="number">0</span>).<span class="title function_">getDate</span>(); <span class="comment">//当前月的总天数</span></span><br><span class="line">  <span class="keyword">if</span> (month - <span class="number">3</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是1、2、3月，年数往前推一年</span></span><br><span class="line">    <span class="keyword">var</span> last3MonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">      year - <span class="number">1</span>,</span><br><span class="line">      <span class="number">12</span> - (<span class="number">3</span> - <span class="built_in">parseInt</span>(month)),</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    ).<span class="title function_">getDate</span>(); <span class="comment">//3个月前所在月的总天数</span></span><br><span class="line">    <span class="keyword">if</span> (last3MonthDay &lt; day) &#123;</span><br><span class="line">      <span class="comment">//3个月前所在月的总天数小于现在的天日期</span></span><br><span class="line">      dateObj.<span class="property">last</span> = year - <span class="number">1</span> + <span class="string">&quot;-&quot;</span> + (<span class="number">12</span> - (<span class="number">3</span> - month)) + <span class="string">&quot;-&quot;</span> + last3MonthDay;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dateObj.<span class="property">last</span> = year - <span class="number">1</span> + <span class="string">&quot;-&quot;</span> + (<span class="number">12</span> - (<span class="number">3</span> - month)) + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> last3MonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(year, <span class="built_in">parseInt</span>(month) - <span class="number">3</span>, <span class="number">0</span>).<span class="title function_">getDate</span>(); <span class="comment">//3个月前所在月的总天数</span></span><br><span class="line">    <span class="keyword">if</span> (last3MonthDay &lt; day) &#123;</span><br><span class="line">      <span class="comment">//3个月前所在月的总天数小于现在的天日期</span></span><br><span class="line">      <span class="keyword">if</span> (day &lt; nowMonthDay) &#123;</span><br><span class="line">        <span class="comment">//当前天日期小于当前月总天数,2月份比较特殊的月份</span></span><br><span class="line">        dateObj.<span class="property">last</span> =</span><br><span class="line">          year +</span><br><span class="line">          <span class="string">&quot;-&quot;</span> +</span><br><span class="line">          (month - <span class="number">3</span>) +</span><br><span class="line">          <span class="string">&quot;-&quot;</span> +</span><br><span class="line">          (last3MonthDay - (nowMonthDay - day));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dateObj.<span class="property">last</span> = year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">3</span>) + <span class="string">&quot;-&quot;</span> + last3MonthDay;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dateObj.<span class="property">last</span> = year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">3</span>) + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dateObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 近一个月</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastMonth</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">//0-11表示1-12月</span></span><br><span class="line">  <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> dateObj = &#123;&#125;;</span><br><span class="line">  dateObj.<span class="property">now</span> = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">  <span class="keyword">var</span> nowMonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, <span class="number">0</span>).<span class="title function_">getDate</span>(); <span class="comment">//当前月的总天数</span></span><br><span class="line">  <span class="keyword">if</span> (month - <span class="number">1</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是1月，年数往前推一年&lt;br&gt;</span></span><br><span class="line">    dateObj.<span class="property">last</span> = year - <span class="number">1</span> + <span class="string">&quot;-&quot;</span> + <span class="number">12</span> + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastMonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(year, <span class="built_in">parseInt</span>(month) - <span class="number">1</span>, <span class="number">0</span>).<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">if</span> (lastMonthDay &lt; day) &#123;</span><br><span class="line">      <span class="comment">//1个月前所在月的总天数小于现在的天日期</span></span><br><span class="line">      <span class="keyword">if</span> (day &lt; nowMonthDay) &#123;</span><br><span class="line">        <span class="comment">//当前天日期小于当前月总天数</span></span><br><span class="line">        dateObj.<span class="property">last</span> =</span><br><span class="line">          year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + (lastMonthDay - (nowMonthDay - day));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dateObj.<span class="property">last</span> = year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + lastMonthDay;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dateObj.<span class="property">last</span> = year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dateObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 近一周</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLastWeek</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>; <span class="comment">//0-11表示1-12月</span></span><br><span class="line">  <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">var</span> dateObj = &#123;&#125;;</span><br><span class="line">  dateObj.<span class="property">now</span> = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">  <span class="keyword">if</span> (day - <span class="number">7</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果在当月7日之前</span></span><br><span class="line">    <span class="keyword">var</span> lastMonthDay = <span class="keyword">new</span> <span class="title class_">Date</span>(year, <span class="built_in">parseInt</span>(month) - <span class="number">1</span>, <span class="number">0</span>).<span class="title function_">getDate</span>(); <span class="comment">//1周前所在月的总天数</span></span><br><span class="line">    <span class="keyword">if</span> (month - <span class="number">1</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//如果在当年的1月份</span></span><br><span class="line">      dateObj.<span class="property">last</span> = year - <span class="number">1</span> + <span class="string">&quot;-&quot;</span> + <span class="number">12</span> + <span class="string">&quot;-&quot;</span> + (<span class="number">31</span> - (<span class="number">7</span> - day));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dateObj.<span class="property">last</span> =</span><br><span class="line">        year + <span class="string">&quot;-&quot;</span> + (month - <span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + (lastMonthDay - (<span class="number">7</span> - day));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dateObj.<span class="property">last</span> = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + (day - <span class="number">7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dateObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取语言</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookieValue</span>(<span class="params">cookieName</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = cookieName + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> decodedCookie = <span class="built_in">decodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line">  <span class="keyword">var</span> cookieArray = decodedCookie.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookieArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cookie = cookieArray[i].<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cookie.<span class="title function_">indexOf</span>(name) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cookie.<span class="title function_">substring</span>(name.<span class="property">length</span>, cookie.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式转化</span></span><br><span class="line"><span class="comment"> * &#123;name: &#x27;zs&#x27;, age: 18&#125; =&gt; name=zs&amp;age=18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params 参数对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringify</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(params)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> key + <span class="string">&quot;=&quot;</span> + params[key])</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">allExport</span>(<span class="params">params, url, fileName, setter</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> exportParams = <span class="title function_">stringify</span>(params);</span><br><span class="line">  <span class="comment">// console.log(&#x27;导出参数&#x27;, exportParams)</span></span><br><span class="line">  <span class="comment">// // 1. 创建 xhr 对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, setter.<span class="property">serverUrl</span> + url + <span class="string">&quot;?&quot;</span> + exportParams, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 3. 设置 Content-Type 属性（固定写法）</span></span><br><span class="line">  <span class="comment">// Content-Type: multipart/form-data;</span></span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>,</span><br><span class="line">    <span class="string">&quot;application/vnd.ms-excel;charset=UTF-8&quot;</span></span><br><span class="line">  );</span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(</span><br><span class="line">    <span class="string">&quot;X-Auth-Token&quot;</span>,</span><br><span class="line">    layui.<span class="title function_">data</span>(setter.<span class="property">tableName</span>)[setter.<span class="property">request</span>.<span class="property">tokenName</span>]</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//4. 定义responseType=&#x27;blob&#x27;, 是读取文件成功的关键，这样设置可以解决下载文件乱码的问题</span></span><br><span class="line">  xhr.<span class="property">responseType</span> = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>, xhr.<span class="property">status</span>);</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// var responseText = xhr.responseText; 不能使用这个获取结果</span></span><br><span class="line">      <span class="comment">//返回二进制数据流</span></span><br><span class="line">      <span class="comment">// console.log(responseText);</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;成功了吗&#x27;, xhr)</span></span><br><span class="line">      <span class="comment">// console.log(xhr.response)</span></span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([xhr.<span class="property">response</span>], &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;application/vnd.ms-excel;charset=UTF-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> blobUrl = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">      <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      a.<span class="property">download</span> = fileName;</span><br><span class="line">      a.<span class="property">href</span> = blobUrl;</span><br><span class="line">      a.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 4. 调用 send 函数发送携带的数据</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>与ChatGPT交流并搭建私人GPT</title>
    <url>/post/41570.html</url>
    <content><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p><a href="https://github.com/Yidadaa/ChatGPT-Next-Web">https://github.com/Yidadaa/ChatGPT-Next-Web</a> 这个别人的项目，下拉有个 Deploy 点击进入，传入 OPENAI_API_KEY 的值和 CODE 的值 一个是 chatgpt 的 key(tb 买一个)和密码</p>
<p>等一段时间 Congratulations! 然后点继续</p>
<p><a href="https://vercel.com/luckynwa6/chat-gpt-next-web">https://vercel.com/luckynwa6/chat-gpt-next-web</a></p>
<p>去配置 2 级域名 Settings —Domains—-Add—–chat.luckynwa.top</p>
<p>去 vercel 里的 Settings —-Environment 里修改 key 值和密码，提问的时候要是密码错误，刷新机器人</p>
<p><a href="https://console.dnspod.cn/dns/luckynwa.top/record%E9%87%8C%E8%AE%BE%E7%BD%AE2%E7%BA%A7%E5%9F%9F%E5%90%8D">https://console.dnspod.cn/dns/luckynwa.top/record里设置2级域名</a></p>
<p><a href="https://chat.luckynwa.top/#/">https://chat.luckynwa.top/#/</a> 域名访问</p>
<h1 id="AI-绘画"><a href="#AI-绘画" class="headerlink" title="AI 绘画"></a>AI 绘画</h1><p>1、环境</p>
<p>python-3.10.6-amd64.exe 安装记得全局 path 勾选，其他默认即可</p>
<p>cmd python -V 查看版本</p>
<p>cmd 输入 nvidia-smi 查看 cuda 的版本 12.1</p>
<p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a> cuda 官网</p>
<p>选 local 安装</p>
<p><a href="https://space.bilibili.com/12566101/video">https://space.bilibili.com/12566101/video</a></p>
<p>下载 stable diffusion 整合包</p>
<p>2、</p>
<p>训练模型的位置 D:\bgsoft\sd-webui-aki\sd-webui-aki-v4\models\Stable-diffusion</p>
<p>3、结合 chatGPT</p>
<p>将我给你说的一段话转换为 AI 绘画关键字。请转化下面这段话并且中英文双语回答我：这个美女在一间安静的图书馆里，她坐在一张舒适的椅子上，身穿清新简洁的白色衬衫，秀发轻轻地梳了一下，留在肩膀上，散发着淡淡的香气。她深深地沉浸在一本书中，眉头微皱，似乎在思考着书中所阐述的概念，不时翻动书页，倾听着心中的声音。周围的环境十分安静，只有书页翻动的声音以及微弱的呼吸声，显得更加静谧而优雅。整个场景充满了一种优雅、安静、充满知识氛围的感觉，让人心生向往。</p>
<p>ai:英文关键词：Quiet Library, Comfortable Chair, White Shirt, Gentle Scent, Immersed in Book, Concept, Quietness, Elegance, Knowledge Atmosphere, Wistfulness.</p>
<p>中文关键词：安静的图书馆，舒适的椅子，白色衬衫，淡淡的香气，沉浸在书中，概念，宁静，优雅，知识氛围，向往之感。</p>
<p>如何写提示词？</p>
<p>内容提示词：人物及主题特征 穿衣颜色 发色 面部 五官 肢体动作 室内、外 小细节 白天黑夜 特定时段 光环境 天空 距离 人物比例 观察视角 镜头类型</p>
<p>标准化提示词：通用高画质、特定分辨率、插画风、二次元、写实系</p>
<p>给提示词加()、{}来提高权重 削弱[]</p>
<p>补充：painting,illustration,anime,game cg</p>
<p>通用高画质：best quality,ultra detailed,masterpiece,8k</p>
<p>特定超高分辨率类型 ：unreal engine rendered,extremely detailed CG unity 8k wallpaper,</p>
<p>下面是反面</p>
<p>NSFW, (worst quality2), low quality2),(normal quality,2) lowres, normal quality,([grayscale)l,skin spots, acnes, skin blemishes, age spot,(ugly.1.331),(duplicate1.331) (morbid:1.21),(mutlated:1.21),(tranny,1.331), mutated hands,(poorly drawn hands:1.5), blurry,(bad anatomy.1.21),(bad proportions:1.331, extra limbs,(disigured1.331,(missing arms:1.331),(extra legs:1.31,(fused fingers;1.61051),(too many fingers:1.61051),(unclear eyes:1.331), lowers, bad hands, missing fingers, extra digit,bad hands, missing fingers,(lextra arms and legs)</p>
<p>案例 1</p>
<p>Realistic Beauty Girl: A realistic depiction of a beautiful young girl, with long blonde hair, a smallgolden hairband, blue eyes, a royal sister-like look, a cold face, and a white shirt. Her portrait isdetailed and intricate, with 8K wallpapers, gorgeous girls, and a stunning upper body. She has acold expression and is looking at the viewer, wearing school uniform, sailor suit, and crazy whitehair. She has red eyes, detailed double eyes with a black crosshair, handsome, glowing, andtheatrical angle.Her 8K wallpaper is detailed, with a girl with red eyes, white hair, a ponytail, longhair, light pink inner hair, white windbreaker, inner blue clothes, studio photography, masterpiece,movie highlight hair, and exquisite hands. Her exterior features include nipples, small chest, flatchest, highest quality, very detailed, masterpiece,ultra-details, illustration, extremely delicate andbeautiful loli, very detailed eyes and face, detailed eye details, masterpiece, best illustration, aquablue eyes, bright eyes, movie lights, extremely delicate and beautiful loli, gradient eyes, white hair,red eyes, and twelve-year-old loli,(best quality},,{highres} ,original,extremely detailed wallpaper,1girl,{an extremely delicate and beautifull}</p>
<p>Lowres, bad anatomy, bad hands, text, error,missing fingers, extra digit,fewerdigits, cropped, worst quality,low quality,normal quality,jpeg artifacts,signature, watermark, username, blurry,missing arms,long neck, Humpbacked</p>
<p>使用二次元风格模型：illustration,painting, sketch, drawing, painting, comic, anime, catoon</p>
<p>真实：photography, photo, realistic, photorealistic,RAW photo</p>
<p>2.5d:3D, render,chibi, digital art, concept art, {realistic}</p>
<h1 id="chatGPT-代码提问"><a href="#chatGPT-代码提问" class="headerlink" title="chatGPT 代码提问"></a>chatGPT 代码提问</h1><p>登录的描述： element-ui 登录页面 代码 包含验证码 界面好看</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>X6学习笔记总结</title>
    <url>/post/14383.html</url>
    <content><![CDATA[<p>使用 AntV X6 版本 2.x，下面官网地址</p>
<p><a href="https://x6.antv.antgroup.com/tutorial/intermediate/vue">Vue 节点 | X6 (antgroup.com)</a></p>
<p>path 路径节点，通过 svg 的 d 值来显示 svg</p>
<p><a href="http://svg.wxeditor.com/">svg 在线编辑器_svg 矢量图在线制作工具-易点在线矢量图形编辑器 (wxeditor.com)</a></p>
<p><a href="https://x6.antv.antgroup.com/examples/showcase/practices/#flowchart">使用场景 | X6 (antgroup.com)</a></p>
<p>拖动一个图标去看它的源码里,复制 d 里面的值，放入 path 节点里的 path 属性值里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;path id=&quot;svg_1&quot; d=&quot;m199.50248,160.86426l0.19807,-0.63855l0.80193,-0.28418l0.80193,0.28418l0.19807,0.63855l-0.55497,0.51208l-0.89007,0l-0.55497,-0.51208z&quot; stroke-width=&quot;1.5&quot; stroke=&quot;#000&quot; fill=&quot;#fff&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="path-节点"><a href="#path-节点" class="headerlink" title="path 节点"></a>path 节点</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: &quot;node3&quot;,</span><br><span class="line">  shape: &quot;path&quot;,</span><br><span class="line">  x: 180,</span><br><span class="line">  y: 150,</span><br><span class="line">  width: 40,</span><br><span class="line">  height: 40,</span><br><span class="line">  label: &quot;svg图&quot;,</span><br><span class="line">  path: &quot;m193,160.31151l22.53615,0l6.96384,-19.86229l6.96385,19.86229l22.53615,0l-18.2321,12.27543l6.96421,19.86229l-18.23211,-12.27576l-18.2321,12.27576l6.96421,-19.86229l-18.2321,-12.27543&quot;,</span><br><span class="line">  attrs: &#123;</span><br><span class="line">    body: &#123;</span><br><span class="line">      fill: &quot;#efdbff&quot;,</span><br><span class="line">      stroke: &quot;#9254de&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><h2 id="引入的插件"><a href="#引入的插件" class="headerlink" title="引入的插件"></a>引入的插件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Graph</span>, <span class="title class_">Shape</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6&#x27;</span> <span class="comment">// 导入 @antv/x6 库中的 Graph 和 Shape 类</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Stencil</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-stencil&#x27;</span> <span class="comment">// 导入拖拽式元素选择插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Transform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-transform&#x27;</span> <span class="comment">// 导入变换操作插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-selection&#x27;</span> <span class="comment">// 导入选元素插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Snapline</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-snapline&#x27;</span> <span class="comment">// 导入图形对齐插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Keyboard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-keyboard&#x27;</span> <span class="comment">// 导入键盘事件处理插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Clipboard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-clipboard&#x27;</span> <span class="comment">// 导入复制和粘贴图形元素插件</span></span><br><span class="line"><span class="keyword">import</span> insertCss <span class="keyword">from</span> <span class="string">&#x27;insert-css&#x27;</span> <span class="comment">// 导入动态插入 CSS 函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">History</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/x6-plugin-history&#x27;</span> <span class="comment">// 导入图形编辑历史记录插件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第-1-步，绘制画布"><a href="#第-1-步，绘制画布" class="headerlink" title="第 1 步，绘制画布"></a>第 1 步，绘制画布</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initGraph</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个 Graph 实例，参数是一个配置对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span> = <span class="keyword">new</span> <span class="title class_">Graph</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>), <span class="comment">// 画布容器</span></span><br><span class="line">    <span class="attr">background</span>: <span class="literal">false</span>, <span class="comment">// 背景（透明）</span></span><br><span class="line">    <span class="attr">autoResize</span>: <span class="literal">true</span>, <span class="comment">//自动更新大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 网格配置</span></span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;mesh&#x27;</span>, <span class="comment">// 网格类型为网点（点阵）形式</span></span><br><span class="line">      <span class="attr">size</span>: <span class="number">10</span>, <span class="comment">// 网格大小 10px</span></span><br><span class="line">      <span class="attr">visible</span>: <span class="literal">true</span>, <span class="comment">// 渲染网格背景</span></span><br><span class="line">      <span class="attr">args</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#eeeeee&#x27;</span>, <span class="comment">// 网格线/点颜色</span></span><br><span class="line">        <span class="attr">thickness</span>: <span class="number">2</span>, <span class="comment">// 网格线宽度/网格点大小</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">mousewheel</span>: &#123;</span><br><span class="line">      <span class="attr">enabled</span>: <span class="literal">true</span>, <span class="comment">// 启用鼠标滚轮缩放功能</span></span><br><span class="line">      <span class="attr">zoomAtMousePosition</span>: <span class="literal">true</span>, <span class="comment">// 缩放中心点在鼠标位置</span></span><br><span class="line">      <span class="attr">modifiers</span>: <span class="string">&#x27;ctrl&#x27;</span>, <span class="comment">// 按住 Ctrl 键进行缩放</span></span><br><span class="line">      <span class="attr">minScale</span>: <span class="number">0.5</span>, <span class="comment">// 最小缩放比例</span></span><br><span class="line">      <span class="attr">maxScale</span>: <span class="number">3</span>, <span class="comment">// 最大缩放比例</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">panning</span>: &#123;</span><br><span class="line">      <span class="attr">enabled</span>: <span class="literal">true</span>, <span class="comment">// 允许平移功能</span></span><br><span class="line">      <span class="attr">modifiers</span>: <span class="string">&#x27;alt&#x27;</span>, <span class="comment">// 按住 Alt 键进行平移</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置连线规则</span></span><br><span class="line">    <span class="attr">connecting</span>: &#123;</span><br><span class="line">      <span class="attr">router</span>: <span class="string">&#x27;manhattan&#x27;</span>, <span class="comment">// 连线的默认路由器为曼哈顿算法</span></span><br><span class="line">      <span class="attr">connector</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;rounded&#x27;</span>, <span class="comment">// 连接器形状为圆角</span></span><br><span class="line">        <span class="attr">args</span>: &#123;</span><br><span class="line">          <span class="attr">radius</span>: <span class="number">8</span>, <span class="comment">// 圆角半径</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">anchor</span>: <span class="string">&#x27;center&#x27;</span>, <span class="comment">// 连线默认锚点为中心点</span></span><br><span class="line">      <span class="attr">connectionPoint</span>: <span class="string">&#x27;anchor&#x27;</span>, <span class="comment">// 连线默认连接点为锚点</span></span><br><span class="line">      <span class="attr">allowBlank</span>: <span class="literal">false</span>, <span class="comment">// 不允许空连接</span></span><br><span class="line">      <span class="attr">snap</span>: &#123;</span><br><span class="line">        <span class="attr">radius</span>: <span class="number">20</span>, <span class="comment">// 连接吸附的半径范围</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">createEdge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 创建连线时返回一个新的 Edge 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Shape</span>.<span class="title class_">Edge</span>(&#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">line</span>: &#123;</span><br><span class="line">              <span class="attr">stroke</span>: <span class="string">&#x27;#A2B1C3&#x27;</span>, <span class="comment">// 连线颜色</span></span><br><span class="line">              <span class="attr">strokeWidth</span>: <span class="number">2</span>, <span class="comment">// 连线宽度</span></span><br><span class="line">              <span class="attr">targetMarker</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;block&#x27;</span>, <span class="comment">// 目标箭头形状为方块</span></span><br><span class="line">                <span class="attr">width</span>: <span class="number">12</span>, <span class="comment">// 箭头宽度</span></span><br><span class="line">                <span class="attr">height</span>: <span class="number">8</span>, <span class="comment">// 箭头高度</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">zIndex</span>: <span class="number">0</span>, <span class="comment">// 层级设置为 0</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">validateConnection</span>(<span class="params">&#123; targetMagnet &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">// 验证连接是否有效，目标连接点必须存在</span></span><br><span class="line">        <span class="keyword">return</span> !!targetMagnet;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">highlighting</span>: &#123;</span><br><span class="line">      <span class="attr">magnetAdsorbed</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;stroke&#x27;</span>, <span class="comment">// 线条描边样式为高亮</span></span><br><span class="line">        <span class="attr">args</span>: &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;#5F95FF&#x27;</span>, <span class="comment">// 线条填充颜色</span></span><br><span class="line">            <span class="attr">stroke</span>: <span class="string">&#x27;#5F95FF&#x27;</span>, <span class="comment">// 线条描边颜色</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用插件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span></span><br><span class="line">    .<span class="title function_">use</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Transform</span>(&#123;</span><br><span class="line">        <span class="comment">// 平移、缩放、旋转等变换操作</span></span><br><span class="line">        <span class="attr">resizing</span>: <span class="literal">true</span>, <span class="comment">// 允许调整大小</span></span><br><span class="line">        <span class="attr">rotating</span>: <span class="literal">true</span>, <span class="comment">// 允许旋转</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">use</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Selection</span>(&#123;</span><br><span class="line">        <span class="comment">// 选择和操纵图形。提供了选择区域、单选等功能</span></span><br><span class="line">        <span class="attr">rubberband</span>: <span class="literal">true</span>, <span class="comment">// 启用选择框</span></span><br><span class="line">        <span class="attr">showNodeSelectionBox</span>: <span class="literal">true</span>, <span class="comment">// 显示节点的选择框</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">Snapline</span>()) <span class="comment">// 可用于对齐图形元素</span></span><br><span class="line">    .<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">Keyboard</span>()) <span class="comment">// 允许通过键盘快捷键来控制图形编辑</span></span><br><span class="line">    .<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">Clipboard</span>()) <span class="comment">// 提供了对图形的复制和粘贴操作</span></span><br><span class="line">    .<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">History</span>()); <span class="comment">// 历史记录撤销使用</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">centerContent</span>(); <span class="comment">// 画布内容居中显示</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第-2-步，初始化连接桩"><a href="#第-2-步，初始化连接桩" class="headerlink" title="第 2 步，初始化连接桩"></a>第 2 步，初始化连接桩</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化默认连接桩</span></span><br><span class="line"><span class="title function_">initPorts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ports</span> = &#123;</span><br><span class="line">    <span class="attr">groups</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: &#123;</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">circle</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">magnet</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">stroke</span>: <span class="string">&#x27;#5F95FF&#x27;</span>,</span><br><span class="line">            <span class="attr">strokeWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">              <span class="attr">visibility</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">right</span>: &#123;</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">circle</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">magnet</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">stroke</span>: <span class="string">&#x27;#5F95FF&#x27;</span>,</span><br><span class="line">            <span class="attr">strokeWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">              <span class="attr">visibility</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">bottom</span>: &#123;</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">circle</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">magnet</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">stroke</span>: <span class="string">&#x27;#5F95FF&#x27;</span>,</span><br><span class="line">            <span class="attr">strokeWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">              <span class="attr">visibility</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">left</span>: &#123;</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">circle</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">magnet</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">stroke</span>: <span class="string">&#x27;#5F95FF&#x27;</span>,</span><br><span class="line">            <span class="attr">strokeWidth</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">              <span class="attr">visibility</span>: <span class="string">&#x27;hidden&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">group</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">group</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">group</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">group</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="第-3-步，注册自定义节点"><a href="#第-3-步，注册自定义节点" class="headerlink" title="第 3 步，注册自定义节点"></a>第 3 步，注册自定义节点</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">enrollNode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注册自定义模板节点 &#x27;custom-image&#x27;</span></span><br><span class="line">  <span class="title class_">Graph</span>.<span class="title function_">registerNode</span>(</span><br><span class="line">    <span class="string">&#x27;custom-image&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">62</span>, <span class="comment">// 节点宽度</span></span><br><span class="line">      <span class="attr">height</span>: <span class="number">62</span>, <span class="comment">// 节点高度</span></span><br><span class="line">      <span class="attr">markup</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tagName</span>: <span class="string">&#x27;rect&#x27;</span>,</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&#x27;body&#x27;</span>, <span class="comment">// 节点外部矩形</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tagName</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tagName</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&#x27;label&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">body</span>: &#123;</span><br><span class="line">          <span class="attr">stroke</span>: <span class="string">&#x27;green&#x27;</span>, <span class="comment">// 外部矩形边框颜色</span></span><br><span class="line">          <span class="attr">fill</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="comment">// 外部矩形填充颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">image</span>: &#123;</span><br><span class="line">          <span class="attr">refWidth</span>: <span class="string">&#x27;100%&#x27;</span>, <span class="comment">// 图片宽度和节点宽度一致</span></span><br><span class="line">          <span class="attr">refHeight</span>: <span class="string">&#x27;100%&#x27;</span>, <span class="comment">// 图片高度和节点高度一致</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">refX</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="attr">refY</span>: <span class="number">82</span>,</span><br><span class="line">          <span class="attr">textAnchor</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          <span class="attr">textVerticalAnchor</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">fill</span>: <span class="string">&#x27;#fff&#x27;</span>, <span class="comment">// 文字颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">ports</span>: &#123; ...<span class="variable language_">this</span>.<span class="property">ports</span> &#125;, <span class="comment">// 节点的连接点配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span> <span class="comment">// 是否强制覆盖同名节点类型</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>第四步， 初始化侧边栏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initStencil</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个 Stencil 实例</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">stencil</span> = <span class="keyword">new</span> <span class="title class_">Stencil</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;接线图&#x27;</span>, <span class="comment">// Stencil 标题</span></span><br><span class="line">    <span class="attr">target</span>: <span class="variable language_">this</span>.<span class="property">graph</span>, <span class="comment">// 目标 Graph 实例</span></span><br><span class="line">    <span class="attr">stencilGraphWidth</span>: <span class="number">200</span>, <span class="comment">// Stencil 绘图区宽度</span></span><br><span class="line">    <span class="attr">stencilGraphHeight</span>: <span class="number">0</span>, <span class="comment">// Stencil 绘图区高度（0 表示自适应高度）</span></span><br><span class="line">    <span class="attr">collapsable</span>: <span class="literal">true</span>, <span class="comment">// 是否可折叠</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">groups</span>: [</span><br><span class="line">      <span class="comment">// 定义分组</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   title: &quot;基础流程图&quot;,</span></span><br><span class="line">      <span class="comment">//   name: &quot;group1&quot;,</span></span><br><span class="line">      <span class="comment">//   graphHeight: 50,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// 系统设计图分组</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;系统设计图&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;group2&#x27;</span>,</span><br><span class="line">        <span class="attr">graphHeight</span>: <span class="number">0</span>, <span class="comment">// 分组内部绘图区高度（0 表示自适应高度）</span></span><br><span class="line">        <span class="attr">layoutOptions</span>: &#123;</span><br><span class="line">          <span class="attr">rowHeight</span>: <span class="number">70</span>, <span class="comment">// 分组内部行高</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">layoutOptions</span>: &#123;</span><br><span class="line">      <span class="attr">columns</span>: <span class="number">2</span>, <span class="comment">// 列数</span></span><br><span class="line">      <span class="attr">columnWidth</span>: <span class="number">80</span>, <span class="comment">// 列宽度</span></span><br><span class="line">      <span class="attr">rowHeight</span>: <span class="number">55</span>, <span class="comment">// 行高度</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 Stencil 实例的容器添加到指定的 DOM 元素中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;stencil&#x27;</span>).<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">stencil</span>.<span class="property">container</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入样式</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">insertCss</span>();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第-4-步，绘制左侧栏"><a href="#第-4-步，绘制左侧栏" class="headerlink" title="第 4 步，绘制左侧栏"></a>第 4 步，绘制左侧栏</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initStencil</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个 Stencil 实例</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">stencil</span> = <span class="keyword">new</span> <span class="title class_">Stencil</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;接线图&#x27;</span>, <span class="comment">// Stencil 标题</span></span><br><span class="line">    <span class="attr">target</span>: <span class="variable language_">this</span>.<span class="property">graph</span>, <span class="comment">// 目标 Graph 实例</span></span><br><span class="line">    <span class="attr">stencilGraphWidth</span>: <span class="number">200</span>, <span class="comment">// Stencil 绘图区宽度</span></span><br><span class="line">    <span class="attr">stencilGraphHeight</span>: <span class="number">0</span>, <span class="comment">// Stencil 绘图区高度（0 表示自适应高度）</span></span><br><span class="line">    <span class="attr">collapsable</span>: <span class="literal">true</span>, <span class="comment">// 是否可折叠</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">groups</span>: [</span><br><span class="line">      <span class="comment">// 定义分组</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   title: &quot;基础流程图&quot;,</span></span><br><span class="line">      <span class="comment">//   name: &quot;group1&quot;,</span></span><br><span class="line">      <span class="comment">//   graphHeight: 50,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="comment">// 系统设计图分组</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;系统设计图&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;group2&#x27;</span>,</span><br><span class="line">        <span class="attr">graphHeight</span>: <span class="number">0</span>, <span class="comment">// 分组内部绘图区高度（0 表示自适应高度）</span></span><br><span class="line">        <span class="attr">layoutOptions</span>: &#123;</span><br><span class="line">          <span class="attr">rowHeight</span>: <span class="number">70</span>, <span class="comment">// 分组内部行高</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">layoutOptions</span>: &#123;</span><br><span class="line">      <span class="attr">columns</span>: <span class="number">2</span>, <span class="comment">// 列数</span></span><br><span class="line">      <span class="attr">columnWidth</span>: <span class="number">80</span>, <span class="comment">// 列宽度</span></span><br><span class="line">      <span class="attr">rowHeight</span>: <span class="number">55</span>, <span class="comment">// 行高度</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 Stencil 实例的容器添加到指定的 DOM 元素中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;stencil&#x27;</span>).<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">stencil</span>.<span class="property">container</span>);</span><br><span class="line">  <span class="comment">// 插入样式,修改了左侧栏底色</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">insertCss</span>();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第-5-步，添加监听事件"><a href="#第-5-步，添加监听事件" class="headerlink" title="第 5 步，添加监听事件"></a>第 5 步，添加监听事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 当鼠标进入节点时，显示连接点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">on</span>(<span class="string">&#x27;node:mouseenter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;graph-container&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> ports = container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.x6-port-body&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showPorts</span>(ports, <span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当鼠标离开节点时，隐藏连接点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">on</span>(<span class="string">&#x27;node:mouseleave&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;graph-container&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> ports = container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.x6-port-body&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showPorts</span>(ports, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点点击事件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">on</span>(<span class="string">&#x27;cell:click&#x27;</span>, <span class="function">(<span class="params">&#123; cell &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 清除之前选中节点的样式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curCel</span> ? <span class="variable language_">this</span>.<span class="property">curCel</span>.<span class="title function_">attr</span>(<span class="string">&#x27;body/stroke&#x27;</span>, <span class="literal">null</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curCel</span> ? <span class="variable language_">this</span>.<span class="property">curCel</span>.<span class="title function_">attr</span>(<span class="string">&#x27;line/stroke&#x27;</span>, <span class="string">&#x27;#c0c0c0&#x27;</span>) : <span class="string">&#x27;#c0c0c0&#x27;</span>;</span><br><span class="line">    <span class="comment">// 设置当前选中节点的样式为红色</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curCel</span> = cell;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curCel</span>.<span class="title function_">attr</span>(<span class="string">&#x27;body/stroke&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curCel</span>.<span class="title function_">attr</span>(<span class="string">&#x27;line/stroke&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取节点的文字标签（可能在text/text中，也可能在label/text中）</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">nodeName</span> = cell.<span class="title function_">getAttrs</span>()?.<span class="property">text</span>?.<span class="property">text</span></span><br><span class="line">      ? cell.<span class="title function_">getAttrs</span>()?.<span class="property">text</span>?.<span class="property">text</span></span><br><span class="line">      : cell.<span class="title function_">getAttrs</span>()?.<span class="property">label</span>?.<span class="property">text</span></span><br><span class="line">      ? cell.<span class="title function_">getAttrs</span>()?.<span class="property">label</span>?.<span class="property">text</span></span><br><span class="line">      : <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取节点的名称</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">Name</span> = cell.<span class="title function_">getAttrs</span>()?.<span class="property">data</span>?.<span class="property">Name</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快捷键与事件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+c&#x27;</span>, <span class="string">&#x27;ctrl+c&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 复制选中的单元格</span></span><br><span class="line">    <span class="keyword">const</span> cells = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">getSelectedCells</span>();</span><br><span class="line">    <span class="keyword">if</span> (cells.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">copy</span>(cells);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+x&#x27;</span>, <span class="string">&#x27;ctrl+x&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 剪切选中的单元格</span></span><br><span class="line">    <span class="keyword">const</span> cells = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">getSelectedCells</span>();</span><br><span class="line">    <span class="keyword">if</span> (cells.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">cut</span>(cells);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+v&#x27;</span>, <span class="string">&#x27;ctrl+v&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 粘贴剪贴板中的内容</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">isClipboardEmpty</span>()) &#123;</span><br><span class="line">      <span class="keyword">const</span> cells = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">paste</span>(&#123; <span class="attr">offset</span>: <span class="number">32</span> &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">cleanSelection</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">select</span>(cells);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>(<span class="string">&#x27;delete&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 删除选中的单元格</span></span><br><span class="line">    <span class="keyword">const</span> cells = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">getSelectedCells</span>();</span><br><span class="line">    <span class="keyword">if</span> (cells.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">removeCells</span>(cells);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;ctrl+1&#x27;</span>, <span class="string">&#x27;meta+1&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 放大画布</span></span><br><span class="line">    <span class="keyword">const</span> zoom = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">zoom</span>();</span><br><span class="line">    <span class="keyword">if</span> (zoom &lt; <span class="number">1.5</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">zoom</span>(<span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;ctrl+2&#x27;</span>, <span class="string">&#x27;meta+2&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 缩小画布</span></span><br><span class="line">    <span class="keyword">const</span> zoom = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">zoom</span>();</span><br><span class="line">    <span class="keyword">if</span> (zoom &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">zoom</span>(-<span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+z&#x27;</span>, <span class="string">&#x27;ctrl+z&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 撤销操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">canUndo</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">undo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+shift+z&#x27;</span>, <span class="string">&#x27;ctrl+shift+z&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 重做操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">canRedo</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">redo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">bindKey</span>([<span class="string">&#x27;meta+a&#x27;</span>, <span class="string">&#x27;ctrl+a&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 全选</span></span><br><span class="line">    <span class="keyword">const</span> nodes = <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">getNodes</span>();</span><br><span class="line">    <span class="keyword">if</span> (nodes) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">select</span>(nodes);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第六步，加载数据"><a href="#第六步，加载数据" class="headerlink" title="第六步，加载数据"></a>第六步，加载数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.$http(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornUrl</span>(<span class="string">&#x27;/topoImg/loader/queryImgList&#x27;</span>),</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornData</span>(&#123;&#125;),</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; data.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">imgList</span> = data.<span class="property">list</span></span><br><span class="line">          <span class="keyword">const</span> encounteredKeys = &#123;&#125;</span><br><span class="line">          <span class="comment">//相同名称的设备只取其一</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="variable language_">this</span>.<span class="property">imgList</span>.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">imgList</span>[index]</span><br><span class="line">            <span class="keyword">if</span> (!encounteredKeys[item.<span class="property">imgKey</span>]) &#123;</span><br><span class="line">              encounteredKeys[item.<span class="property">imgKey</span>] = <span class="literal">true</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">imageNodes</span>.<span class="title function_">push</span>(</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">createNode</span>(&#123;  <span class="comment">//调用自定义节点</span></span><br><span class="line">                  <span class="attr">shape</span>: <span class="string">&#x27;custom-image&#x27;</span>,</span><br><span class="line">                  <span class="attr">label</span>: item.<span class="property">imgKey</span>,</span><br><span class="line">                  <span class="attr">attrs</span>: &#123;</span><br><span class="line">                    <span class="attr">data</span>: &#123;</span><br><span class="line">                      <span class="attr">deviceName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                      <span class="attr">filePositionOptions</span>: <span class="string">&#x27;下居中&#x27;</span>,</span><br><span class="line">                      <span class="attr">valueLamp</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">image</span>: &#123;</span><br><span class="line">                      <span class="string">&#x27;xlink:href&#x27;</span>: item.<span class="property">imgContent</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">                        ? <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornUrl</span>(<span class="string">&#x27;/&#x27;</span>) + item.<span class="property">imgContent</span></span><br><span class="line">                        : item.<span class="property">imgContent</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">imageNodes</span>.<span class="title function_">push</span>(</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">createNode</span>(&#123;</span><br><span class="line">              <span class="attr">shape</span>: <span class="string">&#x27;custom-text&#x27;</span>,</span><br><span class="line">              <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                  <span class="attr">deviceName</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                  <span class="attr">filePositionOptions</span>: <span class="string">&#x27;中居中&#x27;</span>,</span><br><span class="line">                  <span class="attr">valueLamp</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">image</span>: &#123;</span><br><span class="line">                  <span class="string">&#x27;xlink:href&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">          )</span><br><span class="line">          <span class="comment">// console.log(&quot;左侧的数据是&quot;, this.imageNodes);</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">stencil</span>.<span class="title function_">load</span>(<span class="variable language_">this</span>.<span class="property">imageNodes</span>, <span class="string">&#x27;group2&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">imgList</span> = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">load</span>(<span class="variable language_">this</span>.<span class="property">receiveId</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取画布数据</span></span><br><span class="line"> <span class="title function_">load</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.$http(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornUrl</span>(<span class="string">&#x27;/topo/loader/getInfo&#x27;</span>),</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornData</span>(&#123;</span><br><span class="line">          <span class="attr">id</span>: id,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; data.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.<span class="property">data</span>.<span class="property">x6json</span> === <span class="literal">undefined</span> || data.<span class="property">data</span>.<span class="property">x6json</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">graph</span>.<span class="title function_">fromJSON</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="property">data</span>.<span class="property">x6json</span>))</span><br><span class="line">          <span class="comment">// let topojson = data.data.topojson;</span></span><br><span class="line">          <span class="comment">// let x6json = data.data.x6json;</span></span><br><span class="line">          <span class="comment">// console.log(&quot;---------------------X--&quot;);</span></span><br><span class="line">          <span class="comment">// console.log(&quot;topojson值&quot;, JSON.parse(JSON.parse(topojson)));</span></span><br><span class="line">          <span class="comment">// console.log(&quot;-------------X----------&quot;);</span></span><br><span class="line">          <span class="comment">// console.log(&quot;x6json值&quot;, JSON.parse(x6json));</span></span><br><span class="line">          <span class="comment">//下面先遍历页面的图，然后再去遍历连接线</span></span><br><span class="line">          <span class="comment">// nodeS.nodeDataArray.map((item) =&gt; &#123;</span></span><br><span class="line">          <span class="comment">//   const [x, y] = item.loc.split(&quot; &quot;).map((value) =&gt; parseInt(value));</span></span><br><span class="line">          <span class="comment">//   // console.log(&quot;x和y的值是&quot;, x, y);</span></span><br><span class="line">          <span class="comment">//   this.graph.addNode(&#123;</span></span><br><span class="line">          <span class="comment">//     shape: &quot;custom-image&quot;,</span></span><br><span class="line">          <span class="comment">//     label: item.imgKey,</span></span><br><span class="line">          <span class="comment">//     id: item.key,</span></span><br><span class="line">          <span class="comment">//     x: x,</span></span><br><span class="line">          <span class="comment">//     y: y,</span></span><br><span class="line">          <span class="comment">//     width: item.width,</span></span><br><span class="line">          <span class="comment">//     height: item.height,</span></span><br><span class="line">          <span class="comment">//     data: &#123;</span></span><br><span class="line">          <span class="comment">//       size: item.size,</span></span><br><span class="line">          <span class="comment">//       loc: item.loc,</span></span><br><span class="line">          <span class="comment">//       imgKey: item.imgKey,</span></span><br><span class="line">          <span class="comment">//       valContent: item.valContent,</span></span><br><span class="line">          <span class="comment">//     &#125;,</span></span><br><span class="line">          <span class="comment">//     attrs: &#123;</span></span><br><span class="line">          <span class="comment">//       image: &#123;</span></span><br><span class="line">          <span class="comment">//         &quot;xlink:href&quot;: item.source.startsWith(&quot;img&quot;)</span></span><br><span class="line">          <span class="comment">//           ? this.$http.adornUrl(&quot;/&quot;) + item.source</span></span><br><span class="line">          <span class="comment">//           : item.source,</span></span><br><span class="line">          <span class="comment">//       &#125;,</span></span><br><span class="line">          <span class="comment">//     &#125;,</span></span><br><span class="line">          <span class="comment">//   &#125;);</span></span><br><span class="line">          <span class="comment">// &#125;);</span></span><br><span class="line">          <span class="comment">//添加连接线</span></span><br><span class="line">          <span class="comment">// nodeS.linkDataArray.map((item) =&gt;</span></span><br><span class="line">          <span class="comment">//   this.graph.addEdge(&#123;</span></span><br><span class="line">          <span class="comment">//     source: &#123; cell: item.from &#125;,</span></span><br><span class="line">          <span class="comment">//     target: &#123; cell: item.to &#125;,</span></span><br><span class="line">          <span class="comment">//     attrs: &#123;</span></span><br><span class="line">          <span class="comment">//       line: &#123;</span></span><br><span class="line">          <span class="comment">//         stroke: &quot;#c0c0c0&quot;,</span></span><br><span class="line">          <span class="comment">//         strokeWidth: 2,</span></span><br><span class="line">          <span class="comment">//         targetMarker: &#123;</span></span><br><span class="line">          <span class="comment">//           name: &quot;block&quot;,</span></span><br><span class="line">          <span class="comment">//           width: 12,</span></span><br><span class="line">          <span class="comment">//           height: 8,</span></span><br><span class="line">          <span class="comment">//         &#125;,</span></span><br><span class="line">          <span class="comment">//       &#125;,</span></span><br><span class="line">          <span class="comment">//     &#125;,</span></span><br><span class="line">          <span class="comment">//     zIndex: 0,</span></span><br><span class="line">          <span class="comment">//   &#125;)</span></span><br><span class="line">          <span class="comment">// );</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//修改画布内置的样式，正常css无法修改</span></span><br><span class="line">  <span class="title function_">insertCss</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">insertCss</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  #container &#123;</span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    border: 1px solid #dfe3e8;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  #stencil &#123;</span></span><br><span class="line"><span class="string">    width: 180px;</span></span><br><span class="line"><span class="string">    height: 100%;</span></span><br><span class="line"><span class="string">    position: relative;</span></span><br><span class="line"><span class="string">    border-right: 1px solid #dfe3e8;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  #graph-container &#123;</span></span><br><span class="line"><span class="string">    width: calc(100% - 180px);</span></span><br><span class="line"><span class="string">    height: 100%;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-stencil  &#123;</span></span><br><span class="line"><span class="string">    background-color: #fff;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-stencil-title &#123;</span></span><br><span class="line"><span class="string">    background-color: #fff;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-stencil-group-title &#123;</span></span><br><span class="line"><span class="string">    background-color: #fff !important;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-transform &#123;</span></span><br><span class="line"><span class="string">    margin: -1px 0 0 -1px;</span></span><br><span class="line"><span class="string">    padding: 0px;</span></span><br><span class="line"><span class="string">    border: 1px solid #239edd;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-transform &gt; div &#123;</span></span><br><span class="line"><span class="string">    border: 1px solid #239edd;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-transform &gt; div:hover &#123;</span></span><br><span class="line"><span class="string">    background-color: #3dafe4;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-transform-active-handle &#123;</span></span><br><span class="line"><span class="string">    background-color: #3dafe4;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-transform-resize &#123;</span></span><br><span class="line"><span class="string">    border-radius: 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-selection-inner &#123;</span></span><br><span class="line"><span class="string">    border: 1px solid #239edd;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .x6-widget-selection-box &#123;</span></span><br><span class="line"><span class="string">    opacity: 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">receiveId</span> = <span class="variable language_">this</span>.<span class="property">$props</span>.<span class="property">id</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initGraph</span>() <span class="comment">//初始化画布</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initPorts</span>() <span class="comment">//初始化连接桩</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">enrollNode</span>() <span class="comment">//注册自定义节点</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initStencil</span>() <span class="comment">//初始化左侧栏ui</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initEvent</span>() <span class="comment">//添加监听事件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">queryApiList</span>() <span class="comment">//查找接口列表</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">loadData</span>() <span class="comment">//加载数据</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &lt;!-- 下面是节点属性框 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;drawer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;node_attr_box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px; padding: 10px 5px; background-color: slategray&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>组态属性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close_icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;drawer = false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;nodeForm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>节点设置<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;设备ID&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;idNum&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;nodeForm.idNum&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本设置<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;文本&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;nodeName&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;nodeForm.nodeName&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;onNameChange&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>gojs 和 x6 的图形显示不符合预期</p>
<p>在 X6 中，网格是渲染&#x2F;移动节点的最小单位，默认是 10px ，也就是说位置为 <code>&#123; x: 24, y: 38 &#125;</code> 的节点渲染到画布后的实际位置为 <code>&#123; x: 20, y: 40 &#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建画布</span></span><br><span class="line">myDiagram = $(</span><br><span class="line">  sx.<span class="property">Diagram</span>,</span><br><span class="line">  <span class="string">&quot;myDiagramp&quot;</span>, <span class="comment">// 必须指定或引用 HTML 元素</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 是否显示网格</span></span><br><span class="line">    <span class="attr">grid</span>: $(</span><br><span class="line">      sx.<span class="property">Panel</span>,</span><br><span class="line">      <span class="string">&quot;Grid&quot;</span>,</span><br><span class="line">      $(sx.<span class="property">Shape</span>, <span class="string">&quot;LineH&quot;</span>, &#123; <span class="attr">stroke</span>: <span class="string">&quot;lightgray&quot;</span>, <span class="attr">strokeWidth</span>: <span class="number">0.5</span> &#125;), <span class="comment">// 水平辅助线，浅灰色</span></span><br><span class="line">      $(sx.<span class="property">Shape</span>, <span class="string">&quot;LineH&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="string">&quot;gray&quot;</span>,</span><br><span class="line">        <span class="attr">strokeWidth</span>: <span class="number">0.5</span>,</span><br><span class="line">        <span class="attr">interval</span>: <span class="number">10</span>,</span><br><span class="line">      &#125;), <span class="comment">// 水平主要线，灰色，每隔10个单位绘制一条</span></span><br><span class="line">      $(sx.<span class="property">Shape</span>, <span class="string">&quot;LineV&quot;</span>, &#123; <span class="attr">stroke</span>: <span class="string">&quot;lightgray&quot;</span>, <span class="attr">strokeWidth</span>: <span class="number">0.5</span> &#125;), <span class="comment">// 垂直辅助线，浅灰色</span></span><br><span class="line">      $(sx.<span class="property">Shape</span>, <span class="string">&quot;LineV&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">stroke</span>: <span class="string">&quot;gray&quot;</span>,</span><br><span class="line">        <span class="attr">strokeWidth</span>: <span class="number">0.5</span>,</span><br><span class="line">        <span class="attr">interval</span>: <span class="number">10</span>,</span><br><span class="line">      &#125;) <span class="comment">// 垂直主要线，灰色，每隔10个单位绘制一条</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// 只读模式</span></span><br><span class="line">    <span class="attr">isReadOnly</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 初始化画布缩放比例</span></span><br><span class="line">    <span class="attr">scale</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="attr">allowDrop</span>: <span class="literal">true</span>, <span class="comment">// 允许从工具栏拖拽节点到画布</span></span><br><span class="line">    <span class="attr">allowZoom</span>: <span class="literal">true</span>, <span class="comment">// 允许缩放</span></span><br><span class="line">    <span class="string">&quot;draggingTool.dragsLink&quot;</span>: <span class="literal">true</span>, <span class="comment">// 拖拽节点时是否同时移动连线</span></span><br><span class="line">    <span class="string">&quot;draggingTool.isGridSnapEnabled&quot;</span>: <span class="literal">true</span>, <span class="comment">// 拖拽节点时是否吸附到网格</span></span><br><span class="line">    <span class="string">&quot;linkingTool.isUnconnectedLinkValid&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许创建未连接的连线</span></span><br><span class="line">    <span class="string">&quot;linkingTool.portGravity&quot;</span>: <span class="number">20</span>, <span class="comment">// 连线吸附到节点端口的力度</span></span><br><span class="line">    <span class="string">&quot;relinkingTool.isUnconnectedLinkValid&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许重新连接未连接的连线</span></span><br><span class="line">    <span class="string">&quot;relinkingTool.portGravity&quot;</span>: <span class="number">20</span>, <span class="comment">// 重新连接连线时吸附到节点端口的力度</span></span><br><span class="line">    <span class="string">&quot;relinkingTool.fromHandleArchetype&quot;</span>: $(sx.<span class="property">Shape</span>, <span class="string">&quot;Diamond&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">segmentIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">cursor</span>: <span class="string">&quot;pointer&quot;</span>,</span><br><span class="line">      <span class="attr">desiredSize</span>: <span class="keyword">new</span> sx.<span class="title class_">Size</span>(<span class="number">8</span>, <span class="number">8</span>),</span><br><span class="line">      <span class="attr">fill</span>: <span class="string">&quot;tomato&quot;</span>,</span><br><span class="line">      <span class="attr">stroke</span>: <span class="string">&quot;darkred&quot;</span>,</span><br><span class="line">    &#125;), <span class="comment">// 重新连接连线时起始点的手柄样式</span></span><br><span class="line">    <span class="string">&quot;relinkingTool.toHandleArchetype&quot;</span>: $(sx.<span class="property">Shape</span>, <span class="string">&quot;Diamond&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">segmentIndex</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">cursor</span>: <span class="string">&quot;pointer&quot;</span>,</span><br><span class="line">      <span class="attr">desiredSize</span>: <span class="keyword">new</span> sx.<span class="title class_">Size</span>(<span class="number">8</span>, <span class="number">8</span>),</span><br><span class="line">      <span class="attr">fill</span>: <span class="string">&quot;darkred&quot;</span>,</span><br><span class="line">      <span class="attr">stroke</span>: <span class="string">&quot;tomato&quot;</span>,</span><br><span class="line">    &#125;), <span class="comment">// 重新连接连线时结束点的手柄样式</span></span><br><span class="line">    <span class="string">&quot;linkReshapingTool.handleArchetype&quot;</span>: $(sx.<span class="property">Shape</span>, <span class="string">&quot;Diamond&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">desiredSize</span>: <span class="keyword">new</span> sx.<span class="title class_">Size</span>(<span class="number">7</span>, <span class="number">7</span>),</span><br><span class="line">      <span class="attr">fill</span>: <span class="string">&quot;lightblue&quot;</span>,</span><br><span class="line">      <span class="attr">stroke</span>: <span class="string">&quot;deepskyblue&quot;</span>,</span><br><span class="line">    &#125;), <span class="comment">// 调整连线形状时的手柄样式</span></span><br><span class="line">    <span class="attr">rotatingTool</span>: $(<span class="title class_">TopRotatingTool</span>), <span class="comment">// 自定义旋转工具</span></span><br><span class="line">    <span class="string">&quot;rotatingTool.snapAngleMultiple&quot;</span>: <span class="number">15</span>, <span class="comment">// 旋转时对齐到的角度倍数</span></span><br><span class="line">    <span class="string">&quot;rotatingTool.snapAngleEpsilon&quot;</span>: <span class="number">15</span>, <span class="comment">// 角度对齐的容差范围</span></span><br><span class="line">    <span class="string">&quot;undoManager.isEnabled&quot;</span>: <span class="literal">true</span>, <span class="comment">// 启用撤销/重做功能</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>同步 gojs 中渲染的表格，也是 10px，现在考虑解决 x6 缩放问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">graph.<span class="title function_">resize</span>(<span class="number">800</span>, <span class="number">600</span>) <span class="comment">// resize 画布大小</span></span><br><span class="line">graph.<span class="title function_">translate</span>(<span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 在 x、y 方向上平移画布</span></span><br><span class="line">graph.<span class="title function_">zoom</span>(<span class="number">0.2</span>) <span class="comment">// 将画布缩放级别增加 0.2（默认为1）</span></span><br><span class="line">graph.<span class="title function_">zoom</span>(-<span class="number">0.2</span>) <span class="comment">// 将画布缩放级别减少 0.2</span></span><br><span class="line">graph.<span class="title function_">zoomTo</span>(<span class="number">1.2</span>) <span class="comment">// 将画布缩放级别设置为 1.2</span></span><br><span class="line"><span class="comment">// 将画布中元素缩小或者放大一定级别，让画布正好容纳所有元素，可以通过 maxScale 配置最大缩放级别</span></span><br><span class="line">graph.<span class="title function_">zoomToFit</span>(&#123; <span class="attr">maxScale</span>: <span class="number">1</span> &#125;)</span><br><span class="line">graph.<span class="title function_">centerContent</span>() <span class="comment">// 将画布中元素居中展示</span></span><br></pre></td></tr></table></figure>

<p>加入了 zoom 后，差不多比例了</p>
<p>接着研究线的坐标,发现是 base64 图片有偏移，保存时候添加了，解决了这个问题。又发现了新的问题，还是线的问题，图片与图片直连，两边都可以，就是旋转之后，连接线不匹配。研究线</p>
<h1 id="常用-api"><a href="#常用-api" class="headerlink" title="常用 api"></a>常用 api</h1><p><a href="https://x6.antv.antgroup.com/api/model/cell">https://x6.antv.antgroup.com/api/model/cell</a></p>
<p>节点&#x2F;边渲染到画布后可以通过</p>
<p>cell.isNode()</p>
<p>cell.getZIndex()</p>
<p>cell.setZIndex(z: number) 来获取或设置 zIndex 的值</p>
<p>cell.toFront()</p>
<p>cell.toBack() 来将其移到最顶层或最底层</p>
<p>cell.attrs 获取属性 要是 &#x3D; 就是设置新的属性</p>
<p>cell.getAttrs() 获取属性</p>
<p>setAttrs(attrs: Attr.CellAttrs, options?: Cell.SetAttrOptions) 设置属性</p>
<p>默认深 merge，值全部替换，如果原先有 body，替换的没有，body 也会消失</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">cell.<span class="title function_">setAttrs</span>(&#123;</span><br><span class="line">  <span class="attr">body</span>: &#123; <span class="attr">fill</span>: <span class="string">&quot;#f5f5f5&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">label</span>: &#123; <span class="attr">text</span>: <span class="string">&quot;My Label&quot;</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>浅的则 body 捕获消失，只替换替换的值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">cell.<span class="title function_">setAttrs</span>(&#123; <span class="attr">label</span>: &#123; <span class="attr">text</span>: <span class="string">&quot;My Label&quot;</span> &#125; &#125;, &#123; <span class="attr">deep</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>replaceAttrs(…) 相当于刚刚上面那个身</p>
<p>updateAttrs(…) 相当于浅的</p>
<p>removeAttrs(…) 删除属性</p>
<p>cell.getAttrByPath() 路径为空时返回全部属性</p>
<p>cell.getAttrByPath(‘body’) 通过字符串路径获取属性值</p>
<p>还可以 [‘body’]</p>
<p>setAttrByPath(…) 根据属性路径设置属性值</p>
<p>cell.setAttrByPath(‘body’, { stroke: ‘#000000’ }) <em>&#x2F;&#x2F; 替换 body 属性值</em> 深</p>
<p>cell.setAttrByPath(‘body&#x2F;fill’, ‘#f5f5f5’) <em>&#x2F;&#x2F; 设置 body.fill 属性值</em>浅保留原</p>
<p>cell.removeAttrByPath(‘body&#x2F;fill’) 通过字符串路径删除属性值</p>
<p>attr(…)该方法是 <a href="https://x6.antv.antgroup.com/api/model/cell#getattrbypath"><code>getAttrByPath</code></a>、<a href="https://x6.antv.antgroup.com/api/model/cell#setattrbypath"><code>setAttrByPath</code></a> 和 <a href="https://x6.antv.antgroup.com/api/model/cell#setattrs"><code>setAttrs</code></a> 三个方法的整合，提供了上面四种函数签名，是一个非常实用的方法。</p>
<p>cell.attr()</p>
<p>cell.attr(‘line&#x2F;stroke’, ‘#c0c0c0’)</p>
<p>cell.attr(‘body&#x2F;fill’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const rect = new Shape.Rect(&#123;</span><br><span class="line">  x: 40,</span><br><span class="line">  y: 40,</span><br><span class="line">  width: 100,</span><br><span class="line">  height: 40,</span><br><span class="line">  data: &#123;</span><br><span class="line">    bizID: 125,</span><br><span class="line">    date: &#x27;20200630&#x27;,</span><br><span class="line">    price: 89.0,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>data 声明在和宽高同级别</p>
<p>cell.getData() 获取这个 data 里的对象</p>
<p>cell.setData() 设置 设置关联的数据，并触发 <code>change:data</code> 事件和画布重绘</p>
<p>cell.setData(data) 默认深 merge</p>
<p>cell.setData(data, { overwrite: true }) 替换旧数据</p>
<p>cell.setData(data, { deep: false }) 浅</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;x6&#x27;</span>, <span class="attr">star</span>: <span class="literal">true</span> &#125;</span><br><span class="line">node.<span class="title function_">setData</span>(obj) <span class="comment">// 此时会触发节点重绘</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">star</span> = <span class="literal">false</span></span><br><span class="line">node.<span class="title function_">setData</span>(obj) <span class="comment">// 注意，此时不会进行深比较，判定对象未发生修改，不会触发节点重绘</span></span><br><span class="line"></span><br><span class="line">node.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  ...obj,</span><br><span class="line">  <span class="attr">star</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;) <span class="comment">// 此时会触发节点重绘</span></span><br></pre></td></tr></table></figure>

<p>replaceData(…) 用指定的数据替换原数据，相当于调用 <code>setData(data, &#123; ...options, overwrite: true &#125;)</code>。</p>
<p>updateData(…) 通过浅 merge 来更新数据，相当于调用 <code>setData(data, &#123; ...options, deep: false &#125;)</code>。</p>
<p>removeData(…) 删除数据。默认情况触发 <code>change:data</code> 事件和画布重绘，</p>
<p>getParent() …. 获取父节点。暂时没用到</p>
<p>节点属性</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = <span class="keyword">new</span> <span class="title class_">Shape</span>.<span class="title class_">Rect</span>(&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">40</span>,</span><br><span class="line">  <span class="attr">attrs</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">sale</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">product</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3.99</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码中的 <code>attrs</code>、<code>data</code>、<code>zIndex</code> 都是标准的属性，其中 <code>x</code> 和 <code>y</code> 是一对<a href="https://x6.antv.antgroup.com/api/model/cell#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9">自定义选项</a>，节点初始化时被转换为了 <code>position</code> 属性，同样 <code>width</code> 和 <code>height</code> 也是一对<a href="https://x6.antv.antgroup.com/api/model/cell#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9">自定义选项</a>，节点初始化时被转换为了 <code>size</code> 属性，最后剩余的 <code>sale</code> 和 <code>product</code> 两个对象是非标准的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取标准属性</span></span><br><span class="line"><span class="keyword">const</span> zIndex = node.<span class="title function_">getProp</span>(<span class="string">&#x27;zIndex&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> position = node.<span class="title function_">getProp</span>(<span class="string">&#x27;position&#x27;</span>)</span><br><span class="line">node.<span class="title function_">getProp</span>(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取非标准属性</span></span><br><span class="line"><span class="keyword">const</span> product = node.<span class="title function_">getProp</span>(<span class="string">&#x27;product&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置单个属性：</span></span><br><span class="line">node.<span class="title function_">setProp</span>(<span class="string">&#x27;size&#x27;</span>, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;)</span><br><span class="line">node.<span class="title function_">setProp</span>(<span class="string">&#x27;zIndex&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时设置多个属性</span></span><br><span class="line">node.<span class="title function_">setProp</span>(&#123;</span><br><span class="line">  <span class="attr">size</span>: &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">30</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zIndex</span>: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rect.<span class="title function_">removeProp</span>(<span class="string">&#x27;zIndex&#x27;</span>)</span><br><span class="line">rect.<span class="title function_">removeProp</span>(<span class="string">&#x27;product/id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>prop()是上面的整合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取属性：</span></span><br><span class="line">rect.<span class="title function_">prop</span>();</span><br><span class="line">rect.<span class="title function_">prop</span>(<span class="string">&quot;zIndex&quot;</span>);</span><br><span class="line">rect.<span class="title function_">prop</span>(<span class="string">&quot;product/price&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性：</span></span><br><span class="line">rect.<span class="title function_">prop</span>(<span class="string">&quot;zIndex&quot;</span>, <span class="number">10</span>);</span><br><span class="line">rect.<span class="title function_">prop</span>(<span class="string">&quot;product/price&quot;</span>, <span class="number">5.99</span>);</span><br><span class="line">rect.<span class="title function_">prop</span>(&#123;</span><br><span class="line">  <span class="attr">product</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;234&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3.99</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>X6</tag>
      </tags>
  </entry>
  <entry>
    <title>云部署（私）</title>
    <url>/post/37828.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aee399eea81cda4ac955b74482d6105e123a17f4ed6807bfb31c95e466a4f12f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">抱歉，这里需要密码才能查看！</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>secret</category>
      </categories>
      <tags>
        <tag>cloudDeployment</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2学习笔记</title>
    <url>/post/41150.html</url>
    <content><![CDATA[<h1 id="环境以及文件说明"><a href="#环境以及文件说明" class="headerlink" title="环境以及文件说明"></a>环境以及文件说明</h1><p>环境：node-v14.0.0 终端打开 node -v 查看版本<br>软件：VsCode(其他) and HbuilderX(uniapp 使用)</p>
<p>脚手架搭建：<br>(1)先安装 node.js(必装,官网下载)<br>vue-cli 是 npm 上的一个-g 全局包（只要装一次）<br>(2)npm install -g cnpm –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a><br>国内镜像下载快一点，最好用 yarn（亚），其次 cnpm，这些指令在终端运行<br>(3)cnpm install -g @vue&#x2F;cli 安完这里，以后想创项目直接走第四步<br>(4)vue create 项目的名称</p>
<p>1.node_modules 文件夹：项目依赖文件<br>2.public 文件夹：放置静态资源（图片），webpack 在打包时会原封不动的打包到 dist 文件夹中。<br>3.src 文件夹（程序员源代码文件夹）：<br>3.1 assets 文件夹：放置静态资源比如 logo（多个组件共用的静态资源），在 webpack 打包时会把静态资源当成模块打包到 JS 文件中<br>3.2 components：放置非路由组件（全局组件）<br>3.3 APP.vue：唯一的根组件<br>3.4 main.js：程序入口文件，整个程序中最先执行的文件<br>3.5 router: 路由配置<br>3.6 store: vuex 配置<br>4.babel.config.js：配置文件（与 babel 相关），一般不去修改<br>5.package.json：相当于项目的身份证，配置信息，记录项目叫做什么、项目中有哪些依赖、项目怎么运行，<br>6.package-lock.json：可以删除，是一个缓存文件,锁定版本<br>7.README.md：说明性文件<br>8.views: 放页面</p>
<p><strong>-S 和-D 说明</strong></p>
<p>npm install jquery –S 命令，安装 –S 和–sava 完全一样，安装到 dependencies 节点下，不加也是默认这个地方,发布上线产品<br>npm install <a href="mailto:&#119;&#x65;&#98;&#x70;&#x61;&#99;&#107;&#64;&#x35;&#46;&#52;&#x32;&#x2e;&#49;">&#119;&#x65;&#98;&#x70;&#x61;&#99;&#107;&#64;&#x35;&#46;&#52;&#x32;&#x2e;&#49;</a> -D<br>@指定版本 -D 放在 devDependencies 节点，这个节点只是开发用到</p>
<h1 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ctrl+C  终端停止服务按2次</span><br><span class="line">npm install  或npm i   安装所有安装包,一般用于使用他人项目前</span><br><span class="line">npm uninstall 包名 -g   卸载全局的包</span><br><span class="line">npm i 插件名 版本和节点看情况</span><br><span class="line">npm run build   打包vue项目</span><br><span class="line">npm run serve/dev  运行vue项目 具体指令看package.json里</span><br><span class="line"></span><br><span class="line">yarn  安装全部包</span><br><span class="line">yarn add  **</span><br><span class="line">yarn remove **</span><br></pre></td></tr></table></figure>

<h1 id="Vue-的使用和渲染指令"><a href="#Vue-的使用和渲染指令" class="headerlink" title="Vue 的使用和渲染指令"></a>Vue 的使用和渲染指令</h1><p>2 个特点：<br>数据驱动视图：使用 vue 的页面，vue 会监听数据的变化，从而自动重新渲染页面的结构<br>不过这个是单向的数据绑定类似 v-bind 简写:<br>双向数据绑定：主要用于表单数据绑定，让开发者不需要操作 Dom 前提下自动把用户填写的内容同步到数据源中</p>
<p>MVVM<br>model(页面渲染需要的数据源) view(视图即当前页面渲染的 dom 结构) viewModel(即 vue 说 vm 方便一点,核心)</p>
<p>指令：<br>v-text 渲染文本内容 标签属性名,值对应数据源里面</p>
<p><code>&#123;&#123;&#125;&#125; 插值表达式 常用，类似&lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; name 也是对应数据源里的,然后渲染</code></p>
<p>v-html 把 html 标签的数据源渲染出来 属性名</p>
<p>v-bind 简写 ： 这就是数据驱动视图 它用来绑定属性名 如 :placeholder&#x3D;”tips”<br>就能把 placeholder 这个属性名动态绑定给数据源 tips</p>
<p>v-on 简写 @ 事件绑定 原生 DOM 对象有 onclick、oninput… 对应@click<br>或 v-on:click</p>
<p>v-model 数据双向绑定 一般用于 input 文本框、select 下拉框<br>属于它的 3 修饰符.number 输入值转数值类型 .trim 过滤首尾空白字符 .lazy 在 change 而非 input 更新</p>
<p>事件修饰符<br>&lt;a href&#x3D;”某网站” @click.prevent&#x3D;”onLink”&gt;跳</a> 阻止 a 默认跳转行为<br>还能阻止表单的提交<br>.stop 阻止冒泡 .once 绑定事件只触发 1 次</p>
<p>v-if 指令会动态地创建或移除 DOM 元素，从而控制元素在页面上的显示与隐藏；<br>v-show 指令 style&#x3D;“display: none;” 样式，从而控制元素的显示与隐藏；<br>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此：<br>如果需要非常频繁地切换，则使用 v-show 较好<br>如果在运行时条件很少改变，则使用 v-if 较好</p>
<p>v-if<br>v-else -if<br>v-else 就类似 java 里的 if 语句</p>
<p>v-for 常用的列表渲染指令 (item, index) in items :key&#x3D;”item.id”<br>index 索引可选 key 唯一性 items 一般是列表<br>建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）</p>
<p>&#x3D;&#x3D;运算符：只判断 2 边值是否相等，不判断类型<br>&#x3D;&#x3D;&#x3D;运算符：类型和值都必须等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">        searchMusic:function()&#123;</span><br><span class="line">            var that=this;</span><br><span class="line">            axios.get(&#x27;https://autumnfish.cn/search?keywords=&#x27;+that.query)</span><br><span class="line">            //注意这里正常人用的都是+this.query</span><br><span class="line">            //1.上面var that = this 此时他们指向是一样的，下面还会具体讲解--&gt;</span><br><span class="line">            .then(function(res)&#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">                that.musicList = res.result.songs</span><br><span class="line">                console.log(that.musicList)</span><br><span class="line">                //2.下面分点讲解</span><br><span class="line">                console.log(this.musiclist)</span><br><span class="line">                //3.</span><br><span class="line">            &#125;),function()&#123;</span><br><span class="line">                console.log(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>this：在 js 中，this 用以指代当前对象，但是 this 随着程序进行，所处环境不同，也是会一直变化的（important）<br>这时候我们发现找不到 this 所指的对象了，之前说过 this 会发生变化，在这里 this 就是指向的函数的回调，不是之前挂载的 app, 所以在这一层是找不到 musiclist 的。 换一个角度解释，this 代表父函数，如果在子函数还用 this，this 的指向就变成子函数，that 是用来存储指向的。<br>所以用箭头函数 箭头函数没有自己的 this，它的 this 是继承而来，默认指向在定义它时所处的对象(宿主对象)。</p>
<h1 id="Vue-传值"><a href="#Vue-传值" class="headerlink" title="Vue 传值"></a>Vue 传值</h1><h2 id="父向子传值-自定义属性"><a href="#父向子传值-自定义属性" class="headerlink" title="父向子传值: 自定义属性"></a><strong>父向子传值: 自定义属性</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">父组件:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Son</span> <span class="attr">:msg</span>=<span class="string">&quot;faMsg&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">faMsg</span>:<span class="string">&#x27;这是父组件的数据噢&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">子组件:</span><br><span class="line">在p标签里可以直接&#123;&#123;msg&#125;&#125;使用</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>] 写在和<span class="title function_">data</span>()同级</span><br><span class="line">方法中拿值：<span class="variable language_">this</span>.<span class="property">$props</span>.<span class="property">msg</span></span><br></pre></td></tr></table></figure>

<h2 id="子向父传值-自定义事件"><a href="#子向父传值-自定义事件" class="headerlink" title="子向父传值: 自定义事件"></a><strong>子向父传值: 自定义事件</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子组件：</span><br><span class="line">比如点击了一个按钮触发下面方法</span><br><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span>+=<span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addchange&#x27;</span>,<span class="variable language_">this</span>.<span class="property">cont</span>)</span><br><span class="line">&#125;</span><br><span class="line">父组件:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Son</span> @<span class="attr">addchange</span>=<span class="string">&quot;getNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line">methods：&#123;</span><br><span class="line">  <span class="title function_">getNum</span>(<span class="params">val</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="兄弟传值：EventBus"><a href="#兄弟传值：EventBus" class="headerlink" title="兄弟传值：EventBus"></a><strong>兄弟传值：EventBus</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">新建一个文件夹叫eventBus.<span class="property">js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span> = bus</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> bus</span><br><span class="line"></span><br><span class="line">兄弟A 和B都引入这个js</span><br><span class="line">都要<span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span><br><span class="line">  接收方mounted</span><br><span class="line">    bus.$on(<span class="string">&#x27;share&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    发送方 放一个方法里</span><br><span class="line">    bus.$emit(<span class="string">&#x27;share&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a><strong>路由传值</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">路由也能传值 通过 params传参通过name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;particulars&#x27;</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: id</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">对应路由</span><br><span class="line">&#123;</span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;/particulars&#x27;</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;particulars&#x27;</span>,</span><br><span class="line">     <span class="attr">component</span>: particulars</span><br><span class="line">   &#125;</span><br><span class="line">子接收</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//192.168.15.115/ui?type=x6   这种</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">type</span>    拿值</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><p>安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i vuex</span><br></pre></td></tr></table></figure>

<p>1、state: vuex 的基本数据，用来存储变量；<br>2、getters: 从基本数据（state）派生的数据，相当于 state 的计算属性；<br>3、mutations: 提交更新数据的方法，必须是同步的(如果需要异步使用 action)。每个 mutation 都有一个字符串的事件类型（type）和一个回调函数（handler）。<br>回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数。<br>4、action: 和 mutation 的功能大致相同，不同之处在于 ①Action 提交的是 mutation，而不是直接变更状态，②Action 可以包含任意异步操作。<br>5、modules: 模块化 vuex，可以让每一个模块拥有自己的 state、mutation、action、 getters，使得结构非常清晰，方便管理。</p>
<p>store 文件夹下 新建 modules&#x2F;user.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)index.<span class="property">js</span>文件夹配置如下</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)main.<span class="property">js</span>也要声明</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)user.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 登录的用户</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">getUser</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">user</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setUser</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">user</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">setUser</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;setUser&#x27;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)使用</span><br><span class="line"></span><br><span class="line">（<span class="number">11</span>）&#123;&#123;$store.<span class="property">state</span>.<span class="property">user</span>&#125;&#125;   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">getUser</span></span><br><span class="line"></span><br><span class="line">（<span class="number">22</span>）<span class="title class_">Vuex</span>规定必须通过mutation修改数据，不可以直接通过store修改状态数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">//通过这个设置值</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">//通过这个获取值</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;    <span class="comment">//计算属性</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&quot;getUser&quot;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;   <span class="comment">//监听vuex里的值变化</span></span><br><span class="line">    <span class="comment">// 获取vuex的登录状态</span></span><br><span class="line">    <span class="attr">getUser</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === <span class="string">&quot;&quot;</span>) &#123;          <span class="comment">// 用户没有登录</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;&#125;&#125;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">  需要给user赋值时候直接<span class="variable language_">this</span>.<span class="title function_">setUser</span>(值),拿调用<span class="variable language_">this</span>.<span class="title function_">getUser</span>()</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&quot;setUser&quot;</span>]),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="浏览器存储数据"><a href="#浏览器存储数据" class="headerlink" title="浏览器存储数据"></a>浏览器存储数据</h1><ol>
<li><p>Cookie：浏览器关闭后，cookie 仍然存在，因此用户可以保持登录状态，容易受到<a href="https://so.csdn.net/so/search?q=CSRF&spm=1001.2101.3001.7020">CSRF</a>（跨站请求伪造）攻击</p>
</li>
<li><p>SessionStorage：它只在当前会话中存在，当用户关闭浏览器后，sessionStorage 中的数据将被清除。这种方式的缺点是，如果用户在浏览器中打开新的标签页或窗口，那么新的页面将无法访问 sessionStorage 中的数据</p>
</li>
<li><p>LocalStorage：将 token 存储在 localStorage 中的优点是，即使在浏览器关闭后，localStorage 中的数据仍然存在，因此用户可以保持登录状态。此外，localStorage 中的数据可以在同一浏览器的所有标签页和窗口中共享。然而，localStorage 的缺点是容易受到 XSS（跨站脚本）攻击。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)vue项目中</span><br><span class="line">*****<span class="variable language_">localStorage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>.<span class="property">user</span>)   字符串转成json格式</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>, user) 存</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>)   读取</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>))  json转为对象格式才能.出来，重点</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&quot;</span>); 设为空</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user&#x27;</span>)  <span class="comment">//移除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*****<span class="variable language_">sessionStorage</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, data.<span class="property">token</span>) 字符串格式不需要转</span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)   可以直接这样读,因为只存了一个token字符串</span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;ADMIN&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)) 存</span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user&#x27;</span>) 删</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*****cookie</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;vue-cookie&quot;</span>: <span class="string">&quot;^1.1.4&quot;</span>,</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueCookie</span> <span class="keyword">from</span> <span class="string">&quot;vue-cookie&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueCookie</span>);</span><br><span class="line"></span><br><span class="line">在request.<span class="property">js</span>中发起请求拦截器里添加,记得先引入<span class="title class_">Vue</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;picToken&quot;</span>] = <span class="title class_">Vue</span>.<span class="property">cookie</span>.<span class="title function_">get</span>(<span class="string">&quot;picToken&quot;</span>); <span class="comment">// 请求头带上token</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookie</span>.<span class="title function_">set</span>(<span class="string">&quot;picToken&quot;</span>, data.<span class="property">token</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$cookie</span>.<span class="title function_">get</span>(<span class="string">&#x27;picToken&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)uniapp中</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储token,只需要存字符串即可</span></span><br><span class="line">uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span>);  同步存</span><br><span class="line">uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>.<span class="property">data</span>));</span><br><span class="line"></span><br><span class="line">uni.<span class="title function_">clearStorageSync</span>();  删</span><br><span class="line"><span class="keyword">const</span> obj=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;userInfo&#x27;</span>)); 读</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转json格式存本地</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setUser</span>(res.<span class="property">data</span>.<span class="property">data</span>);<span class="comment">//存vuex里不需要转json,默认转对象,np</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setToken</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">token</span>);</span><br><span class="line"></span><br><span class="line">其他地方vuex拿值</span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;getUser&#x27;</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getMyMsg</span>(<span class="params"></span>) &#123; <span class="comment">//不用转都能拿到</span></span><br><span class="line">      <span class="title function_">getMyMsgs</span>(<span class="variable language_">this</span>.<span class="property">getUser</span>.<span class="property">userId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">getUser</span>.<span class="property">token</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">myMsg</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="vue2-过滤器使用"><a href="#vue2-过滤器使用" class="headerlink" title="vue2 过滤器使用"></a>vue2 过滤器使用</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;dateFormat&#x27;</span>, <span class="keyword">function</span> (<span class="params">value, format</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">moment</span>(value).<span class="title function_">format</span>(format)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">使用方法：</span><br><span class="line">&#123;&#123;time | <span class="title function_">dateFormat</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="富文本编辑使用"><a href="#富文本编辑使用" class="headerlink" title="富文本编辑使用"></a>富文本编辑使用</h1><p>vue2 去安装 sass ，node 版本最高支持 14.0<br>先卸载本来可能安装的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall node-sass</span><br><span class="line">npm uninstall sass-load</span><br><span class="line">再删除node_modules文件夹</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass</span><br><span class="line">然后执行npm install node-sass</span><br><span class="line">npm i sass-load即可</span><br></pre></td></tr></table></figure>

<h1 id="请求封装"><a href="#请求封装" class="headerlink" title="请求封装"></a>请求封装</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;../router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json;charset=utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// config.headers[&#x27;token&#x27;] = user.token;  // 设置请求头</span></span><br><span class="line">    <span class="comment">//取出sessionStorage里面缓存的用户信息</span></span><br><span class="line">    <span class="keyword">let</span> userJson = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!userJson) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line"><span class="comment">// 可以在接口响应后统一处理结果</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 如果是返回的文件</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&quot;blob&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span> + error); <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><code>new Vue()</code>之后，分别经过了以上几个阶段，分别是<strong>1 初始化阶段</strong>，<strong>2 模板编译阶段</strong>，<strong>3 挂载阶段</strong>，<strong>4 更新阶段</strong>，<strong>5 销毁阶段</strong></p>
<p>1、首先做一些初始化操作，主要是设置一些私有属性到 vue 实例中。运行生命周期钩子函数 beforeCreate</p>
<p>进入注入流程，处理属性，computed，methods，data，provide，inject，最后使用代理模式将这些属性挂载到实例中。运行生命周期钩子函数 created</p>
<p>2、生成<code>render</code>函数：如果有配置，直接使用配置的<code>render</code>函数，如果没有，使用运行时编译器，把模板编译成<code>render</code>函数</p>
<p>3、运行生命周期钩子函数 beforeMount，传入一个函数 updeteCompontent，该函数会运行 render 函数，并把 render 函数的返回结果作为参数给_updete 函数执行。<br>在执行 render 函数的过程中会搜集所有依赖，将来依赖发生变换时会出现执行 updateCompontent 函数。在执行_update 的过程中，会触发 patch 函数，由于目前还没有就的虚拟 DOM 树，因此直接为当前的虚拟 DOM 树的每一个节点生成对应 elm 属性，即真实 DOM。如果遇到创建一个组件实例的 vnode，则会进入组件实例化流程，该流程同 vue 实例流程，同上初始化阶段，编译阶段，挂载阶段。最终会把创建好的组件实例挂载到 vnode 的 compontentInstance 属性中，以便复用。运行生命周期钩子函数 mounted<br>4、运行生命周期钩子函数 beforeUpdate。在执行 render 函数的过程中，会先去掉之前的依赖，重新收集新的依赖，将来依赖发生变化时出现运行 updateCompontent 函数。在执行 update 函数的过程中，会触发 patch 函数，对比新旧两棵 DOM 树：</p>
<p>当对比两棵 DOM 树的节点的时候，有两种情况，分别：</p>
<p>普通 html 节点</p>
<p>普通 html 节点的对比会导致真实节点被创建，删除，移动，更新</p>
<p>组件节点</p>
<p>组件节点的对比会导致组件被创建，删除，移动，更新。</p>
<p>a）组件节点创建的时，进入组件实例化流程，同上初始化阶段，编译阶段，挂载阶段。</p>
<p>b）当旧组件节点删除时，会调用旧组件的$destroy方法删除组件，该方法会触发生命周期钩子函数beforeDestroy，然后递归调用组件的$destroy 方法，然后出发生命周期钩子函数 destroyed</p>
<p>c）当组件更新时，相当于组件的 updateCompontent 函数被重新触发，进入渲染流程，同更新阶段</p>
<p>运行生命周期钩子函数 updated<br>5、当组件销毁的时候，会调用组件的<code>$destroy</code>方法删除组件，该方法会调用<code>beforeDestroy</code>和<code>destroyed</code>方法</p>
<p>生命周期都是方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A beforeCreate&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A created&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A beforeMount&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A mounted&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A beforeUpdate&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A updated&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A beforeDestroy&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A destroyed&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">flag</span>.<span class="property">check</span> = <span class="variable language_">this</span>.<span class="property">check</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="引入样式或者-js"><a href="#引入样式或者-js" class="headerlink" title="引入样式或者 js"></a>引入样式或者 js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./assets/css/index.css&#x27;</span>;  <span class="comment">//本地</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="title function_">url</span>(<span class="string">&#x27;https://at.alicdn.com/t/c/font_4406297_ebaqc2j4n1e.css&#x27;</span>); <span class="comment">//外部</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; yh &#125; <span class="keyword">from</span> <span class="string">&#x27;@/assets/js/yinHua.js&#x27;</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    yh</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>1、如果后端传过来的值<br>有转义符号，则需要前端转 2 次 JSON.parse()，第一次转完是字符串格式，还不能点出来数据，因为是字符串</p>
]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架搭建</title>
    <url>/post/34926.html</url>
    <content><![CDATA[<h1 id="前端架构搭建"><a href="#前端架构搭建" class="headerlink" title="前端架构搭建"></a>前端架构搭建</h1><p>vue2 脚手架上搭建</p>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="https://imgs.luckynwa.top/mdS/Snipaste_2023-07-20_14-28-30.png" alt="Snipaste_2023-07-20_14-28-30"></p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;echarts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;element-ui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;qs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.11.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-moment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-particles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.63.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.14&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue-config"><a href="#vue-config" class="headerlink" title="vue.config"></a>vue.config</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>, <span class="comment">//打包配置文件</span></span><br><span class="line">  <span class="attr">parallel</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9094</span>, <span class="comment">//这是vue启动的端口</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:9999/&quot;</span>, <span class="comment">//这是这是本地地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;scripthost&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">pnpm-debug.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: luckyNwa</span></span><br><span class="line"><span class="comment"> * @Date: 2023-07-04 10:38:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueParticles</span> <span class="keyword">from</span> <span class="string">&quot;vue-particles&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Global</span> <span class="keyword">from</span> <span class="string">&quot;./Global&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Global</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueParticles</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$qs</span> = qs;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$target</span> = <span class="string">&quot;http://localhost:9999/&quot;</span>;</span><br><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">function</span> (<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/home&quot;</span> || to.<span class="property">path</span> === <span class="string">&quot;/index&quot;</span> || to.<span class="property">path</span> === <span class="string">&quot;/weekly&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//   console.log(&#x27;全局前置守卫启动，token有值放行！&#x27;)</span></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">notifyError</span>(<span class="string">&quot;请先登录！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Global-js"><a href="#Global-js" class="headerlink" title="Global.js"></a>Global.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// 封装提示成功的弹出框</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notifySucceed</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$notify(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: msg,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 封装提示失败的弹出框</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notifyError</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$notify</span>.<span class="title function_">error</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;错误&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: msg,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="APP-vue"><a href="#APP-vue" class="headerlink" title="APP.vue"></a>APP.vue</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@import</span> <span class="string">&#x27;./assets/css/index.css&#x27;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="request-js-工具类"><a href="#request-js-工具类" class="headerlink" title="request.js 工具类"></a>request.js 工具类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios的封装</span></span><br><span class="line"><span class="comment"> * 可以对拦截器各种处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">// 比如判断是否有token</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">token</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器,下面改了会报错</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>

<h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">modules/user.<span class="property">js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getUser</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">user</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getToken</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">token</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setUser</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">user</span> = data</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setToken</span>(<span class="params">state, data</span>) &#123;</span><br><span class="line">      state.<span class="property">token</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setUser</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;setUser&#x27;</span>, data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setToken</span>(<span class="params">&#123; commit &#125;, data</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: luckyNwa</span></span><br><span class="line"><span class="comment"> * @Date: 2023-07-04 10:38:45</span></span><br><span class="line"><span class="comment"> * @路由配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/login/index.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="comment">//登录</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/login/index.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>, <span class="comment">//首页</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;首页&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/index.vue&quot;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/index&quot;</span>, <span class="comment">//首页</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;首页&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/index/index.vue&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/weekly&quot;</span>, <span class="comment">//周报管理</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;weekly&quot;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;周报管理&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/weekly/index.vue&quot;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/myWeekly&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;myWeekly&quot;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;我的周报&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/weekly/myWeekly.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/allWeekly&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;allWeekly&quot;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;所有周报&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/weekly/allWeekly.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/modifyMy&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;modifyMy&quot;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;修改&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/weekly/modifyMy.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/addMy&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;addMy&quot;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;添加&quot;</span> &#125;,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home/weekly/addMy.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// component: () =&gt; import(&#x27;../views/home/user/index.vue&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: luckyNwa</span></span><br><span class="line"><span class="comment"> * @Date: 2023-07-04 10:38:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/util/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">修改密码</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">modifyPwd</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/modifyPwd&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">获取日志表</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getLogList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/getLogList&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">获取我的周报</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getMyWeekList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/getMyWeekList&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">获取编辑里的我的周报</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getMyWeek</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/getMyWeek&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">保存数据</span>&#125; <span class="variable">datas</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">keepMyWeekly</span> = (<span class="params">datas</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/keepMyWeekly&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: datas,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">单删除</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">delMyWeekOne</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/delMyWeekOne&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">批量删除</span>&#125; <span class="variable">list1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">delMyWeekMore</span> = (<span class="params">list1</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/delMyWeekMore&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">list</span>: list1,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">添加1</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addOneMon</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/addOneMon&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">添加2</span>&#125; <span class="variable">datas</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addOneWeek</span> = (<span class="params">datas</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/addOneWeek&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: datas,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">下载</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loadOne</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/export&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="components"><a href="#components" class="headerlink" title="components"></a>components</h2><h3 id="NavMenu-vue"><a href="#NavMenu-vue" class="headerlink" title="NavMenu.vue"></a>NavMenu.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @右侧菜单的组件</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;165px !important&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&quot;height: 2250px !important&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;el-menu</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      default-active=&quot;2&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      class=&quot;el-menu-vertical-demo&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      @open=&quot;handleOpen&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      @close=&quot;handleClose&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;el-submenu index=&quot;1&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;template slot=&quot;title&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          &lt;i class=&quot;el-icon-location&quot;&gt;&lt;/i&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          &lt;span&gt;周报管理&lt;/span&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;/template&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;el-menu-item index=&quot;1-1&quot;&gt;我的周报&lt;/el-menu-item&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;el-menu-item index=&quot;1-2&quot;&gt;所有周报&lt;/el-menu-item&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">      &lt;/el-submenu&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    &lt;/el-menu&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">default-active</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             <span class="attr">class</span>=<span class="string">&quot;el-menu-vertical-demo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             <span class="attr">router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in lists&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">           <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;item.isFlag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;item.index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;item.ic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">:index</span>=<span class="string">&quot;item.index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-cooperation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;itema.index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">v-for</span>=<span class="string">&quot;itema in item.children&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">:key</span>=<span class="string">&quot;itema.id&quot;</span>&gt;</span>&#123;&#123; itema.name &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  created () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(JSON.parse(window.sessionStorage.getItem(&#x27;ADMIN&#x27;)).roleId)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//如果没有做菜单权限管理，而是直接普通只显示周报页面，管理员显示周报管理，直接本地查赋值会提高效率无需访问数据库</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//如果是有菜单权限管理，则需要一个菜单表，一个权限表以及中间表</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//1的话直接给它主页，2给主页和管理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;ADMIN&#x27;</span>)).<span class="property">roleId</span> == <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">lists</span> = <span class="variable language_">this</span>.<span class="property">lists1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/myWeekly&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">lists</span> = <span class="variable language_">this</span>.<span class="property">lists2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// getMenu(&#123; acc: 3 &#125;).then((res) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//   if (res.data.code == 200) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//     console.log(res.data.data)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//     this.lists3.push(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       id: 0,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       index: &#x27;/index&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       ic: &#x27;el-icon-s-flag&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       name: &#x27;首页&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       isFlag: 1,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       children: &#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//     &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//     for (var i = 0; i &lt; res.data.data.length; i++) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       this.lists3.push(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         id: res.data.data[i].listId,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         index: res.data.data[i].listIndex,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         ic: res.data.data[i].listIcon,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         name: res.data.data[i].menuName,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         isFlag: res.data.data[i].listIsFlag,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//         children: &#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//       &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.lists = this.lists3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lists</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lists3</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lists1</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">index</span>: <span class="string">&#x27;/weekly&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">ic</span>: <span class="string">&#x27;el-icon-data-line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;周报管理&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">isFlag</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">children</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">index</span>: <span class="string">&#x27;/myWeekly&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">name</span>: <span class="string">&#x27;我的周报&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//   index: &#x27;/allWeekly&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//   name: &#x27;所有周报&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lists2</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">index</span>: <span class="string">&#x27;/index&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">ic</span>: <span class="string">&#x27;el-icon-s-home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;首页&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">isFlag</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">children</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">index</span>: <span class="string">&#x27;/weekly&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">ic</span>: <span class="string">&#x27;el-icon-data-line&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;周报管理&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">isFlag</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">children</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">index</span>: <span class="string">&#x27;/myWeekly&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">name</span>: <span class="string">&#x27;我的周报&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//   index: &#x27;/allWeekly&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//   name: &#x27;所有周报&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyHeader-vue"><a href="#MyHeader-vue" class="headerlink" title="MyHeader.vue"></a>MyHeader.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @头部区域</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headContainer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headlog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700; margin-left: 20px&quot;</span>&gt;</span> 工作日志<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 17px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="symbol">&amp;nbsp;</span>欢迎<span class="symbol">&amp;nbsp;</span>&#123;&#123; userName &#125;&#125;&lt;/span</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HeadPortrait</span>&gt;</span><span class="tag">&lt;/<span class="name">HeadPortrait</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">HeadPortrait</span> <span class="keyword">from</span> <span class="string">&quot;@/components/HeadPortrait.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">HeadPortrait</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;MyHeader&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">userName</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">roleName</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 这是挂载完成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;ADMIN&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">userName</span> = obj.<span class="property">userName</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="HeadPortrait-vue"><a href="#HeadPortrait-vue" class="headerlink" title="HeadPortrait.vue"></a>HeadPortrait.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @本来是右边头像的组件，改成修改密码和退出的</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">&quot;showDialog&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          border: none;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          background-color: transparent;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          color: white;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-lock&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        修改密码</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-switch-button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&quot;background-color: transparent; border: none; color: white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        退出系统</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;修改密码&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 修改密码表单 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;旧密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;oldPassword&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.oldPassword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;newPassword&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.newPassword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认新密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;confirmPassword&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.confirmPassword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; modifyPwd &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;HeadPortrait&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">form</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">oldPassword</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">newPassword</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmPassword</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">oldPassword</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入旧密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">newPassword</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入新密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">min</span>: <span class="number">6</span>, <span class="attr">message</span>: <span class="string">&quot;密码长度不能少于6位&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">confirmPassword</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请确认新密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">validator</span>: <span class="variable language_">this</span>.<span class="property">validateConfirmPassword</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapActions</span>([<span class="string">&quot;setToken&quot;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;ADMIN&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">setToken</span>(<span class="string">&quot;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">showDialog</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">validateConfirmPassword</span>(<span class="params">rule, value, callback</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (value !== <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">newPassword</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;两次输入的密码不一致&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">callback</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 处理提交逻辑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">modifyPwd</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">userAcc</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;ADMIN&quot;</span>)).<span class="property">userAcc</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">newPassword</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">newPassword</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">oldPassword</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">oldPassword</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">notifySucceed</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">notifyError</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;表单验证失败&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.navbar</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">widows</span>: <span class="number">199px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">img</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-decoration</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="BreadCrumb-vue"><a href="#BreadCrumb-vue" class="headerlink" title="BreadCrumb.vue"></a>BreadCrumb.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @面包屑的组件</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator-class</span>=<span class="string">&quot;el-icon-arrow-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in lists&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">:key</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span>&#123;&#123;item.meta.title&#125;&#125;<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">lists</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $route (to, <span class="keyword">from</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">lists</span> = to.<span class="property">matched</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  mounted () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">lists</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">matched</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="views"><a href="#views" class="headerlink" title="views"></a>views</h2><h3 id="login-index-vue"><a href="#login-index-vue" class="headerlink" title="login&#x2F;index.vue"></a>login&#x2F;index.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @登录页面</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>工作日志系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:model</span>=<span class="string">&quot;loginForm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:rules</span>=<span class="string">&quot;loginRules&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yzmdiv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;yzm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&quot;验证码&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-model</span>=<span class="string">&quot;loginForm.yzm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&quot;width: 130px; margin-right: 22px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">prop</span>=<span class="string">&quot;yzmm&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;refreshYzm&quot;</span>&gt;</span>&#123;&#123;</span></span><br><span class="line"><span class="language-xml">              loginForm.yzmm</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span>登录&lt;/el-button</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; loginM &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/login&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;MyLogin&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&quot;getToken&quot;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loginForm</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yzm</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">yzmm</span>: <span class="string">&quot;6666&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">loginRules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入密码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">code</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入验证码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">codeUrl</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapActions</span>([<span class="string">&quot;setToken&quot;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginForm</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">yzm</span>.<span class="title function_">toLowerCase</span>() !==</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">yzmm</span>.<span class="title function_">toLowerCase</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;验证码有误！&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.$msgbox(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">title</span>: <span class="string">&quot;提示&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">roundButton</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">message</span>: <span class="string">&quot;验证码有误&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">showClose</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// let client = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   userAcc: this.loginForm.username,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   userPwd: this.loginForm.password</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// loginM(this.$qs.stringify(client)).then((resp) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   const data = resp.data.data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   console.log(resp)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   if (data !== null) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     window.sessionStorage.setItem(&#x27;ADMIN&#x27;, JSON.stringify(data))</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.notifySucceed(resp.data.msg)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.$router.push(&#x27;/home&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     // this.setUser(data)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     // this.isShowLogin = false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     // this.$emit(&#x27;userName&#x27;, data.userName)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.yzmm = this.$options.methods.showCode()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.$set(this.loginForm, &#x27;yzmm&#x27;, this.yzmm)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.$refs[&#x27;loginForm&#x27;].resetFields()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//     this.notifyError(&#x27;账号或密码错误&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">loginM</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">userAcc</span>: <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">userPwd</span>: <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> data = resp.<span class="property">data</span>.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(resp);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (data !== <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;ADMIN&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, data.<span class="property">token</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">setToken</span>(data.<span class="property">token</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">//   console.log(&#x27;vuex里的token&#x27; + this.getToken)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">notifySucceed</span>(resp.<span class="property">data</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// this.setUser(data)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// this.isShowLogin = false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// this.$emit(&#x27;userName&#x27;, data.userName)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">yzmm</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">methods</span>.<span class="title function_">showCode</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">loginForm</span>, <span class="string">&quot;yzmm&quot;</span>, <span class="variable language_">this</span>.<span class="property">yzmm</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;loginForm&quot;</span>].<span class="title function_">resetFields</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="title function_">notifyError</span>(<span class="string">&quot;账号或密码错误&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">refreshCode</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在这里刷新验证码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;刷新验证码&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">yzmm</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">methods</span>.<span class="title function_">showCode</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">loginForm</span>, <span class="string">&quot;yzmm&quot;</span>, <span class="variable language_">this</span>.<span class="property">yzmm</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">showCode</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> codeBox = <span class="string">&quot;23456789qwertyupasdfghjkzxcvbnmQWERTYUPASDFGHJKZXCVBNM&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> code = <span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        code += codeBox.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * codeBox.<span class="property">length</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">yzmm</span> = code;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> code;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">refreshYzm</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">yzmm</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">methods</span>.<span class="title function_">showCode</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">loginForm</span>, <span class="string">&quot;yzmm&quot;</span>, <span class="variable language_">this</span>.<span class="property">yzmm</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化时获取验证码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">refreshCode</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="home-index-vue"><a href="#home-index-vue" class="headerlink" title="home&#x2F;index.vue"></a>home&#x2F;index.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">class</span>=<span class="string">&quot;headerL&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyHeader</span>&gt;</span>&lt;/MyHeader</span></span><br><span class="line"><span class="language-xml">    &gt;<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavMenu</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Breadcrumb</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyHeader</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyHeader.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">NavMenu</span> <span class="keyword">from</span> <span class="string">&quot;@/components/NavMenu.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Breadcrumb</span> <span class="keyword">from</span> <span class="string">&quot;@/components/BreadCrumb.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">NavMenu</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Breadcrumb</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyHeader</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="home-index-index-vue"><a href="#home-index-index-vue" class="headerlink" title="home&#x2F;index&#x2F;index.vue"></a>home&#x2F;index&#x2F;index.vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @<span class="title class_">Author</span>: luckyNwa</span><br><span class="line"> * @<span class="title class_">Date</span>: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">04</span> <span class="number">10</span>:<span class="number">38</span>:<span class="number">45</span></span><br><span class="line"> * @ 这是首页</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; justify-content: space-between&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; justify-content: space-between&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">class</span>=<span class="string">&quot;oneD&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              box-shadow: 1px 1px 6px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              width: 360px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              height: 250px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              margin-right: 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              margin-bottom: 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                display: flex;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                justify-content: space-between;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                margin-top: 40px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                padding-left: 30px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                padding-right: 50px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px; font-weight: 700&quot;</span>&gt;</span>&#123;&#123;</span></span><br><span class="line"><span class="language-xml">                formattedDate</span></span><br><span class="line"><span class="language-xml">              &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  margin-top: 2px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  color: #5da6f8;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  font-weight: 700;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  font-size: 14px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &gt;</span>1月18日<span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span>星期一&lt;/span</span></span><br><span class="line"><span class="language-xml">              &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; justify-content: space-between&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 40px; margin-top: 40px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">:src</span>=<span class="string">&quot;codeImg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">style</span>=<span class="string">&quot;border-radius: 7px; width: 80px; height: 80px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 25px; margin-top: 10px&quot;</span>&gt;</span>四仔<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px; margin-right: 130px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;padding-top: 10px; padding-bottom: 4px&quot;</span>&gt;</span>公司：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 4px&quot;</span>&gt;</span>年假:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 4px&quot;</span>&gt;</span>出差:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 4px&quot;</span>&gt;</span>外出:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">class</span>=<span class="string">&quot;twoD&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              box-shadow: 1px 1px 6px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              width: 400px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              margin-right: 30px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              height: 250px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                font-weight: 800;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                margin-top: 10px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                padding-bottom: 10px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                border-bottom: 2px solid #f3f3f4;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 12px&quot;</span>&gt;</span>常用功能<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                display: flex;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                justify-content: left;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                padding-top: 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                padding-left: 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;goToWeek&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">:src</span>=<span class="string">&quot;weekImg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">style</span>=<span class="string">&quot;border-radius: 7px; width: 40px; height: 40px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                      margin-left: 6px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                      background-color: white;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                      border: none;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &gt;</span></span></span><br><span class="line"><span class="language-xml">                    周报</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;threeD&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&quot;height: 340px; width: 780px; box-shadow: 1px 1px 6px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              font-weight: 700;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              padding-top: 15px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              padding-bottom: 10px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              border-bottom: 2px solid #f3f3f4;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 12px&quot;</span>&gt;</span>人员登录记录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 15px 10px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:data</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                tableData.slice(</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  (currentPage - 1) * pageSize,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  currentPage * pageSize</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                )</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                width: 100%;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                border: 2px solid #ebeef5;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                border-color: #868686;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:header-cell-style</span>=<span class="string">&quot;tableHeaderCellStyle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">border</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:cell-style</span>=<span class="string">&quot;tableCellStyle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">prop</span>=<span class="string">&quot;createBy&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&quot;登录名称&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">width</span>=<span class="string">&quot;120&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">sortable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;requestIp&quot;</span> <span class="attr">label</span>=<span class="string">&quot;登录地址&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;logSys&quot;</span> <span class="attr">label</span>=<span class="string">&quot;操作系统&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;logBrowser&quot;</span> <span class="attr">label</span>=<span class="string">&quot;浏览器&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;logTip&quot;</span> <span class="attr">label</span>=<span class="string">&quot;提示消息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">prop</span>=<span class="string">&quot;createDate&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&quot;访问时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">width</span>=<span class="string">&quot;141&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">sortable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 15px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:page-sizes</span>=<span class="string">&quot;[1, 3]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:total</span>=<span class="string">&quot;tableData.length&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; box-shadow: 1px 1px 6px; margin-bottom: 20px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-calendar</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-calendar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;box-shadow: 1px 1px 6px; height: 70px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            font-weight: 700;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            padding-top: 10px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            padding-left: 10px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            padding-bottom: 9px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            border-bottom: 2px solid #f3f3f4;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          &quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          公司公告</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getLogList &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">timeS</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">codeImg</span>: <span class="built_in">require</span>(<span class="string">&quot;@/assets/img/sizai.png&quot;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">weekImg</span>: <span class="built_in">require</span>(<span class="string">&quot;@/assets/img/week.png&quot;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">tableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">currentPage</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">pageSize</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">total</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">logList</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      _this.<span class="property">timeS</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">formattedDate</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> date = <span class="variable language_">this</span>.<span class="property">timeS</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> hours = date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> minutes = date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> seconds = date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> hours + <span class="string">&quot;:&quot;</span> + minutes + <span class="string">&quot;:&quot;</span> + seconds;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">goToWeek</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/myWeekly&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">logList</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getLogList</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">userId</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;ADMIN&quot;</span>)).<span class="property">userId</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">page</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">limit</span>: <span class="number">1000</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$data</span>.<span class="property">tableData</span> = resp.<span class="property">data</span>.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 每页条数改变时触发，选中一页显示多少行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页<span class="subst">$&#123;val&#125;</span>条`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">pageSize</span> = val;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleClick</span>(<span class="params">row</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$data</span>.<span class="property">drawe</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$data</span>.<span class="property">userObj</span> = row;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页:<span class="subst">$&#123;val&#125;</span>`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = val;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">tableHeaderCellStyle</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="string">&quot;border-color: #868686; color: #606266;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">tableCellStyle</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="string">&quot;border-color: #868686;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.cell</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.el-calendar-table</span> <span class="selector-class">.el-calendar-day</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">25px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.el-calendar__title</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#888888</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.el-icon-tickets</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  size: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/post/6184.html</url>
    <content><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p><a href="https://blog.csdn.net/Y_hanxiong/article/details/127261296">Elasticsearch 硬核入门教程（2022 最全）<em>elasticsearch 教程</em>小熊学 Java 的博客-CSDN 博客</a></p>
<p>版本 elasticsearch-7.0.0 太高会不支持 jkd8</p>
<ul>
<li>运行软件目录下的 bin 文件夹下的 elasticsearch.bat</li>
</ul>
<ul>
<li><code>9300</code> 端口为 Elastic s earch 集群间组件的通信端口，</li>
<li><code>9200</code> 端口为浏览器访问的 http 协议 RESTful 端口。</li>
</ul>
<ul>
<li><p>浏览器运行<a href="http://localhost:9200/">localhost:9200</a></p>
</li>
<li><p>出现”tagline”: “You Know, for Search”就成功</p>
</li>
</ul>
<p>概念类比：</p>
<p><img src="http://120.26.80.35:3737/mdS/es.png" alt="图片1"></p>
<p>Elasticsearch 7.X 中 , Type 的概念已经被删除了</p>
<h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>用 postman 软件进行下面操作</p>
<p>put 请求下面链接即可无参</p>
<p><a href="http://127.0.0.1:9200/start">http://127.0.0.1:9200/start</a></p>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shards_acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot; 【响应结果】 : true, # true 操作成功</span></span><br><span class="line"><span class="string"> &quot;</span>shards_ 【分片结果】 <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> # 分片操作成功</span><br><span class="line"> <span class="string">&quot; 【索引名称】 : &quot;</span></span><br><span class="line"> # 注意：创建索引库的分片数默认 <span class="number">1</span> 片，在 <span class="number">7.0</span><span class="number">.0</span> 之前的 Elasticsearch 版本中，默认 <span class="number">5</span> 片</span><br></pre></td></tr></table></figure>

<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>向 ES 服务器发 GET 请求 <a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p>
<p>这里请求路径中的 _cat 表示查看的意思， indices 表示索引，所以整体含义就是查看当前 ES 服务器中的所有索引，就好像 MySQL 中的 show tables ,返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   start 9cGmSfZ_TxyUiI1Gl9BiAw   1   1          0            0       230b           230b</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://120.26.80.35:3737/mdS/Snipaste_2023-07-20_10-01-23.png" alt="Snipaste_2023-07-20_10-01-23"></p>
<h3 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h3><p>GET 请求 <a href="http://127.0.0.1:9200/start">http://127.0.0.1:9200/start</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;creation_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1689818229673&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9cGmSfZ_TxyUiI1Gl9BiAw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7000099&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;provided_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解析</span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="string">&quot;start&quot;</span>【索引名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="string">&quot;aliases&quot;</span>【别名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;mappings&quot;</span>【映射】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="string">&quot;settings&quot;</span>【设置】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="string">&quot;index&quot;</span>【设置-索引】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;allocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                         <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                             <span class="attr">&quot;_tier_preference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">                         <span class="punctuation">&#125;</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                 <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;number_of_shards&quot;</span>【设置-索引-主分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;provided_name&quot;</span>【名称】<span class="punctuation">:</span> <span class="string">&quot;start&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;creation_date&quot;</span>【创建时间】<span class="punctuation">:</span> <span class="string">&quot;1624440317651&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;number_of_replicas&quot;</span>【设置-索引-副分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;uuid&quot;</span>【唯一标识】<span class="punctuation">:</span> <span class="string">&quot;5tI3rmvvQsKJISZ8GDR-YQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="string">&quot;version&quot;</span>【设置-索引-版本】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7130299&quot;</span></span><br><span class="line">                 <span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>发 DELETE 请求 <a href="http://127.0.0.1:9200/start">http://127.0.0.1:9200/start</a></p>
<h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式</p>
<p>在 Postman 中，向 ES 服务器发 POST 请求 <a href="http://127.0.0.1:9200/start/doc">http://127.0.0.1:9200/start/doc</a></p>
<p>如果想要自定义唯一性标识，需要在创建时指定<a href="http://127.0.0.1:9200/start/doc/1">http://127.0.0.1:9200/start/doc/1</a></p>
<p>需要 body—-&gt;row—-&gt;json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span><span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.xiaobear.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">36666.00</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">返回结果</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LopVcYkBQUfrnphKjG1q&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解析</span><br><span class="line"> &#123;</span><br><span class="line">     &quot;_index&quot;【索引】: &quot;start&quot;,</span><br><span class="line">     &quot;_type&quot;【类型-文档】: &quot;doc&quot;,</span><br><span class="line">     &quot;_id&quot;【唯一标识】: &quot;iY9GOHoBucAyibLJ1Bbq&quot;,#可以类比为 MySQL 中的主键，随机生成</span><br><span class="line">     &quot;_version&quot;【版本号】: 1,</span><br><span class="line">     &quot;result&quot;【结果】: &quot;created&quot;, #这里的 create 表示创建成功</span><br><span class="line">     &quot;_shards&quot;【分片】: &#123;</span><br><span class="line">         &quot;total&quot;【分片-总数】: 2,</span><br><span class="line">         &quot;successful&quot;【分片-成功】: 1,</span><br><span class="line">         &quot;failed&quot;【分片-s】: 0</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;_seq_no&quot;: 1,</span><br><span class="line">     &quot;_primary_term&quot;: 1</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><p>POST 请求 <a href="http://127.0.0.1:9200/start/_doc/1">http://127.0.0.1:9200/start/_doc/1</a></p>
<p>如果请求体变化，会将原有的数据内容覆盖 在 Postman 中，并且版本变化</p>
<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><p>POST 请求 <a href="http://127.0.0.1:9200/start/_update/1">http://127.0.0.1:9200/start/_update/1</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;doc&quot;: &#123;</span><br><span class="line">    &quot;price&quot;:5000.00</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h3><p>根据唯一性标识，查询文档数据，文档数据已经更新</p>
<p>GET 请求 <a href="http://127.0.0.1:9200/start/_doc/1">http://127.0.0.1:9200/start/_doc/1</a></p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>ES 服务器发 DELETE 请求 <a href="http://127.0.0.1:9200/start/_doc/1">http://127.0.0.1:9200/start/_doc/1</a></p>
<p>一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数据进行删除</p>
<p>POST 请求 <a href="http://127.0.0.1:9200/start/_delete_by_query">http://127.0.0.1:9200/start/_delete_by_query</a> 这个是按条件删除</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3999.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h2><p>有了索引库，等于有了数据库中的 database 。</p>
<p>接下来就需要建索引库(index)中的映射了，类似于数据库 (database)中的表结构 (table)。创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射 (mapping)。</p>
<h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><p>先创建索引才能映射，<a href="http://localhost:9200/user">http://localhost:9200/user</a> PUT 请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PUT 请求<a href="http://127.0.0.1:9200/user/_mapping">http://127.0.0.1:9200/user/_mapping</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>映射数据说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段名：任意填写，下面指定许多属性，例如： title 、 subtitle 、 images 、 price</span><br><span class="line"></span><br><span class="line">type ：类型 Elasticsearch 中支持的数据类型非常丰富，说几个关键的：</span><br><span class="line"></span><br><span class="line">基本数据类型：long 、 integer 、 short 、 byte 、 double 、 float 、 half_float</span><br><span class="line"></span><br><span class="line">浮点数的高精度类型：scaled_float</span><br><span class="line"></span><br><span class="line">text：可分词</span><br><span class="line"></span><br><span class="line">keyword：不可分词，数据会作为完整字段进行匹配</span><br><span class="line"></span><br><span class="line">String 类型，又分两种：</span><br><span class="line"></span><br><span class="line">Numerical ：数值类型，分两类</span><br><span class="line"></span><br><span class="line">Date ：日期类型</span><br><span class="line"></span><br><span class="line">Array ：数组类型</span><br><span class="line"></span><br><span class="line">Object ：对象</span><br><span class="line"></span><br><span class="line">index ：是否索引，默认为 true ，也就是说你不进行任何配置，所有字段都会被索引。</span><br><span class="line"></span><br><span class="line">true：字段会被索引，则可以用来进行搜索</span><br><span class="line"></span><br><span class="line">false：字段不会被索引，不能用来搜索</span><br><span class="line"></span><br><span class="line">store ：是否将数据进行独立存储，默认为 false</span><br><span class="line"></span><br><span class="line">原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从 _source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置&quot;store&quot;: true 即可，获取独立存储的字段要比从 _source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</span><br><span class="line"></span><br><span class="line">analyzer ：分词器，这里的 ik_max_word 即使用 ik 分词器</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h3><p>在 Postman 中，向 ES 服务器发 GET 请求<a href="http://127.0.0.1:9200/user/_mapping">http://127.0.0.1:9200/user/_mapping</a></p>
<h3 id="索引映射关联"><a href="#索引映射关联" class="headerlink" title="索引映射关联"></a>索引映射关联</h3><p>PUT 请求 <a href="http://127.0.0.1:9200/user1">http://127.0.0.1:9200/user1</a></p>
<h2 id="Idea-操作"><a href="#Idea-操作" class="headerlink" title="Idea 操作"></a>Idea 操作</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建单元测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElstaicSearch</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//9200 端口为 Elastic s earch 的 Web 通信端口 localhost 为启动 ES 服务的主机名</span></span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>)));</span><br><span class="line">        client.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没有任何输出或报错信息即是成功</p>
<h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//9200 端口为 Elastic s earch 的 Web 通信端口 localhost 为启动 ES 服务的主机名</span></span><br><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">        RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>)));</span><br><span class="line"><span class="comment">//创建索引</span></span><br><span class="line"><span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line"><span class="type">CreateIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//创建索引的响应状态</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">acknowledged</span> <span class="operator">=</span> response.isAcknowledged();</span><br><span class="line">System.out.println(<span class="string">&quot;响应状态为：&quot;</span> + acknowledged);</span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询索引</span></span><br><span class="line"><span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>().indices(<span class="string">&quot;pic&quot;</span>);</span><br><span class="line"><span class="type">GetIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().get(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//查询索引的响应状态</span></span><br><span class="line">System.out.println(response);</span><br><span class="line">System.out.println(response.getSettings());</span><br><span class="line">System.out.println(response.getAliases());</span><br><span class="line">System.out.println(response.getMappings());</span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure>

<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="创建索引-2"><a href="#创建索引-2" class="headerlink" title="创建索引"></a>创建索引</h2><p>在 kibana 的可视化下的开发工具里运行</p>
<p>进入<a href="http://192.168.56.10:5601/app/management/kibana/spaces">http://192.168.56.10:5601/app/management/kibana/spaces</a></p>
<p>点击 D—-&gt;看到索引管理</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /course-publish</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;companyId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;companyName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mtName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;st&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;teachmode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createDate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;charge&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scaled_float&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scaling_factor&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;originalPrice&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scaled_float&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scaling_factor&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;validDays&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /course-publish</span><br></pre></td></tr></table></figure>

<h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_cat/indices?v                     查询所有的索引</span><br><span class="line">GET /course-publish/_mapping            查询course-publish的索引结构</span><br><span class="line">GET course-publish                      查询单个索引</span><br></pre></td></tr></table></figure>

<h2 id="创建文档-1"><a href="#创建文档-1" class="headerlink" title="创建文档"></a>创建文档</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /course-publish/_doc/<span class="number">103</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;charge&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;201001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyId&quot;</span> <span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;北京黑马程序&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2022-09-25 09:36:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HTML/CSS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grade&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;204001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mt&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mtName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;前端开发&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Html参考大全&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;originalPrice&quot;</span> <span class="punctuation">:</span> <span class="number">200.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pic&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/mediafiles/2022/09/20/e726b71ba99c70e8c9d2850c2a7019d7.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">100.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;没有备注&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;st&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1-1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HTML/CSS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;203002&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;没有标签&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;teachmode&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;200002&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;validDays&quot;</span> <span class="punctuation">:</span> <span class="number">222</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /course-publish/_doc/103</span><br></pre></td></tr></table></figure>

<h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>更新文档分为全量更新和局部更新。</p>
<p>全量更新是指先删除再更新，语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /course-publish/_doc/<span class="number">103</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span>   <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span>   <span class="comment">// ... 略 &#125;</span></span><br></pre></td></tr></table></figure>

<p>局部更新语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST /&#123;索引库名&#125;/_update/文档id &#123;   &quot;doc&quot;: &#123; &quot;字段名&quot;: &quot;新的值&quot;,  &#125; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a><strong>删除文档</strong></h2><p>删除文档将从索引中删除文档的记录。</p>
<p>语法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DELETE /&#123;索引库名&#125;/_doc/id值</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的使用</title>
    <url>/post/6724.html</url>
    <content><![CDATA[<p>git 软件链接：<a href="https://pan.baidu.com/s/1XaG8mcIjMwNtlC1w_FLyMg?pwd=6666">https://pan.baidu.com/s/1XaG8mcIjMwNtlC1w_FLyMg?pwd=6666</a><br>提取码：6666<br>–来自百度网盘超级会员 V1 的分享 git 软件，默认安装就行</p>
<h1 id="了解知识"><a href="#了解知识" class="headerlink" title="了解知识"></a>了解知识</h1><p>(1)工作区：处理工作区域 ，状态四种如下<br>未被 git 管理 未跟踪(2 个红？？)<br>已被管理里 3 种<br>未修改<br>已修改（工作区文件和仓库不一样,红色 M，放入暂存区变绿 M）<br>已暂存(git add)</p>
<p>(2)暂存区：已完成工作的临时存放区域，等待被提交</p>
<p>(3)git 仓库： 最终提交的区域(git commit -m “这里是备注”)</p>
<h1 id="文件夹关联-github"><a href="#文件夹关联-github" class="headerlink" title="文件夹关联 github"></a>文件夹关联 github</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、先去桌面空白右键git bash 打开git终端 ，下面换成自己的账号名和邮箱</span><br><span class="line">git config --global user.name &quot;luckyNwa&quot;</span><br><span class="line">git config --global user.email &quot;1656213092@qq.com&quot;</span><br><span class="line">git config --global user.email &quot;2428284043@qq.com&quot;</span><br><span class="line">查看是否有配置 git config user.name  || git config user.email</span><br><span class="line"></span><br><span class="line">2、然后去需要的项目文件夹那右键，打开git bash，git init  初始化项目</span><br><span class="line"></span><br><span class="line">3、查当前目录状态 git status  或者加个 -s  发现是未跟踪文件是2个红？？</span><br><span class="line"></span><br><span class="line">4、然后git add 文件名带后缀 跟踪它加入缓存区   一次性添加多个暂存区  git add .</span><br><span class="line"></span><br><span class="line">5、git commit -m &quot;这里是备注&quot;</span><br><span class="line"></span><br><span class="line">6、github上创建一个仓库,然后配置SSH，这样每次访问github不需要输入密码,创建的仓库下面的代码选择ssh关联，如下</span><br><span class="line">…or create a new repository on the command line</span><br><span class="line">echo &quot;# springcloud-demo&quot; &gt;&gt; README.md    创建md文档内容引号里的</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:luckyaaaa/springcloud-demo.git</span><br><span class="line">git push -u origin main</span><br><span class="line">由于前面我们已经init文件夹并且提交给git，所以选择下面这种，关联github仓库</span><br><span class="line">…or push an existing repository from the command line</span><br><span class="line">git remote add origin git@github.com:luckyaaaa/springcloud-demo.git   关联</span><br><span class="line">git branch -M main            设置分支</span><br><span class="line">git push -u origin main         第一次推送</span><br><span class="line"></span><br><span class="line">7、当本地新增的一个文件，并且提交给git，但是github是不会更新的，需要</span><br><span class="line">git push   将最新的本地仓库推送给远程</span><br></pre></td></tr></table></figure>

<h1 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h1><p>1、打开 git bash 粘贴下面代码，邮箱记得改自己的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;1656213092@qq.com&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;2428284043@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p>然后回车 3 次 生成文件在 C:\Users\Administrator\.ssh 中打开 id_rsa.pub 复制里面内容</p>
<p>2、登录 github 点头像-setting-ssh and… -New SSH key</p>
<p>将刚刚复制的粘贴到 key 对应文本框 在 title 文本框里任意写一个名称</p>
<p>3、在 bash 里输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>在输入 yes 就会欢迎，配置成功</p>
<h1 id="idea-关联-github"><a href="#idea-关联-github" class="headerlink" title="idea 关联 github"></a>idea 关联 github</h1><p>1、idea 推送到远程</p>
<p>(1)idea 里点击设置，搜 git 路径，File | Settings | Version Control | Git，配置 path to git executable 路径就是 git.exe 的位置,然后保存</p>
<p>(2)点击 VCS-&gt;import into …-&gt;create Git… 初始化 git 仓库，弹框里选择这个项目即可<br>，项目右上角出现 Git 和 2 个箭头，左边拉取，右边提交</p>
<p>(3)在 github 上创建一个空白仓库,保存 ssh 的链接</p>
<p>(4)IDEA 里选择右边提交，左边那些暂存区的全部勾选即可，因为不需要的都被.gitignore 忽略了。Message 里写一下备注,在点击 Commit。都选确定，点击左下 vesion control 里 log，看记录</p>
<p>(5)VCS-&gt;git-&gt;push 在点击 define remote 默认 origin，再把 ssh 地址贴上，点击 ok，在点击 push，就关联远程仓库</p>
<p>(6)代码发生变化，点击提交右边那个，写一下备注，点击 commit 的下拉选项里的 and push，因为第一次没有远程仓库所以 commit。有就点第二个，即提交并推送</p>
<p>(7)多人出现冲突情况,A 可以提交成功并且推送到了远程仓库,B 先 commit 保存到 git 仓库，不 push。工作时候先 pull 再 push，就是点击拉取左边那个。选默认 ok。会弹出合并时候有冲突。先 close 弹框。冲突的会爆红，发现 head 是当前，已经远程的，删掉修改成想要的，将爆红这个类右键 git-&gt;add 一下。再右边按键 push，A 再 pull 就拿到最新的</p>
<p>(8)分支创建点击 idea 右下角 git：master，创建删除啥的都有，最好是在 log 里面直接需要的地方右键</p>
<p>(9)可以配置 idea 终端为 bash 终端 setting 里搜 Terminal,把 shell path 改成 bash.exe 路径</p>
<p>2、远程克隆到本地，复制远程的克隆的 ssh<br>VCS-&gt;checkout…-&gt;git-&gt;输入 ssh 的 url，然后看提示吧，可以新的项目打开</p>
<h1 id="vscode-关联-github"><a href="#vscode-关联-github" class="headerlink" title="vscode 关联 github"></a>vscode 关联 github</h1><p>1、vscode 打开文件夹，点击右边侧边栏源代码关联那个地方，初始化仓库<br>2、点击文件右边的加号，就是加入暂存区，输入提交的备注，点击提交到 git 仓库<br>3、当你文件内容修改，那个文件旁边出现 M,+暂存更改，另个返回,右上角…里的内联视图可以在一个页面里看到<br>4、想把分支关联到 github 上，点击源代码关联旁边…点击远程-远程库，输入 url，绑定，在 push 上去就行了</p>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -a -m &quot;备注&quot;  直接从工作区-&gt;git仓库</span><br><span class="line">git rm -f 文件名  git仓库和工作区同时移除 查看这个文件状态可以看到是D</span><br><span class="line">git rm --cached 文件名  只从git仓库移除，工作区会保留 将不在跟踪 还需要push一下远程也删</span><br><span class="line">git log 查看历史记录</span><br><span class="line">clear 清空终端</span><br><span class="line">git clone 远程仓库的地址</span><br><span class="line">git clone -b 分支名 地址 // 克隆分支的代码到本地</span><br><span class="line">git status -s // 查看状态</span><br><span class="line">git push --force-with-lease origin 本地分支名:远端分支名   强推送</span><br><span class="line"></span><br><span class="line">git push -u origin master  和远程分支关联</span><br><span class="line"></span><br><span class="line">分支相关</span><br><span class="line">git branch 查看git仓库所有分支列表 *表当前处于</span><br><span class="line">git branch 新分支名称    基于当前所处分支创建，此时新分支代码和当前分支一样</span><br><span class="line">git checkout 分支名称  切换分支</span><br><span class="line">git checkout -b 分支名称  创建并切换到该分支</span><br><span class="line">git checkout master 切换到主分支再合并其他分支 git merge 其他分支名称</span><br><span class="line">git branch -d 分支名称 删除指定分支,需要在别的分支上</span><br><span class="line">git push -u 远程仓库名称(默认origin) 本地分支名称   或者加 ：远程分支名称 不加默认</span><br><span class="line">git remote show origin  查看远程仓库所有的分支列表</span><br><span class="line">git checkout 远程分支名称 将远程的分支下载到本地</span><br><span class="line">git checkout -b 新名称  origin/远程分支名称  将远程分支弄到本地并且换个名称</span><br><span class="line">git pull 将远程分支最新代码拉取到本地</span><br><span class="line">git push origin --delete 远程分支名称  删除远程分支 把--delete换-D强制删除</span><br><span class="line">git merge 合并分支</span><br></pre></td></tr></table></figure>

<h1 id="gitee-使用"><a href="#gitee-使用" class="headerlink" title="gitee 使用"></a>gitee 使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add oringin 仓库地址  绑定远程仓库</span><br><span class="line">git checkout -b develop  创建本地和远程一样的分支</span><br><span class="line">git pull oringin develop    把要的拿下来</span><br><span class="line"></span><br><span class="line">gid add .</span><br><span class="line">git commit -m &#x27;备注</span><br><span class="line">git push oringin 分支名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我删除了本来C:\Users\Administrator\.ssh目录，重新生成</span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line">pub文件，将内容复制到gitee和github的ssh中保存：</span><br><span class="line">https://gitee.com/profile/sshkeys</span><br><span class="line">https://github.com/settings/keys</span><br><span class="line"></span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">都yes成功</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br><span class="line">因为两个根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并</span><br><span class="line"></span><br><span class="line">解决方案一</span><br><span class="line">git clone远程仓库到本地，将需要推送的内容放到该仓库下，然后提交上去，这样算是一次update操作</span><br><span class="line"></span><br><span class="line">解决方案二</span><br><span class="line">使用强制合并</span><br><span class="line">github指令：git pull origin master --allow-unrelated-historie</span><br><span class="line">gitee指令：git pull oringin master --allow-unrelated-historie</span><br><span class="line">先ESC，然后敲:q!  再回车</span><br><span class="line">再push就ok,  git push -u origin master   git push -u oringin master</span><br><span class="line">如果不行就是没有解决掉分支问题，强行推送覆盖</span><br><span class="line">git push --force-with-lease origin 本地分支名:远端分支名   强推送</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    Can&#x27;t Update</span><br><span class="line">        No tracked branch configured for branch develop or the branch doesn&#x27;t exist.</span><br><span class="line">        To make your branch track a remote branch call, for example,</span><br><span class="line">        git branch --set-upstream-to=origin/develop develop (show balloon)</span><br><span class="line"></span><br><span class="line">    别人上传到远程仓库后，你没有及时的同步（拉取）到本地，但是你同时又添加了一些内容（提交），以致于你在提交时，它会检测到你之前从远程仓库拉取的时候的仓库状态和现在的不一样。于是，它为了安全起见拒绝了你的提交（然后就报了这个错误）。</span><br><span class="line"></span><br><span class="line">方法1、先合并之前的历史，再进行提交——提倡使用</span><br><span class="line">（1）先把git的东西fetch到你本地然后merge后再push</span><br><span class="line">git fetch oringin develop</span><br><span class="line">git merge oringin FETCH_HEAD</span><br><span class="line">先抓取远程仓库的更新到本地，然后与你的本地仓库合并，（如果有冲突就要解决冲突后再合并，冲突问题比较复杂，这里就不详细说了），这样就可以使远程仓库和你本地仓库一致了，然后就可以提交修改了。</span><br><span class="line">（2）这2句命令等价于</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull oringin develop</span></span><br><span class="line">但是使用git fetch + git merge 更加安全。</span><br><span class="line">（3）git pull --rebase oringin develop</span><br><span class="line">重定基，可以是历史更加统一，即使提交历史趋向于一条直线。</span><br><span class="line"></span><br><span class="line">补充：他们之间的关系</span><br><span class="line">git pull = git fetch + git merge FETCH_HEAD</span><br><span class="line">git pull --rebase =  git fetch + git rebase FETCH_HEAD</span><br><span class="line"></span><br><span class="line">方法2、丢弃之前的历史，强推——谨慎使用</span><br><span class="line">强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -f  或者 $ git push --force</span></span><br><span class="line"></span><br><span class="line">官方文档提示：This flag disables these checks, and can cause the remote repository to lose commits; use it with care.（即：此标志禁用这些检查，并可能导致远程存储库丢失提交；小心使用。）</span><br><span class="line"></span><br><span class="line">俗话说得好：“强扭的瓜不甜”，强制（暴力）执行总会产生一些不好的结果，应慎重考虑是否使用该命令！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="GitHub-部署静态网站"><a href="#GitHub-部署静态网站" class="headerlink" title="GitHub 部署静态网站"></a>GitHub 部署静态网站</h1><p>1、部署到自己 2428 的号上面，账号就叫 luckyNwa</p>
<p>2、测试本地 git 环境，直接 ssh 覆盖比较快</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;2428284043@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p>3、创建 luckyNwa.github.io 仓库，到时候直接这个网站访问</p>
<p>4、去 setting—&gt;ssh—-&gt;删除旧的新增一个—–&gt;复制 C:\Users\FF.ssh 里 pub 文件到配置那</p>
<p>5、hexo d 同步</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/post/13712.html</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>IO 流：按照流动的方向，以内存为基准，分为输入 input 和输出 output ，即流向内存是输入流，流出内存的输出流</p>
<p>（1）明确要操作的数据是数据源还是数据目的(也就是要读还是要写)<br>（2）明确要操作的设备上的数据是字节还是文本<br>（3）明确数据所在的具体设备<br>（4）明确是否需要额外功能（比如是否需要转换流、高效流等）</p>
<p>输入流（读数据）、输出流（写数据）</p>
<p>分类：</p>
<p>1.字节流：字节流又分为字节输入流、字节输出流 2.字符流：字符流由分为字符输入流、字符输出流</p>
<p>字符流的由来：因为数据编码的不同，字节流直接读中文会乱码 字符流 &#x3D; 字节流 + 编码表</p>
<h1 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h1><p>java.io.File 类是专门对文件进行操作的类，只能对文件本身进行操作，不能对文件进行读和写也就是输入和输出</p>
<p>File 类构造方法不会给你检验这个文件或文件夹是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响 File 对象的创建。</p>
<p>下面一个测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/8/10 -10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\FF\\Desktop\\1.txt&quot;</span>);  <span class="comment">//就算文件1.txt不存在也不影响file对象的创建</span></span><br><span class="line">        <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile()); <span class="comment">// true 如果没有文件则创建并返回true</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile());  <span class="comment">//已经存在，所以就false了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径:&quot;</span>+f.getAbsolutePath());<span class="comment">//文件绝对路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径:&quot;</span>+f.getPath());        <span class="comment">//文件构造路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称:&quot;</span>+f.getName());          <span class="comment">//文件名称:1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span>+f.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件:&quot;</span>+f.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录:&quot;</span>+f.isDirectory());</span><br><span class="line">        <span class="comment">//一个路径下全部文件名,先将字符串转目录</span></span><br><span class="line"><span class="comment">//        String path = &quot;D:\\workspace&quot;;</span></span><br><span class="line"><span class="comment">//        File file = new File(path);</span></span><br><span class="line"><span class="comment">//        printFile(file);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果1   传进的file不一样结果不一样，如果是绝对位置那么构造啥的都是绝对的</span></span><br><span class="line"><span class="comment">//    是否创建:false</span></span><br><span class="line"><span class="comment">//    文件绝对路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line"><span class="comment">//    文件构造路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line"><span class="comment">//    文件名称:1.txt</span></span><br><span class="line"><span class="comment">//    文件长度:0字节</span></span><br><span class="line"><span class="comment">//    文件:true</span></span><br><span class="line"><span class="comment">//    目录:false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果2 如果是直接1.txt则会相对这个项目来创建这个文件</span></span><br><span class="line"><span class="comment">//    是否创建:true</span></span><br><span class="line"><span class="comment">//    是否创建:false</span></span><br><span class="line"><span class="comment">//    文件绝对路径:E:\LuckyWorckSpace\lucky_api\1.txt</span></span><br><span class="line"><span class="comment">//    文件构造路径:1.txt</span></span><br><span class="line"><span class="comment">//    文件名称:1.txt</span></span><br><span class="line"><span class="comment">//    文件长度:0字节</span></span><br><span class="line"><span class="comment">//    文件:true</span></span><br><span class="line"><span class="comment">//    目录:false</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo2</span><span class="params">()</span> &#123;   <span class="comment">//目录的创建等,使用相对这个项目下的目录来测试了</span></span><br><span class="line">        <span class="comment">// 目录的创建</span></span><br><span class="line">        File f2= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否存在:&quot;+f2.exists());// false</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否创建:&quot;+f2.mkdir());	//  这个是创建的意思，并返回true</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否存在:&quot;+f2.exists());// true</span></span><br><span class="line">        <span class="comment">// 创建多级目录</span></span><br><span class="line"><span class="comment">//        File f3= new File(&quot;newDira\\newDirb&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());// false，没有加s指南创建单层的目录</span></span><br><span class="line">        File f4= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">  <span class="comment">//      System.out.println(f4.mkdirs());// true,可以创建多级别的目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件和目录的删除  delete方法，如果此File表示目录，则目录必须为空才能删除。</span></span><br><span class="line">      <span class="comment">//  System.out.println(f2.delete());// true</span></span><br><span class="line">   <span class="comment">//     System.out.println(f4.delete());// false如果是删除多层目录只能删除最底层的比如这个的newDirb目录，外newDira没有删掉</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\other\\study\\学习sp\\实用篇&quot;</span>);</span><br><span class="line">        printFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="comment">//        //获取当前目录下的文件以及文件夹的名称。</span></span><br><span class="line"><span class="comment">//        File[] files = file.listFiles();</span></span><br><span class="line"><span class="comment">//        for (File a:files) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if (a.isFile()) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println( a.getName());</span></span><br><span class="line"><span class="comment">//            &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                printFile(a);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //下面的只获取一层，上面是里面全部获取</span></span><br><span class="line"><span class="comment">//        String[] names = file.list();</span></span><br><span class="line"><span class="comment">//        for(String name : names)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(name);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span><br><span class="line"><span class="comment">//        File[] files = file.listFiles(); //listFiles指定的必须是目录。否则容易引发返回数组为null，出现NullPointerException异常</span></span><br><span class="line"><span class="comment">//        for (File fi : files) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(fi);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        递归全部</span></span><br><span class="line">        <span class="comment">//1、判断传入的是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line">            <span class="comment">//不是目录直接退出</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已经确保了传入的file是目录</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">//遍历files</span></span><br><span class="line">        <span class="keyword">for</span> (File f: files) &#123;</span><br><span class="line">            <span class="comment">//如果该目录下文件还是个文件夹就再进行递归遍历其子目录</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                printFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果该目录下文件是个文件，则打印对应的名字</span></span><br><span class="line">                System.out.println(f.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//从d盘下的a.txt文件拷贝到另个盘下</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\workspace\\a.txt&quot;</span>);<span class="comment">//这是源文件</span></span><br><span class="line">            <span class="type">long</span> flen=file1.length();</span><br><span class="line">            System.out.println(<span class="string">&quot;源文件的大小是&quot;</span>+flen+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\workspace\\b.txt&quot;</span>);<span class="comment">//这是复制到的地方</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//这是1兆1兆传</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> readSize=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;<span class="comment">//-1就是最后一个结束</span></span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len); <span class="comment">//比如一个文件是1024*8+244，那么len就是244</span></span><br><span class="line">                fos.flush();<span class="comment">//强制输出，推送数据</span></span><br><span class="line">                readSize+=len;</span><br><span class="line">                <span class="keyword">if</span> (readSize== flen) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;读的大小&quot;</span>+readSize+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\1.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\222.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file1);</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> (bis.read(bytes) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes);</span><br><span class="line">                fos.flush();</span><br><span class="line">                System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h1><p>数据流向内存就是输入流，流出内存就是输出流，根据数据的类型分为</p>
<p>字节流和字符流，如名字的为单位</p>
<p>字节流对应的输入流 InputStream 输出流 OutputStream</p>
<p>字符流对应的输入流 Reader 输出流 Writer</p>
<p>超类（父类）以这四个名称结尾都是它的子类</p>
<p>比如常见的 FileInputStream 文件输入流</p>
<p>1 个字符&#x3D;2 个字节</p>
<p>字节流适合读取视频、音乐、图片等二进制文件，字符流比较适合读取纯文本文件</p>
<p>字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据</p>
<h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;abc.txt&quot;</span>);</span><br><span class="line">这行代码做了下面的事情</span><br><span class="line"><span class="number">1</span>、调用系统功能去创建文件【输出流对象才会自动创建】</span><br><span class="line"><span class="number">2</span>、创建outputStream对象</span><br><span class="line"><span class="number">3</span>、把foutputStream对象指向这个文件</span><br></pre></td></tr></table></figure>

<p>创建输出流对象的时候，系统会自动去对应位置创建对应文件，而创建输出流对象的时候，文件不存在则会报 FileNotFoundException 异常，也就是系统找不到指定的文件异常。</p>
<p>当你创建一个流对象时，必须直接或者间接传入一个文件路径。比如现在我们创建一个 FileOutputStream 流对象，在该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据</p>
<p><strong>为什么是输入流呢</strong></p>
<p>1、因为流是相对于内存来说的，现在 abc.txt 就是要保存到磁盘里面的文本，就是说从内存—-&gt;磁盘，那必须是输出流，用 FileWrite 和 FileOutputStream 都可以</p>
<p>2、传入路径时候是它的一种构造方法，不会继续写到文本中，所以用它的另外的构造函数即可解决这个问题。</p>
<ul>
<li><p>public FileOutputStream(File file, boolean append) 一般不需要用这个，因为文件创建，输出流自动会帮我们生成，没必要多此一举暂时</p>
</li>
<li><p>public FileOutputStream(String name, boolean append) true 表示追加数据</p>
</li>
</ul>
<p>Windows 系统里，每行结尾是 回车+换行 ，即\r\n；<br>Unix 系统里，每行结尾只有 换行 ，即\n；<br>Mac 系统里，每行结尾是 回车 ，即\r。从 Mac OS X 开始与 Linux 统一。</p>
<h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>流进内存的，输入流</p>
<p>1、 **FileInputStream(File file)**： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File 对象 file 命名。<br>2、 **FileInputStream(String name)**： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name 命名。</p>
<p>当你创建一个输入流对象时，必须传一个文件路径。该路径下，如果没有该文件,会抛出 FileNotFoundException</p>
<p>使用字节数组读取：read(byte[] b) 效率更高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line"><span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bys,<span class="number">0</span>,len));<span class="comment">//len输出有效的字节数</span></span><br></pre></td></tr></table></figure>

<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><p>字符输入流的所有类的超类 输入流</p>
<h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p>写出字符到文件的便利类 输出流</p>
<p>&#x2F;&#x2F;关闭资源时,与 FileOutputStream 不同。 如果不关闭,数据只是保存到缓冲区，并未保存到文件。</p>
<p>&#x2F;&#x2F; fw.close();</p>
<p>关闭 close 和刷新 flush<br>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要 flush 方法了。</p>
<p>flush ：刷新缓冲区，流对象可以继续使用。清空缓冲区的数据流<br>close:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p>
<h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>1、使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。<br>2、通过缓冲区的 read()方法从缓冲区获取具体的字符数据，这样就提高了效率。<br>3、如果用 read 方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了 readLine()功能。</p>
<p>也就是说在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统 IO 次数，从而提高读写的效率。</p>
<p>缓冲书写格式为 BufferedXxx，按照数据类型分类：</p>
<p><strong>字节缓冲流</strong>：BufferedInputStream，BufferedOutputStream<br><strong>字符缓冲流</strong>：BufferedReader，BufferedWriter<br>构造方法<br><strong>public BufferedInputStream(InputStream in)</strong> ：创建一个新的缓冲输入流，注意参数类型为 InputStream。<br>**public BufferedOutputStream(OutputStream out)**： 创建一个新的缓冲输出流，注意参数类型为 OutputStream。</p>
<p><strong>BufferedReader：public String readLine()</strong>: 读一行数据。 读取到最后返回 null,就这个特别一点，判断条件都需要修改了<br><strong>BufferedWriter：public void newLine()</strong>: 换行,由系统属性定义符号。</p>
<h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>简单一点的说就是：</p>
<p>编码:字符(能看懂的)–字节(看不懂的)</p>
<p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String(byte[] bytes, String charsetName):通过指定的字符集解码字节数组</span><br><span class="line">byte[] getBytes(String charsetName):使用指定的字符集合把字符串编码为字节数组</span><br><span class="line"></span><br><span class="line">编码:把看得懂的变成看不懂的</span><br><span class="line">String -- byte[]</span><br><span class="line"></span><br><span class="line">解码:把看不懂的变成看得懂的</span><br><span class="line">byte[] -- String</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>字符集 Charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p>
<p>在 java 开发工具 IDEA 中，使用 FileReader 读取项目中的文本文件。由于 IDEA 的设置，都是默认的 UTF-8 编码，所以没有任何问题。但是，当读取 Windows 系统中创建的文本文件时，由于 Windows 系统的默认是 GBK 编码，就会出现乱码。</p>
<p>转换流 java.io.InputStreamReader，是 Reader 的子类，从字面意思可以看出它是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p>
<p>构造方法<br><strong>InputStreamReader(InputStream in)</strong>: 创建一个使用默认字符集的字符流。<br><strong>InputStreamReader(InputStream in, String charsetName)</strong>: 创建一个指定字符集的字符流。</p>
<p>构造代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;));</span><br><span class="line">InputStreamReader isr2 = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;) , &quot;GBK&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>OutputStreamWriter</strong>同理</p>
<h1 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/8/10 -10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\FF\\Desktop\\1.txt&quot;</span>);  <span class="comment">//就算文件1.txt不存在也不影响file对象的创建</span></span><br><span class="line">        <span class="keyword">if</span> (!f.exists()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile()); <span class="comment">// true 如果没有文件则创建并返回true</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;是否创建:&quot;</span>+f.createNewFile());  <span class="comment">//已经存在，所以就false了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径:&quot;</span>+f.getAbsolutePath());<span class="comment">//文件绝对路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件构造路径:&quot;</span>+f.getPath());        <span class="comment">//文件构造路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称:&quot;</span>+f.getName());          <span class="comment">//文件名称:1.txt</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span>+f.length()+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件:&quot;</span>+f.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录:&quot;</span>+f.isDirectory());</span><br><span class="line">        <span class="comment">//一个路径下全部文件名,先将字符串转目录</span></span><br><span class="line"><span class="comment">//        String path = &quot;D:\\workspace&quot;;</span></span><br><span class="line"><span class="comment">//        File file = new File(path);</span></span><br><span class="line"><span class="comment">//        printFile(file);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果1   传进的file不一样结果不一样，如果是绝对位置那么构造啥的都是绝对的</span></span><br><span class="line"><span class="comment">//    是否创建:false</span></span><br><span class="line"><span class="comment">//    文件绝对路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line"><span class="comment">//    文件构造路径:C:\Users\FF\Desktop\1.txt</span></span><br><span class="line"><span class="comment">//    文件名称:1.txt</span></span><br><span class="line"><span class="comment">//    文件长度:0字节</span></span><br><span class="line"><span class="comment">//    文件:true</span></span><br><span class="line"><span class="comment">//    目录:false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果2 如果是直接1.txt则会相对这个项目来创建这个文件</span></span><br><span class="line"><span class="comment">//    是否创建:true</span></span><br><span class="line"><span class="comment">//    是否创建:false</span></span><br><span class="line"><span class="comment">//    文件绝对路径:E:\LuckyWorckSpace\lucky_api\1.txt</span></span><br><span class="line"><span class="comment">//    文件构造路径:1.txt</span></span><br><span class="line"><span class="comment">//    文件名称:1.txt</span></span><br><span class="line"><span class="comment">//    文件长度:0字节</span></span><br><span class="line"><span class="comment">//    文件:true</span></span><br><span class="line"><span class="comment">//    目录:false</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo2</span><span class="params">()</span> &#123;   <span class="comment">//目录的创建等,使用相对这个项目下的目录来测试了</span></span><br><span class="line">        <span class="comment">// 目录的创建</span></span><br><span class="line">        File f2= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否存在:&quot;+f2.exists());// false</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否创建:&quot;+f2.mkdir());	//  这个是创建的意思，并返回true</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否存在:&quot;+f2.exists());// true</span></span><br><span class="line">        <span class="comment">// 创建多级目录</span></span><br><span class="line"><span class="comment">//        File f3= new File(&quot;newDira\\newDirb&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());// false，没有加s指南创建单层的目录</span></span><br><span class="line">        File f4= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;newDira\\newDirb&quot;</span>);</span><br><span class="line">  <span class="comment">//      System.out.println(f4.mkdirs());// true,可以创建多级别的目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件和目录的删除  delete方法，如果此File表示目录，则目录必须为空才能删除。</span></span><br><span class="line">      <span class="comment">//  System.out.println(f2.delete());// true</span></span><br><span class="line">   <span class="comment">//     System.out.println(f4.delete());// false如果是删除多层目录只能删除最底层的比如这个的newDirb目录，外newDira没有删掉</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\other\\study\\学习sp\\实用篇&quot;</span>);</span><br><span class="line">        printFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="comment">//        //获取当前目录下的文件以及文件夹的名称。</span></span><br><span class="line"><span class="comment">//        File[] files = file.listFiles();</span></span><br><span class="line"><span class="comment">//        for (File a:files) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if (a.isFile()) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println( a.getName());</span></span><br><span class="line"><span class="comment">//            &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                printFile(a);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //下面的只获取一层，上面是里面全部获取</span></span><br><span class="line"><span class="comment">//        String[] names = file.list();</span></span><br><span class="line"><span class="comment">//        for(String name : names)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(name);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span><br><span class="line"><span class="comment">//        File[] files = file.listFiles(); //listFiles指定的必须是目录。否则容易引发返回数组为null，出现NullPointerException异常</span></span><br><span class="line"><span class="comment">//        for (File fi : files) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(fi);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        递归全部</span></span><br><span class="line">        <span class="comment">//1、判断传入的是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line">            <span class="comment">//不是目录直接退出</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已经确保了传入的file是目录</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">//遍历files</span></span><br><span class="line">        <span class="keyword">for</span> (File f: files) &#123;</span><br><span class="line">            <span class="comment">//如果该目录下文件还是个文件夹就再进行递归遍历其子目录</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                printFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果该目录下文件是个文件，则打印对应的名字</span></span><br><span class="line">                System.out.println(f.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">//从d盘下的a.txt文件拷贝到另个盘下</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\workspace\\a.txt&quot;</span>);<span class="comment">//这是源文件</span></span><br><span class="line">            <span class="type">long</span> flen=file1.length();</span><br><span class="line">            System.out.println(<span class="string">&quot;源文件的大小是&quot;</span>+flen+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\workspace\\b.txt&quot;</span>);<span class="comment">//这是复制到的地方</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//这是1兆1兆传</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> readSize=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;<span class="comment">//-1就是最后一个结束</span></span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len); <span class="comment">//比如一个文件是1024*8+244，那么len就是244</span></span><br><span class="line">                fos.flush();<span class="comment">//强制输出，推送数据</span></span><br><span class="line">                readSize+=len;</span><br><span class="line">                <span class="keyword">if</span> (readSize== flen) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;读的大小&quot;</span>+readSize+<span class="string">&quot;字节&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\1.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\222.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file1);</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> (bis.read(bytes) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes);</span><br><span class="line">                fos.flush();</span><br><span class="line">                System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/8/10 -14:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IoDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//public void write(int b)</span></span><br><span class="line">        <span class="comment">//public void write(byte[] b)</span></span><br><span class="line">        <span class="comment">//public void write(byte[] b,int off,int len)  //从`off`索引开始，`len`个字节</span></span><br><span class="line">        <span class="comment">//构造方法中加入true即可追加数据，否则就是清空了</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="literal">true</span>);<span class="comment">//输出流，如果没有文件则帮忙创，有的话清空里面数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>);<span class="comment">//对于内存里流向本地磁盘，所以是输出流，而且会帮忙创建文件，并写入数据,所以才会清空</span></span><br><span class="line">        fos.write((<span class="string">&quot;我要吃汉堡&quot;</span>).getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">        <span class="comment">//a我要吃汉堡    97字节对于的是小写的a，字符串这个是转字节了</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">        fileWriter.write(<span class="string">&quot;ss&quot;</span>);<span class="comment">//这个可以直接写入</span></span><br><span class="line">        fileWriter.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写出指定长度字节数组：write(byte[] b, int off, int len) ,每次写出从off索引开始，len个字节</span></span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a2.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos2.write(b, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos2.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delTxt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>).delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arrDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] words = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">            <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inputS</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a2.txt&quot;</span>);<span class="comment">//这个文本中只有cd2个字符</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);<span class="comment">//我把a.txt删了它就找不到了报错</span></span><br><span class="line"><span class="comment">//        int read = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println((char)read);//不加char的话会转数字那种99---c</span></span><br><span class="line"><span class="comment">//        int read1 = fis.read();//继续读取下一个字符</span></span><br><span class="line"><span class="comment">//        System.out.println((char)read1);</span></span><br><span class="line"><span class="comment">//        int read2 = fis.read();//如果是最后一个字符，它会返回-1,通过-1知道到底了</span></span><br><span class="line"><span class="comment">//        System.out.println(read2);</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        <span class="comment">//改进版1</span></span><br><span class="line"><span class="comment">//        int b;</span></span><br><span class="line"><span class="comment">//        while ((b = fis.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println((char)b);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        <span class="comment">//改进版2将文本里的值变成的abced，一次读取2个，结果出现了abcded</span></span><br><span class="line">        <span class="comment">//1 a  b  2  c  d  3e  d  因为没替换就流着了，要解决一下改进3</span></span><br><span class="line">        <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        // 定义字节数组，作为装字节数据的容器</span></span><br><span class="line"><span class="comment">//        byte[] b = new byte[2];</span></span><br><span class="line"><span class="comment">//        // 循环读取</span></span><br><span class="line"><span class="comment">//        while (( len= fis.read(b))!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            // 每次读取后,把数组变成字符串打印</span></span><br><span class="line"><span class="comment">//            System.out.println(new String(b));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        <span class="comment">//  fis.close();</span></span><br><span class="line"><span class="comment">//        改进3</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="number">0</span>, len));<span class="comment">//len是每次读取有效的个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyPic</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;<span class="comment">//将本地图片复制到项目下面</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\FF\\Desktop\\6.png&quot;</span>);<span class="comment">//输入流到内存</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.png&quot;</span>);<span class="comment">//内存输出到项目下面</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readI</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>);<span class="comment">//输入流。文本中是中文你是大聪明，正常字节流去解析会乱码</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) len);  <span class="comment">//乱码</span></span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));<span class="comment">//String里自带了utf8解码所以可以。不过比较麻烦直接字符流解决</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下面用字符流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2 = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) len2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyText</span><span class="params">()</span> <span class="keyword">throws</span>  IOException&#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;66.md&quot;</span>);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E:\\后端代码接收解析.md&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] c=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileReader.read(c)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fileWriter.write(c, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        fileWriter.flush();<span class="comment">//清空缓冲区的数据流</span></span><br><span class="line">        fileWriter.close();</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面开始测试缓存流的速度效率,1是正常，2是加入缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Buff1</span><span class="params">()</span> <span class="keyword">throws</span>  IOException&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ps2015.zip&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\other\\装机必备软件\\必备软件\\ps2015.zip&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);<span class="comment">//33000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Buff2</span><span class="params">()</span> <span class="keyword">throws</span>  IOException&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span><span class="keyword">new</span>   <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ps2015.zip&quot;</span>)) ;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">fis</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\other\\装机必备软件\\必备软件\\ps2015.zip&quot;</span>)) ;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);<span class="comment">//缓冲流复制时间:4314 毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuffRead</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;b.txt&quot;</span>));<span class="comment">//       两个黄鹂鸣翠柳，一行白鹭上青天。 窗含西岭千秋雪，门泊东吴万里船。</span></span><br><span class="line">        System.out.println(br.readLine()); <span class="comment">// 读取一行的</span></span><br><span class="line">        String len=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println((len));</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\FF\\Desktop\\1.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName));</span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read); <span class="comment">//如果这个txt默认是ANSI编码就需要GBK就不会乱码，如果本身就utf就不需要编码了</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Jkd8新特性</title>
    <url>/post/34077.html</url>
    <content><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">products.stream().forEach(System.out::println);          <span class="comment">//直接遍历打印这个对象，products是列表</span></span><br><span class="line">Arrays.stream(strArray).forEach(System.out::println)     <span class="comment">//数组遍历打印每一项   类要toString</span></span><br></pre></td></tr></table></figure>

<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ol>
<li>使用 Lambda 必须<strong>有且仅有一个抽象方法的接口(函数式接口)</strong><br>　　 2. lambda 体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表和返回值类型保持一致！<br>　　 3. 若 lambda 参数列表中的第一个参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用 ClassName::method 看案 4<br>　　 4. JDK 里的 Runnable 、Comparator、Consumer、BiConsumer 接口满足 1 的条件，自定义接口要是满足也可以使用它</li>
</ol>
<h2 id="案例-1-Runnable"><a href="#案例-1-Runnable" class="headerlink" title="案例 1(Runnable )"></a>案例 1(Runnable )</h2><p>Runnable 是一个接口，当一个类 implements 它的时候，必须去重写它的 run 方法，这样太麻烦了，所以有了匿名内部类，jdk8 后面有了更简单的 Lambda，这个接口里面就一个抽象类满足它，所以才能直接用。</p>
<p>Lambda 表达式的为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(参数列表) -&gt; &#123;重写方法的代码&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>()里面需要参数就写上，没有则不写，用逗号隔开</li>
<li>-&gt;:传参</li>
<li>{}:重写接口的抽象方法的方法体</li>
</ul>
<p>正常{System.out.println(Thread.currentThread().getName()+”牛逼的 Lambda”)},不过也可以省略{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程的实现方法2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;牛逼的Lambda&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-2-Comparator"><a href="#案例-2-Comparator" class="headerlink" title="案例 2(Comparator)"></a>案例 2(Comparator)</h2><p>需要一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/17 -15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Entity</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Entity</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Entity&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果是排序的话也可以直接在实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Entity&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Entity other)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; other.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 当前对象的年龄小于其他对象的年龄，返回负整数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt; other.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 当前对象的年龄大于其他对象的年龄，返回正整数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 当前对象的年龄等于其他对象的年龄，返回零</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">调用的时候</span><br><span class="line">        ArrayList&lt;Entity&gt; entities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小A&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小B&quot;</span>, <span class="number">29</span>));</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小C&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        Collections.sort(entities);    <span class="comment">//就从小到大排序了</span></span><br><span class="line">        <span class="keyword">for</span> (Entity entity : entities) &#123;</span><br><span class="line">            System.out.println(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果你有一个数组需要进行排序，使用 <code>Arrays.sort</code> 是更好的选择；如果你有一个集合对象需要进行排序，使用 <code>Collections.sort</code> 更加方便</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/17 -15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Entity&gt; entities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小A&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小B&quot;</span>, <span class="number">29</span>));</span><br><span class="line">        entities.add(<span class="keyword">new</span> <span class="title class_">Entity</span>(<span class="string">&quot;小C&quot;</span>, <span class="number">22</span>));</span><br><span class="line">		<span class="comment">//匿名内部类</span></span><br><span class="line">        Collections.sort(entities, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Entity&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Entity entity1, Entity entity2)</span> &#123;</span><br><span class="line">                <span class="comment">// 实现自定义的比较逻辑</span></span><br><span class="line">                <span class="comment">// 返回负整数、零或正整数，表示entity1小于、等于或大于entity2</span></span><br><span class="line">                <span class="keyword">return</span>  entity1.getAge()-entity2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//也是从小到大比较排序</span></span><br><span class="line">       <span class="comment">//lambda表达式</span></span><br><span class="line">        Collections.sort(entities, (entity1, entity2) -&gt;&#123;<span class="keyword">return</span>  entity1.getAge()-entity2.getAge();&#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//简化1</span></span><br><span class="line">        Collections.sort(entities, (entity1, entity2) -&gt;entity1.getAge()-entity2.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继续简化</span></span><br><span class="line">         Collections.sort(entities, Comparator.comparingInt(Entity::getAge));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entity entity : entities) &#123;</span><br><span class="line">            System.out.println(entity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><code>Comparator.comparingInt</code>：这是一个静态方法，用于创建一个比较器对象，它会根据指定的属性或键提取对象的整数值进行比较。</li>
<li><code>Entity::getAge</code>：这是一种方法引用的写法，表示使用实体对象的 <code>getAge()</code> 方法来提取整数值进行比较。</li>
</ol>
<p>因此，<code>Comparator.comparingInt(Entity::getAge)</code> 所做的是创建一个比较器，通过调用实体对象的 <code>getAge()</code> 方法来提取它们的年龄属性，并以整数方式进行比较。</p>
<p>在 <code>Collections.sort(entities, ...)</code> 中，<code>entities</code> 是要排序的集合对象，<code>Comparator.comparingInt(Entity::getAge)</code> 则是用于指定排序的比较器。这样，<code>Collections.sort</code> 就会根据实体对象的年龄属性对集合中的元素进行排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = new ArrayList&lt;&gt;();</span><br><span class="line">numbers.add(5);</span><br><span class="line">numbers.add(2);</span><br><span class="line">numbers.add(8);</span><br><span class="line">numbers.add(1);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Integer&gt; cpt2 = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">Collections.sort(numbers, cpt2);</span><br><span class="line"></span><br><span class="line">System.out.println(numbers);  // 输出结果：[1, 2, 5, 8]</span><br></pre></td></tr></table></figure>

<h2 id="案例-3-Consumer"><a href="#案例-3-Consumer" class="headerlink" title="案例 3(Consumer)"></a>案例 3(Consumer)</h2><p>Consumer 是一个接口，它属于 Java 8 中的函数式接口之一。在 Java 中，函数式接口指的是只包含一个抽象方法的接口。</p>
<p><code>Consumer</code> 接口定义了一个名为 <code>accept</code> 的抽象方法，该方法接受一个输入参数，并不返回任何结果。它可以用于执行操作，通常是对输入进行处理或消费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; printConsumer = (str) -&gt; System.out.println(str);</span><br><span class="line">printConsumer.accept(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">Consumer&lt;Integer&gt; squareConsumer = (num) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">square</span> <span class="operator">=</span> num * num;</span><br><span class="line">    System.out.println(square);</span><br><span class="line">&#125;;</span><br><span class="line">squareConsumer.accept(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Lambda 表达式创建 Consumer 对象，并在 forEach 中使用</span></span><br><span class="line">names.forEach(name -&gt; System.out.println(<span class="string">&quot;Hello, &quot;</span> + name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法引用创建 Consumer 对象，并在 forEach 中使用</span></span><br><span class="line">Consumer&lt;String&gt; greetingConsumer = System.out::println;</span><br><span class="line">names.forEach(greetingConsumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello, World!</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line">Hello, Alice</span><br><span class="line">Hello, Bob</span><br><span class="line">Hello, Charlie</span><br><span class="line">Alice</span><br><span class="line">Bob</span><br><span class="line">Charlie</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-4-BiConsumer"><a href="#案例-4-BiConsumer" class="headerlink" title="案例 4(BiConsumer)"></a>案例 4(BiConsumer)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">(String name, String greeting)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + greeting + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line"><span class="comment">//        BiConsumer&lt;String, String&gt; greeter = (name, greeting) -&gt; example.greet(name, greeting);</span></span><br><span class="line">        BiConsumer&lt;String, String&gt; greeter = example::greet;</span><br><span class="line">        greeter.accept(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;lucky&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Hello, lucky!</span><br><span class="line"></span><br><span class="line">可以这样玩</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; biFun = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; biFun2 = Integer::compare;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> biFun2.apply(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"><span class="comment">// 方法引用-类名::实例方法名</span></span><br><span class="line">        BiFunction&lt;String, String, Boolean&gt; fun1 = (str1, str2) -&gt; str1.equals(str2);</span><br><span class="line">        BiFunction&lt;String, String, Boolean&gt; fun2 = String::equals;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result2</span> <span class="operator">=</span> fun2.apply(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line"><span class="comment">// 数组引用</span></span><br><span class="line">        Function&lt;Integer, String[]&gt; fun = (x) -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[x];</span><br><span class="line">        Function&lt;Integer, String[]&gt; fun3 = String[]::<span class="keyword">new</span>;</span><br><span class="line">        String[] strArray = fun3.apply(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 1使用 Arrays.fill 方法给数组赋值</span></span><br><span class="line">        Arrays.fill(strArray, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 2使用循环遍历逐个赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strArray.length; i++) &#123;</span><br><span class="line">            strArray[i] = <span class="string">&quot;Hello&quot;</span> + i;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.stream(strArray).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">Hello</span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Entity&gt; sup = () -&gt; <span class="keyword">new</span> <span class="title class_">Entity</span>();</span><br><span class="line">        System.out.println(sup.get());</span><br><span class="line"><span class="comment">//延迟获取对象sup.get() 方法调用这个 Supplier 实例，会执行 Lambda 表达式 () -&gt; new Entity()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-5-自定义接口"><a href="#案例-5-自定义接口" class="headerlink" title="案例 5(自定义接口)"></a>案例 5(自定义接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Cal(<span class="number">1</span>,<span class="number">2</span>,(a,b)-&gt;a+b); <span class="comment">//这是有返回值的，给了下面sum变量,然后打印了出来</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Cal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, Counter c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> c.sum(a, b);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-6-优化代码"><a href="#案例-6-优化代码" class="headerlink" title="案例 6(优化代码)"></a>案例 6(优化代码)</h2><p>在商城浏览商品时，会进行有条件的筛选，例如价格小于 6666</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 价格大于6666</span><br><span class="line">public  List&lt;Product&gt; filterProductByPrice(List&lt;Product&gt; list)&#123;</span><br><span class="line">    List&lt;Product&gt; prods = new ArrayList&lt;&gt;();</span><br><span class="line">    for (Product product : list)&#123;</span><br><span class="line">        if (product.getPrice() &lt; 6666)&#123;</span><br><span class="line">            prods.add(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return prods;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>每次变更一下需求，都需要新增一个方法，如果这个过滤方法有几百行，如何进行优化</p>
<p>用上自定义接口的思想</p>
<p>首先定义一个接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface MyPredicate &lt;T&gt; &#123;</span><br><span class="line">    boolean test(T t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写个 Demo 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/17 -18:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ArrayList&lt;Product&gt; products = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        products.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">1555</span>));</span><br><span class="line">        products.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">8555</span>));</span><br><span class="line">        products.add(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">10555</span>));</span><br><span class="line"><span class="comment">//        products.stream().forEach(System.out::println);   //这里流的方式，不懂后面会说,可以用foreach</span></span><br><span class="line">        List&lt;Product&gt; filter = Demo.filter(products, <span class="keyword">new</span> <span class="title class_">MyPredicate</span>&lt;Product&gt;() &#123;  <span class="comment">//匿名内部类，熟悉吧</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> product.getPrice()&lt;<span class="number">6666</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;Product&gt; filter = Demo.filter(products, product -&gt; product.getPrice()&lt;<span class="number">6666</span>);<span class="comment">//简化成这个</span></span><br><span class="line">        filter.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//或者直接一步到位,limit限制输出2条,filter是流里的，不是自己的方法也能用</span></span><br><span class="line">                products.stream().</span><br><span class="line">                filter((p) -&gt; p.getPrice() &lt;<span class="number">6666</span>)</span><br><span class="line">                .limit(<span class="number">2</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span>   <span class="keyword">static</span>   List&lt;Product&gt; <span class="title function_">filter</span><span class="params">(List&lt;Product&gt; list,MyPredicate&lt;Product&gt; mp)</span>&#123;</span><br><span class="line">        List&lt;Product&gt; prods = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Product prod : list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (mp.test(prod))&#123;</span><br><span class="line">                prods.add(prod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等</p>
<p><strong><code>stream</code>和<code>parallelStream</code>的简单区分：</strong> <code>stream</code>是顺序流，由主线程按顺序对流执行操作，而<code>parallelStream</code>是并行流，如果说顺序流是一个一个筛选，那么并行就是中间拆开，多线程去筛选需要的，再去合并成顺序流，效率比较高。如筛选集合中的偶数</p>
<p><code>Optional</code>类是一个可以为<code>null</code>的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/18 -16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个顺序流</span></span><br><span class="line">     <span class="comment">//   Stream&lt;String&gt; stream = list.stream();</span></span><br><span class="line"><span class="comment">// 创建一个并行流</span></span><br><span class="line">    <span class="comment">//    Stream&lt;String&gt; parallelStream = list.parallelStream();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        IntStream stream3= Arrays.stream(array);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 4, 5, 6);</span></span><br><span class="line"><span class="comment">//Stream.iterate(0, (x) -&gt; x + 3) 创建了一个无限长度的流。初始值为 0，每次迭代时通过 (x) -&gt; x + 3 将上一个元素加 3 来生成下一个元素。</span></span><br><span class="line"><span class="comment">// 然后，使用 .limit(4) 限制流的大小为4，只保留前四个元素</span></span><br><span class="line">        Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">3</span>).limit(<span class="number">4</span>);</span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Stream.generate(Math::random) 创建了一个无限长度的流，其中每个元素都是由 Math.random() 生成的随机数。</span></span><br><span class="line"><span class="comment">//然后，.limit(3) 限制了流的大小为3，只保留前三个元素</span></span><br><span class="line">        Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(<span class="number">3</span>);</span><br><span class="line">        stream4.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过parallel()把顺序流转换成并行流</span></span><br><span class="line">        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>);</span><br><span class="line">        Optional&lt;Integer&gt; findFirst = list2.stream().parallel().filter(x-&gt;x&gt;<span class="number">6</span>).findFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个大于6的是&quot;</span>+findFirst);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/18 -16:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; fiterList = personList.stream().filter(x -&gt; x.getSalary() &gt; 8000).map(Person::getName)</span></span><br><span class="line"><span class="comment">//                .collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;薪资高于8000美元的员工：&quot; + fiterList);</span></span><br><span class="line"><span class="comment">//        fun1();</span></span><br><span class="line"><span class="comment">//        fun2();</span></span><br><span class="line"><span class="comment">//        fun3();</span></span><br><span class="line"><span class="comment">//        fun4(personList);</span></span><br><span class="line"><span class="comment">//        fun5(personList);</span></span><br><span class="line"><span class="comment">//        fun6();</span></span><br><span class="line">        fun7(personList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//foreach/find/match  遍历/匹配</span></span><br><span class="line">        <span class="comment">// 遍历输出符合条件的元素</span></span><br><span class="line">        list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 匹配第一个</span></span><br><span class="line">        Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).findFirst();</span><br><span class="line">        <span class="comment">// 匹配任意（适用于并行流）</span></span><br><span class="line">        Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; <span class="number">6</span>).findAny();</span><br><span class="line">        <span class="comment">// 是否包含符合特定条件的元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> list.stream().anyMatch(x -&gt; x &gt; <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配第一个值：&quot;</span> + findFirst.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配任意一个值：&quot;</span> + findAny.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在大于6的值：&quot;</span> + anyMatch);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//聚合max/min/count</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;adnm&quot;</span>, <span class="string">&quot;admmt&quot;</span>, <span class="string">&quot;pot&quot;</span>, <span class="string">&quot;xbangd&quot;</span>, <span class="string">&quot;weoujgsd&quot;</span>);</span><br><span class="line">        Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;最长的字符串：&quot;</span> + max.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun3</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 自然排序</span></span><br><span class="line">        Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line">        <span class="comment">// 自定义排序（从小到大排序）</span></span><br><span class="line">        Optional&lt;Integer&gt; min = list.stream().max((o1, o2) -&gt; o2 - o1);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序的最大值：&quot;</span> + max.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义排序的最小值：&quot;</span> + min.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun4</span><span class="params">(List&lt;Person&gt; personList)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">        System.out.println(<span class="string">&quot;员工薪资最大值：&quot;</span> + max.get().getSalary());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().filter(x -&gt; x &gt; <span class="number">6</span>).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;list中大于6的元素个数：&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun5</span><span class="params">(List&lt;Person&gt; personList)</span> &#123;</span><br><span class="line">        <span class="comment">//映射</span></span><br><span class="line"><span class="comment">//     map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line"><span class="comment">//     flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">        <span class="comment">//英文字符串数组的元素全部改为大写。整数数组每个元素+3。</span></span><br><span class="line">        String[] strArr = &#123;<span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;bcdd&quot;</span>, <span class="string">&quot;defde&quot;</span>, <span class="string">&quot;fTr&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">        List&lt;Integer&gt; intList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>);</span><br><span class="line">        List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;每个元素大写：&quot;</span> + strList);</span><br><span class="line">        System.out.println(<span class="string">&quot;每个元素+3：&quot;</span> + intListNew);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不改变原来员工集合的方式，new了新的，没有修改原来的值</span></span><br><span class="line">        List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">personNew</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(person.getName(), <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            personNew.setSalary(person.getSalary() + <span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">return</span> personNew;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;一次改动前：&quot;</span> + personList.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personList.get(<span class="number">0</span>).getSalary());</span><br><span class="line">        System.out.println(<span class="string">&quot;一次改动后：&quot;</span> + personListNew.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变原来员工集合的方式,直接操作了原来的类，给他重新赋值了</span></span><br><span class="line">        List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">            person.setSalary(person.getSalary() + <span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;二次改动前：&quot;</span> + personList.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line">        System.out.println(<span class="string">&quot;二次改动后：&quot;</span> + personListNew2.get(<span class="number">0</span>).getName() + <span class="string">&quot;--&gt;&quot;</span> + personListNew.get(<span class="number">0</span>).getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun6</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;m-k-l-a&quot;</span>, <span class="string">&quot;1,3,5,7&quot;</span>);</span><br><span class="line">        List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// 将每个元素转换成一个stream</span></span><br><span class="line">            String[] split = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;处理前的集合：&quot;</span> + list);</span><br><span class="line">        System.out.println(<span class="string">&quot;处理后的集合：&quot;</span> + listNew);</span><br><span class="line"><span class="comment">//        处理前的集合：[m-k-l-a, 1,3,5,7]</span></span><br><span class="line"><span class="comment">//        处理后的集合：[m, k, l, a, 1,3,5,7]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun7</span><span class="params">(List&lt;Person&gt; personList)</span> &#123;</span><br><span class="line">        <span class="comment">// 求工资之和方式1：</span></span><br><span class="line">        Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line">        <span class="comment">// 求工资之和方式2：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sumSalary2</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(),</span><br><span class="line">                (sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line">        <span class="comment">// 求工资之和方式3：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sumSalary3</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求最高工资方式1：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxSalary</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">                Integer::max);</span><br><span class="line">        <span class="comment">// 求最高工资方式2：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxSalary2</span> <span class="operator">=</span> personList.stream().reduce(<span class="number">0</span>, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),</span><br><span class="line">                (max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);</span><br><span class="line">        <span class="comment">// 求最高工资方式3：</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxSalary3</span> <span class="operator">=</span> personList.stream().map(Person::getSalary).reduce(Integer::max).get();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;工资之和：&quot;</span> + sumSalary.get() + <span class="string">&quot;,&quot;</span> + sumSalary2 + <span class="string">&quot;,&quot;</span> + sumSalary3);</span><br><span class="line">        System.out.println(<span class="string">&quot;最高工资：&quot;</span> + maxSalary + <span class="string">&quot;,&quot;</span> + maxSalary2 + <span class="string">&quot;,&quot;</span> + maxSalary3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Person 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/18 -16:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary; <span class="comment">// 薪资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String area;  <span class="comment">// 地区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> salary, <span class="type">int</span> age, String sex, String area)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> salary, String sex, String area)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArea</span><span class="params">(String area)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, area=&#x27;&quot;</span> + area + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDk8</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql知识点</title>
    <url>/post/29614.html</url>
    <content><![CDATA[<h2 id="常用以及总结"><a href="#常用以及总结" class="headerlink" title="常用以及总结"></a>常用以及总结</h2><p>设计数据库时候：</p>
<p>一个汉字占 3 个字节，varchar(255)最多存 85 汉字</p>
<p>理论上可以存 255 字符、如果是中文字符(占 2 个字节)，127 个中文字符</p>
<p>位（bit）：数据存储的最小单位。每个二进制数字 0 或者 1 就是 1 个位；</p>
<p>字节（byte）： 8 个位构成一个字节；即：1 byte (字节)&#x3D; 8 bit(位)；</p>
<p>字符：是指计算机中使用的字母、数字、字和符号。</p>
<p>int 是整型而且有 4 个字节&#x3D;32 位，并且符号位占一位，它有自己的范围-2^31，2^31-1 即</p>
<p>[-2147483648,2147483647] 有 10 位 如果数字超过它的最大值，手机号 是 11 位，共五个字节(11 位)则用 long 类型或者 String</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h6 id="int"><a href="#int" class="headerlink" title="int"></a>int</h6><p>int(11)、tinyint(4) 、smallint(6)、mediumint(9)、bigint(20) 整形选个合适长度，不改它</p>
<p>varchar(255)、char(1) 这边需要根据需求改长度，这里的长度是字符，255 就是可以存 255 个字符</p>
<p><em>tip：括号里面是它的默认长度也是固定长度，比如 int 是默认长度你有一个值 199，这个长度小于 3 所以它会填 0 来补充 00000000199</em></p>
<h6 id="char"><a href="#char" class="headerlink" title="char"></a>char</h6><p>char 是一个是固定长度,varchar 是可变长度</p>
<p>为了提高 char 类型的性能，可以采取以下措施：</p>
<ul>
<li><p>使用 char 类型的等值查询，避免使用模糊查询。</p>
</li>
<li><p>避免使用过长的 char 类型，尽量选择合适的长度。</p>
</li>
<li><p>将 char 类型的列设置为 NOT NULL，以提高查询速度。</p>
</li>
<li><p>将 char 类型的列设置为索引，以提高查询速度。</p>
</li>
</ul>
<p>​ 从空间上考虑，用 varchar 合适；从效率上考虑，用 char 合适，关键是根据实际情况找到权衡点，所有当需要大量查询需求的时候，用 char。当对于保存数据量过大的需求时，为了节省储存空间用 varchar。</p>
<h6 id="text"><a href="#text" class="headerlink" title="text"></a>text</h6><p>没有默认长度，最大长度为 65,535(2 的 16 次方–1)字符的 TEXT 列。</p>
<p>Text 主要是用来存放非二进制的文本，如论坛帖子,题目，或者百度知道的问题和回答之类。TEXT 列不能有默认值，存储或检索过程中，不存在大小写转换，后面如果指定长度，不会报错误，但是这个长度是不起作用的，意思就是你插入数据的时候，超过你指定的长度还是可以正常插入。其实可以总结为用来储存大批量的文本信息的时候，使用 TEXT。</p>
<h6 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h6><p>datetime 显示 YYYY-MM-DD HH:MM:SS’格式显示 日期时间</p>
<p>date 只有日期</p>
<p>time 只有时间</p>
<p>timestamp 列类型可以使用它自动地用当前的日期和时间标记 INSERT 或 UPDATE 的操作。</p>
<p>它有 2 个属性值 CURRENT_TIMESTAMP 和 ON UPDATE CURRENT_TIMESTAMP</p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>（创建 Create、检索 Retrieve、更改 Update、删除 Delete）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查：select * from 表名 where 条件</span><br><span class="line">删：delect from 表名 where 条件</span><br><span class="line">改：update 表名 set 字段1=对应值1，..  where 条件</span><br><span class="line">增：insert into 表名(字段1,字段2..) values(对应值1,对应值2...)</span><br></pre></td></tr></table></figure>

<p>查和删不加条件，则全部查找、删除；</p>
<p>增也可以不加字段 1、…，直接 values 对应上值也行，而且也可以插入多条，直接 values 后面再逗号继续插入值</p>
<p>多表查的时候有共同的字段，需要声明一下是哪个表里面的.</p>
<p>mysql 里运行不区分大小写，尽量都大写</p>
<p>– (默认升序 asc 数据条从上到下递增 降序 desc)</p>
<p>HAVING 是分组之后加的条件</p>
<h2 id="六大范式"><a href="#六大范式" class="headerlink" title="六大范式"></a>六大范式</h2><p>英文 Normal form</p>
<p>第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般数据库只需满足第三范式(3NF）。</p>
<p><strong>第一范式（1NF）</strong>：强调属性的原子性。即属性不可再分。</p>
<p>比如：学生表中</p>
<p>id 学生姓名 学生学号 学生人数 手机号 符合</p>
<p>id 学生姓名 学生（学生学号 学生人数） 手机号 不符合</p>
<p>再比如一个字段家庭地址，那肯定有省市区这些值，这些值也可以看出一张表，所以不满足，<strong>不允许表中还有表</strong>，一个字段只存储一项信息</p>
<p><strong>第二范式（2NF）</strong>：第二范式就是在第一范式的基础上属性完全依赖于主键。也可以说是在第一范式的基础上，消除了非主属性对码的部分函数依赖。</p>
<p>比如：学生表中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学号 姓名  课程  班级 分数</span><br><span class="line">1    小嗯  语文  1班  99</span><br><span class="line">1    小嗯  数学  1班  98</span><br><span class="line">2    小维  语文  2班  97</span><br><span class="line">2    小维  科学  2班  100</span><br></pre></td></tr></table></figure>

<p>可以看出(课程) → (分数)<br>(学号) → (姓名, 班级)</p>
<p>1.元组：表中的一行就是一个元组。</p>
<p>2.码:一个表中,可以唯一决定一个元组的属性”集合”。假设 k 为表中的某个属性,在 k 确定的情况下,这个表中的其他属性都可以确定,那么 k 就叫做候选码，也叫码。</p>
<p>(学号，课程)这个属性组就叫做码。</p>
<p>3.主属性:码里面的属性就是主属性。</p>
<p>4.部分函数依赖：比如上表中<strong>学号和课程组成主键</strong>已经不满足 2NF，那么你必须知道这 2 个的值才能知道后面列对应的值，就像 Z&#x3D;X+Y 一样，你输入一个 X 不知道 Y 无法得到 Z，而 Z&#x3D;X，Z&#x3D;Y 就是部分函数依赖。而且这张表数据冗余，可以分成 2 张表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学号 课程 分数                  学号  姓名  班级</span><br><span class="line">1    语文  99                   1    小嗯  1班</span><br><span class="line">1    数学  98                   2    小维  2班</span><br><span class="line">2    语文  97</span><br><span class="line">2    科学  100</span><br></pre></td></tr></table></figure>

<p>上面 2 张表属性都完全依赖于主键学号，这就是第二范式</p>
<p><strong>第三范式（3NF）</strong>： 在 2NF 的基础上，消除了非主属性对于码的传递函数依赖。即，如果存在非主属性对于码的传递函数依赖,则不符合 3NF。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">订单id  商品id  商品尺寸</span><br><span class="line">1        1      22</span><br></pre></td></tr></table></figure>

<p>可以看出主键订单 id，满足第二范式，商品 id 依赖订单 id，商品尺寸依赖商品 id，所以不满足第三范式，分成下面 2 张表即可满足</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">订单id  商品id            商品id   商品尺寸</span><br><span class="line">1        1                 1        22</span><br></pre></td></tr></table></figure>

<p>再比如有字段 学号 学生 系名称 系主任 ，可以看出系名称依赖学号，系主任依赖系名称，像上面拆成 2 表即可</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMq 知识点以及环境搭建</title>
    <url>/post/32867.html</url>
    <content><![CDATA[<p>1、安装和配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境变量</span><br><span class="line">ROCKETMQ_HOME</span><br><span class="line">E:\LuckySoft\rocketmq-4.9.3</span><br><span class="line"></span><br><span class="line">版本:rocketmq-4.9.3c</span><br><span class="line"></span><br><span class="line">bin目录，修改runserver.cmd的JAVA_OPT为，大小可自己调整</span><br><span class="line">rem set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g&quot;</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m&quot;</span><br><span class="line"></span><br><span class="line">修改runbroker.cmd的JAVA_OPT为，大小可自己调整</span><br><span class="line">rem set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g&quot;</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接运行bin下mqnamesrv.cmd</span><br><span class="line">再bin下目录cmd打开，输入下面命令</span><br><span class="line">bin&gt;mqbroker.cmd -n localhost:9876</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;rocketmq-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.0.4&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rocketmq:          #很奇怪前面没有和spring同级都能跑</span><br><span class="line">  name-server: 127.0.0.1:9876</span><br><span class="line">  producer:</span><br><span class="line">    group: producer-demo1</span><br><span class="line">  consumer:</span><br><span class="line">    group: consumer-demo1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.nwa.Lis;</span><br><span class="line"></span><br><span class="line">import com.nwa.aop.SysLog;</span><br><span class="line">import org.apache.rocketmq.spring.annotation.RocketMQMessageListener;</span><br><span class="line">import org.apache.rocketmq.spring.core.RocketMQListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author Lucky友人a</span><br><span class="line"> * @Date 2023/2/27 -13:03</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RocketMQMessageListener(topic = &quot;rocket-send1&quot;,consumerGroup =&quot;$&#123;rocketmq.consumer.group&#125;&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class RocketConsumerListener implements RocketMQListener&lt;String&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    @SysLog(operationType = &quot;接收&quot;,operationName = &quot;接收,并展示&quot;,value = &quot;200&quot;)</span><br><span class="line">    public void onMessage(String s) &#123;</span><br><span class="line">        System.out.println(&quot;consumer 收到消息：&quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.nwa.controller;</span><br><span class="line"></span><br><span class="line">import com.nwa.aop.SysLog;</span><br><span class="line">import org.apache.rocketmq.spring.core.RocketMQTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author Lucky友人a</span><br><span class="line"> * @Date 2023/2/27 -13:02</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/rocket/producer&quot;)</span><br><span class="line">public class RocketProducerHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RocketMQTemplate rocketMQTemplate;</span><br><span class="line">    @SysLog(operationType = &quot;用户操作&quot;,operationName = &quot;发送,并展示&quot;,value = &quot;200&quot;)</span><br><span class="line">    @RequestMapping(&quot;/send&quot;)</span><br><span class="line">    public String send()&#123;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">            rocketMQTemplate.convertAndSend(&quot;rocket-send1&quot;,&quot;rocket-testA-&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;send ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RocketMq</tag>
      </tags>
  </entry>
  <entry>
    <title>Token</title>
    <url>/post/53014.html</url>
    <content><![CDATA[<h1 id="双-token"><a href="#双-token" class="headerlink" title="双 token"></a>双 token</h1><p>Token（令牌）是在网络通信中用于验证身份和授权访问的一种机制。它是一串随机生成的字符串，用于标识用户的身份信息和权限。服务器可以根据令牌对用户进行身份鉴别，确保请求的合法性。令牌可以包含用户的权限信息，服务器可以根据令牌中的权限信息进行授权访问控制。令牌可以具有加密和签名等安全机制，保证信息的机密性和完整性。这样即使令牌被截获，也不能被篡改或者伪造。</p>
<p>假如 token 没有过期时间或者过期很长，那么显然 token 被劫持还是不安全的，token 就失去了意义。</p>
<p>所以这时候大家肯定都想：那么把 token 过期时间设置的短一点就行啦？</p>
<p>是的，一般来讲 accessToken 的过期时间应该要短一点，但是这时候对于用户来讲就麻烦了。</p>
<p>因为 token 过期就意味着要重新登录，想象下你正浏览的好好的，突然让你掉线了并且要求你重新登录，心里肯定是想骂人的。</p>
<p>什么时候需要用户重新登录？</p>
<p>主要有三种情况：</p>
<p>1.用户长时间无操作，也可以定义未不活跃用户，就会被自动踢下，自动重定向到登录页面，超时时间可以自定义设置；<br>2.token 失效，通常是双 token 都失效后，会要求重新登录获取新的双 token； 3.当检测到有风险的时候，可以要求重新登录，获取 token；</p>
<p>因此这时候就可以使用双 token 的设计，当两个 token 都过期了再要求用户重新登录，对于 refreshToken，它只用来获取 accessToken,不会频繁被用于请求，对于 accessToken，它过期时间非常短，即使被拦截了解密也需要时间，而 token 本身也很快过期，因此这样的设计更加安全。</p>
<p>推荐做响应拦截器中拦截，后端判断 token 返回过期后，调用刷新 token 接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title class_">Vue</span>.<span class="property">cookie</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>) <span class="comment">// 请求头带上token</span></span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;language&#x27;</span>] = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;language&quot;</span>) <span class="comment">// 请求头带上中英文切换</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span> &amp;&amp; response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123; <span class="comment">// 401, token失效</span></span><br><span class="line">    <span class="title function_">clearLoginInfo</span>()</span><br><span class="line">    router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="基于-oauth2-的单点登录及鉴权"><a href="#基于-oauth2-的单点登录及鉴权" class="headerlink" title="基于 oauth2 的单点登录及鉴权"></a>基于 oauth2 的单点登录及鉴权</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Token</tag>
      </tags>
  </entry>
  <entry>
    <title>RuleAv规则引擎与Validation</title>
    <url>/post/57942.html</url>
    <content><![CDATA[<h1 id="规则引擎"><a href="#规则引擎" class="headerlink" title="规则引擎"></a>规则引擎</h1><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--规则引擎AviatorScript--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.aviator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aviator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>封装成 bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.googlecode.aviator.AviatorEvaluator;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> com.googlecode.aviator.Expression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/8/31 -14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuleAv</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Expression exp;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RuleAv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">scriptPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;script/photoController.av&quot;</span>).getPath();</span><br><span class="line">            exp = AviatorEvaluator.getInstance().compileScript(scriptPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error loading script file: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RuleAv ruleAv;</span><br><span class="line"></span><br><span class="line">      Map&lt;String, Object&gt; context=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//传入参数</span></span><br><span class="line">       context.put(<span class="string">&quot;acc&quot;</span>,acc);</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span>(Boolean) ruleAv.getExp().execute(context);</span><br><span class="line">       <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">           <span class="keyword">return</span> R.error(<span class="string">&quot;格式有误！&quot;</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>脚本位置放在项目 src\main\resources 下面新建文件夹 script，文件名 photoController.av</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/^[a-zA-Z]&#123;5,10&#125;$/</span>;</span><br><span class="line"><span class="title function_">println</span>(regex);</span><br><span class="line"><span class="keyword">return</span> (acc = ~regex);</span><br></pre></td></tr></table></figure>

<p>demo—-测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.googlecode.aviator.AviatorEvaluator;</span><br><span class="line"><span class="keyword">import</span> com.googlecode.aviator.Expression;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/8/10 -19:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuleDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AviatorScript脚本的运行，分为两步，编译和执行</span></span><br><span class="line">        <span class="comment">//编译支持编译脚本文件和脚本文本，分别使用compileScript和compile方法。</span></span><br><span class="line">        <span class="comment">//编译产生的  Expression 对象，最终都是调用 execute() 方法执行。</span></span><br><span class="line">        <span class="comment">//这里有个重要能力，execute 方法可以接受一个变量列表组成的 map，来注入执行的上下文</span></span><br><span class="line">        <span class="comment">//获取路径</span></span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;script/rule.av&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">scriptPath</span> <span class="operator">=</span> resource.getPath();</span><br><span class="line">        <span class="comment">//编译</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> AviatorEvaluator.getInstance().compileScript(scriptPath);<span class="comment">//compileScripti编译路径脚本</span></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        exp.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script2</span> <span class="operator">=</span> <span class="string">&quot;println(\&quot;Hello, AviatorScript!\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">//编译</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp2</span> <span class="operator">=</span> AviatorEvaluator.getInstance().compile(script2); <span class="comment">//compile编译自定义脚本</span></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        exp2.execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;a-(b-c) &gt; 100&quot;</span>;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">compiledExp</span> <span class="operator">=</span> AviatorEvaluator.compile(expression);</span><br><span class="line"><span class="comment">//上下文</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100.3</span>, b = <span class="number">45</span>, c = -<span class="number">199.100</span>;</span><br><span class="line">        Map&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        context.put(<span class="string">&quot;a&quot;</span>, a);</span><br><span class="line">        context.put(<span class="string">&quot;b&quot;</span>, b);</span><br><span class="line">        context.put(<span class="string">&quot;c&quot;</span>, c);</span><br><span class="line"><span class="comment">//通过注入的上下文执行</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> (Boolean) compiledExp.execute(context);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> AviatorEvaluator.getInstance().compileScript(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;script/rule.av&quot;</span>).getPath()); <span class="comment">//获取规则</span></span><br><span class="line">        Map&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//传入参数</span></span><br><span class="line">        context.put(<span class="string">&quot;amount&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        context.put(<span class="string">&quot;rating&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//通过注入的上下文执行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) exp.execute(context);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">//它还能解析一个实例对象，脚本里直接调用testBeanIns.print(testBean);这个实例的print的方法</span></span><br><span class="line"><span class="comment">//        AviatorEvaluator.addInstanceFunctions(&quot;testBeanIns&quot;, TestBean.class);</span></span><br><span class="line"><span class="comment">//        Expression exp = AviatorEvaluator.getInstance().compileScript(&quot;example.av&quot;, true);//true是开启缓存</span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; env = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//        env.put(&quot;testBean&quot;, testBean);</span></span><br><span class="line"><span class="comment">//        exp.execute(env);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun88</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> AviatorEvaluator.getInstance().compileScript(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;script/rule.av&quot;</span>).getPath()); <span class="comment">//获取规则</span></span><br><span class="line">        Map&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//传入参数</span></span><br><span class="line">        context.put(<span class="string">&quot;acc&quot;</span>, <span class="string">&quot;lucky&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> (Boolean) exp.execute(context);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Spring-Validation"><a href="#Spring-Validation" class="headerlink" title="Spring Validation"></a>Spring Validation</h1><p><a href="https://blog.51cto.com/u_15964717/6093652">https://blog.51cto.com/u_15964717/6093652</a></p>
<p>如果 spring-boot 版本小于 2.3.x，spring-boot-starter-web 会自动传入 hibernate-validator 依赖；</p>
<p>如果 spring-boot 版本大于 2.3.x，则需要手动引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.18.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数异常即中断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidatorFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * web参数验证配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luckyNwa</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/10/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebParamValidateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Validator <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValidatorFactory</span> <span class="variable">validatorFactory</span> <span class="operator">=</span> Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                .failFast(<span class="literal">true</span>)   <span class="comment">//只要出现校验失败的情况，就立即结束校验，不再进行后续的</span></span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        <span class="keyword">return</span> validatorFactory.getValidator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">methodValidationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MethodValidationPostProcessor</span> <span class="variable">methodValidationPostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">        methodValidationPostProcessor.setValidator(validator());</span><br><span class="line">        <span class="keyword">return</span> methodValidationPostProcessor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义异常处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nwa.common.untils.Constant;</span><br><span class="line"><span class="keyword">import</span> com.nwa.common.untils.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DuplicateKeyException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理自定义异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luckyNwa</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//开启这个和配置mvc才能自定义404页面信息返回</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RRExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(LukcyException.class)</span><span class="comment">//继承运行时异常</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleRRException</span><span class="params">(LukcyException e)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.put(<span class="string">&quot;code&quot;</span>, e.getCode());</span><br><span class="line">        r.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NoHandlerFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">noHandlerFoundException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;路径不存在，请检查接口是否正确,&quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">404</span>, <span class="string">&quot;路径不存在，请检查接口是否正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(DuplicateKeyException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">duplicateKeyException</span><span class="params">(DuplicateKeyException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据库中已存在该记录&quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;数据库中已存在该记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    public R HttpMessageNotReadableExceptionHandler(HttpMessageNotReadableException e) &#123;</span></span><br><span class="line"><span class="comment">//        log.error(e.getMessage());</span></span><br><span class="line"><span class="comment">//        return R.error(Constant.VALIDATOR_ERROR, Constant.PARAM_ERROR);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求参数格式错误 <span class="doctag">@RequestBody</span>上使用<span class="doctag">@Valid</span> 实体上使用<span class="doctag">@NotNull</span>等，验证失败后抛出的异常是MethodArgumentNotValidException异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">methodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        log.error(e.getBindingResult().getFieldError().getDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(Constant.VALIDATOR_ERROR, e.getBindingResult().getFieldError().getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理Get请求中 使用<span class="doctag">@Valid</span> 验证路径中请求实体校验失败后抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">BindExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        log.error(e.getBindingResult().getFieldError().getDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(Constant.VALIDATOR_ERROR, e.getBindingResult().getFieldError().getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求参数格式错误 <span class="doctag">@RequestParam</span>上validate失败后抛出的异常是ConstraintViolationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">ConstraintViolationExceptionHandler</span><span class="params">(ConstraintViolationException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error(Constant.VALIDATOR_ERROR, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//最大的异常处理</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LukcyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LukcyException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LukcyException</span><span class="params">(String msg, Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg, e);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LukcyException</span><span class="params">(String msg, <span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LukcyException</span><span class="params">(String msg, <span class="type">int</span> code, Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg, e);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.common.untils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;String, Object&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span> &#123;</span><br><span class="line">        put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;数据返回成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="number">500</span>, <span class="string">&quot;未知异常，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="number">400</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        r.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.putAll(map);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty(message = &quot;添加课程名称不能为空&quot;,groups=&#123;ValidationGroups.Inster.class&#125;)</span></span><br><span class="line"><span class="meta">@NotEmpty(message = &quot;修改课程名称不能为空&quot;,groups=&#123;ValidationGroups.Update.class&#125;)</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;课程名称&quot;, required = true)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationGroups</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//用于添加校验</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Inster</span>&#123;&#125;;</span><br><span class="line"> <span class="comment">//用于修改校验</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Update</span>&#123;&#125;;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Delete</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用在 Controller 方法上，选择方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated(ValidationGroups.Inster.class)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常用依赖和工具类</title>
    <url>/post/47280.html</url>
    <content><![CDATA[<h1 id="小辣椒"><a href="#小辣椒" class="headerlink" title="小辣椒"></a>小辣椒</h1><p>用处：一个注解完成大量的 get、set 操作</p>
<p>idea 安装 Lombok 插件，<strong>推荐</strong>用 properties 标签来管理更加规范</p>
<p>前 3 行比较通用，所以一起先写了,1,2 那个指定 maven 的解析方式，能避免环境不一样的错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="comment">&lt;!--boot的版本如下--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"> 		 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--  小辣椒依赖,就能直接使用@Slf4j注解了，不需要额外导入  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>实体类</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">//等于自动set、get下面的属性</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>    <span class="comment">//自动空构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>   <span class="comment">//全参构造,要是少参，得再建一个构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userAcc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p><em>tip：</em>springboot 中进行单元测试，不是很规范情况直接写版本就行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--包含了junit4.12等测试框架,没有它无法调用springboot里的上下文中对象,正常引入它就对了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--如果不调用项目中模块的东西，用它就行了 &lt;scope&gt;test&lt;/scope&gt;仅限于测试代码运行时，compile是编译时--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 test 文件夹–&gt;java 文件中创建路径加类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/19 -9:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span>                        <span class="comment">//日志注解</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span>  <span class="comment">//获取上下文</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>               <span class="comment">//SpringBoot测试注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWiring</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DeviceTopoService deviceTopoService;    <span class="comment">//如果只导入junit,将空指针</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DeviceTopoEntity</span> <span class="variable">info</span> <span class="operator">=</span> deviceTopoService.getById(<span class="number">1</span>);</span><br><span class="line">        log.info(String.valueOf(info));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Fastjson2"><a href="#Fastjson2" class="headerlink" title="Fastjson2"></a>Fastjson2</h1><p>选用 2 的版本，更加的好用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>前端：都采用 post 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginM</span> = (<span class="params">datas</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/index/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: datas</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">loginM</span>(&#123; <span class="attr">userAcc</span>: <span class="variable language_">this</span>.<span class="property">username</span>, <span class="attr">userPwd</span>: <span class="variable language_">this</span>.<span class="property">password</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;...&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONObject;     <span class="comment">//核心导包</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVO <span class="title function_">loginHome</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject obj)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAcc</span> <span class="operator">=</span> obj.getString(<span class="string">&quot;userAcc&quot;</span>);</span><br><span class="line"><span class="comment">//        List&lt;String&gt; ids = obj.getList(&quot;ids&quot;,String.class);</span></span><br><span class="line"><span class="comment">////        Date date = obj.getDate(&quot;date&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> obj.getString(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> indexService.login(userAcc, userPwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h1><p>后端的拦截器配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/1/24 -17:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CheckTokenInterceptor checkTokenInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(checkTokenInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/home/**&quot;</span>) <span class="comment">//这里添加拦截的</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index/**&quot;</span>) <span class="comment">//这里是排除的</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/home/getLogList&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/swagger-ui/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/swagger2.html&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/doc.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/static/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;swagger-ui.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot-启动文本"><a href="#SpringBoot-启动文本" class="headerlink" title="SpringBoot 启动文本"></a>SpringBoot 启动文本</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"> __                            __                         ______</span><br><span class="line">/  |                          /  |                       /      \</span><br><span class="line">$$ |       __    __   _______ $$ |   __  __    __       /$$$$$$  |</span><br><span class="line">$$ |      /  |  /  | /       |$$ |  /  |/  |  /  |      $$ |__$$ |</span><br><span class="line">$$ |      $$ |  $$ |/$$$$$$$/ $$ |_/$$/ $$ |  $$ |      $$    $$ |</span><br><span class="line">$$ |      $$ |  $$ |$$ |      $$   $$&lt;  $$ |  $$ |      $$$$$$$$ |</span><br><span class="line">$$ |_____ $$ \__$$ |$$ \_____ $$$$$$  \ $$ \__$$ |      $$ |  $$ |</span><br><span class="line">$$       |$$    $$/ $$       |$$ | $$  |$$    $$ |      $$ |  $$ |</span><br><span class="line">$$$$$$$$/  $$$$$$/   $$$$$$$/ $$/   $$/  $$$$$$$ |      $$/   $$/</span><br><span class="line">                                        /  \__$$ |</span><br><span class="line">                                        $$    $$/</span><br><span class="line">                                         $$$$$$/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      ██╗     ██╗   ██╗ ██████╗██╗  ██╗██╗   ██╗ █████╗</span><br><span class="line">    ██║     ██║   ██║██╔════╝██║ ██╔╝╚██╗ ██╔╝██╔══██╗</span><br><span class="line">    ██║     ██║   ██║██║     █████╔╝  ╚████╔╝ ███████║</span><br><span class="line">    ██║     ██║   ██║██║     ██╔═██╗   ╚██╔╝  ██╔══██║</span><br><span class="line">    ███████╗╚██████╔╝╚██████╗██║  ██╗   ██║   ██║  ██║</span><br><span class="line">    ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot-分页器"><a href="#SpringBoot-分页器" class="headerlink" title="SpringBoot 分页器"></a>SpringBoot 分页器</h1><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">	main:</span><br><span class="line">   	allow-circular-references: true</span><br></pre></td></tr></table></figure>

<p>impl(有待优化，封装分页类)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResultVO getMyWeekList(String months, String id, int page, int limit) &#123;</span><br><span class="line">    PageHelper.startPage(page, limit); //一般传过来1，100条</span><br><span class="line">    List&lt;Client&gt; clientS = adHomeMapper.getMyWeekList(months, id);</span><br><span class="line">    if (clientS != null) &#123;</span><br><span class="line">        PageInfo&lt;Client&gt; goodsTbPageInfo = new PageInfo&lt;&gt;(clientS, 3);</span><br><span class="line">        int count = (int) goodsTbPageInfo.getTotal();</span><br><span class="line">        resultVO = new ResultVO(ResStatus.OK, &quot;列表信息返回成功!&quot;, count, clientS);</span><br><span class="line">    &#125;</span><br><span class="line">    return resultVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;el-table :data=&quot;</span><br><span class="line">        tableData.slice((currentPage - 1) * pageSize, currentPage * pageSize)</span><br><span class="line">      &quot;</span><br><span class="line">              ....</span><br><span class="line">		&gt;.....</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;</span><br><span class="line">           style=&quot;margin-top: 15px&quot;&gt;</span><br><span class="line">        &lt;el-pagination align=&quot;center&quot;</span><br><span class="line">                       @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">                       @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">                       :current-page=&quot;currentPage&quot;</span><br><span class="line">                       :page-sizes=&quot;[1, 3, 5]&quot;</span><br><span class="line">                       :page-size=&quot;pageSize&quot;</span><br><span class="line">                       layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">                       :total=&quot;tableData.length&quot;&gt;</span><br><span class="line">        &lt;/el-pagination&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法中：</span><br><span class="line">    handleSizeChange (val) &#123;</span><br><span class="line">      console.log(`每页$&#123;val&#125;条`)</span><br><span class="line">      this.currentPage = 1</span><br><span class="line">      this.pageSize = val</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick (row) &#123;</span><br><span class="line">      console.log(row)</span><br><span class="line">      this.$data.drawe = true</span><br><span class="line">      this.$data.userObj = row</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange (val) &#123;</span><br><span class="line">      console.log(`当前页:$&#123;val&#125;`)</span><br><span class="line">      this.currentPage = val</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">data里return中</span><br><span class="line">	  tableData: [],</span><br><span class="line">      currentPage: 1,</span><br><span class="line">      pageSize: 5,</span><br><span class="line">      total: &#x27;&#x27;,</span><br><span class="line"></span><br><span class="line">发起请求</span><br><span class="line">    getMonthsList () &#123;</span><br><span class="line">      getMyWeekList(&#123;</span><br><span class="line">        months: this.findContent,</span><br><span class="line">        id: &#x27;&#x27;,</span><br><span class="line">        page: 1,</span><br><span class="line">        limit: 100</span><br><span class="line">      &#125;).then((resp) =&gt; &#123;</span><br><span class="line">        this.$data.tableData = resp.data.data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p><em>依赖</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.JWTVerifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/1/6 -16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> EXPIRE_DATE=<span class="number">30</span>*<span class="number">610</span>*<span class="number">100000</span>;</span><br><span class="line">    <span class="comment">//token秘钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_SECRET</span> <span class="operator">=</span> <span class="string">&quot;LuckyNWA666&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">token</span> <span class="params">(String username, String password)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//过期时间</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+EXPIRE_DATE);</span><br><span class="line">            <span class="comment">//秘钥及加密算法</span></span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(TOKEN_SECRET);</span><br><span class="line">            <span class="comment">//设置头部信息</span></span><br><span class="line">            Map&lt;String,Object&gt; header = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            header.put(<span class="string">&quot;typ&quot;</span>,<span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">            header.put(<span class="string">&quot;alg&quot;</span>,<span class="string">&quot;HS256&quot;</span>);</span><br><span class="line">            <span class="comment">//携带username，password信息，生成签名</span></span><br><span class="line">            token = JWT.create()</span><br><span class="line">                    .withHeader(header)</span><br><span class="line">                    .withClaim(<span class="string">&quot;username&quot;</span>,username)</span><br><span class="line">                    .withClaim(<span class="string">&quot;password&quot;</span>,password).withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@desc</span>   验证token，通过返回true</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@create</span> 2019/1/18/018 9:39</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@params</span> [token]需要校验的串</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(TOKEN_SECRET);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.nwa.bean.ResultVO;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/1/24 -17:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        String token = request.getParameter(&quot;token&quot;);//这个是通过请求里面带token参数来传的，默认请求头传的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();<span class="comment">//这里请求是options 这里有3次握手，预检机制</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equalsIgnoreCase(method)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入拦截器&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;token的值是&quot;</span> + token);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ResultVO</span> <span class="variable">resultVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.FAIL, <span class="string">&quot;请先登录&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            doResponse(response, resultVO);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//验证token</span></span><br><span class="line">                <span class="comment">//如果token正确，有效期内则这正常执行，否则抛出异常</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">verify</span> <span class="operator">=</span> JWTUtils.verify(token);</span><br><span class="line">                <span class="keyword">return</span> verify;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                <span class="type">ResultVO</span> <span class="variable">resultVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.FAIL, <span class="string">&quot;登录过期&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                doResponse(response, resultVO);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                <span class="type">ResultVO</span> <span class="variable">resultVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.FAIL, <span class="string">&quot;token不合法&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                doResponse(response, resultVO);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="type">ResultVO</span> <span class="variable">resultVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.FAIL, <span class="string">&quot;请先登录&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                doResponse(response, resultVO);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doResponse</span><span class="params">(HttpServletResponse response, ResultVO resultVO)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(resultVO);</span><br><span class="line">        out.println(s);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">登录成功时候</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.token(acc, pwd);</span><br><span class="line">            client.setToken(token);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>前端 request 中带上请求头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">登录后记得保存;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, data.<span class="property">token</span>);</span><br><span class="line">接下去每次访问接口携带;</span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">// 比如判断是否有token</span></span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">token</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="Md5"><a href="#Md5" class="headerlink" title="Md5"></a>Md5</h1><p>没有加盐可以被破解，需优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--md5依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/1/25 -16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Utils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md5</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">            md5.update(pwd.getBytes());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md5.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较简单，等以后再完善</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">md5Pwd</span> <span class="operator">=</span> MD5Utils.md5(pwd);</span><br><span class="line">(pwdD.equals(md5Pwd))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面一键生成代码的依赖，在加个配置类很方便，感觉比MybatisX插件好用，有头部注释--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>工具类，修改配置即可使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/4/18 -15:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/weeklydb?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;luckyNwa&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/java&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 全局配置</span></span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.nwa&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="string">&quot;&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/mapper&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//策略配置</span></span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;tb_weeks&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;tb_&quot;</span>, <span class="string">&quot;sys_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h1><p>springboot 中的自定义注解加上 aop</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        日志处理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义注解类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解类</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line">    String <span class="title function_">operationType</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;    <span class="comment">//操作人</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">operationName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;    <span class="comment">//操作名称</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;            <span class="comment">//状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.aop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nwa.bean.Client;</span><br><span class="line"><span class="keyword">import</span> com.nwa.service.impl.SysLogService;</span><br><span class="line"><span class="keyword">import</span> com.nwa.until.ClientInfoUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLogA</span> &#123;             <span class="comment">//切面类</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService sysLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.nwa.controller.IndexController.*(..))&quot;)</span>    <span class="comment">//切点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;logPointCut()&quot;)</span>    <span class="comment">//后置加强</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logTest</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line"><span class="comment">//        HttpSession session = request.getSession();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">browser</span> <span class="operator">=</span> ClientInfoUtil.getBrowserInfo(request); <span class="comment">//获取浏览器名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> ClientInfoUtil.getOperatingSystem(request);  <span class="comment">//获取操作系统</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String userName = (String) session.getAttribute(&quot;userName&quot;);</span></span><br><span class="line"><span class="comment">//       if(userName==null)&#123;</span></span><br><span class="line"><span class="comment">//           userName=&quot;lucky&quot;;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String userId = (String) session.getAttribute(&quot;userId&quot;);</span></span><br><span class="line"><span class="comment">//        if(userId==null)&#123;</span></span><br><span class="line"><span class="comment">//            userId=&quot;2727&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> ClientInfoUtil.getIP(request); <span class="comment">//获取ip</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            String targetName = joinPoint.getTarget().getClass().getName();</span></span><br><span class="line"><span class="comment">//            String methodName = joinPoint.getSignature().getName();</span></span><br><span class="line"><span class="comment">//            Object[] arguments = joinPoint.getArgs();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取自定义注解里面的值</span></span><br><span class="line">            <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">            <span class="type">SysLog</span> <span class="variable">sysLog</span> <span class="operator">=</span> method.getAnnotation(SysLog.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">operationType</span> <span class="operator">=</span> sysLog.operationType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">operationName</span> <span class="operator">=</span> sysLog.operationName();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//*========存进数据库=========*//</span></span><br><span class="line">            <span class="type">Client</span> <span class="variable">client1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">            client1.setCreateBy(operationType);</span><br><span class="line"><span class="comment">//            client1.setLogMethod((targetName + &quot;.&quot; + methodName + &quot;()&quot;) + &quot;.&quot; + operationType);</span></span><br><span class="line">            client1.setRequestIp(ip);</span><br><span class="line"><span class="comment">//            client1.setLogCreateBy(userName);</span></span><br><span class="line">            client1.setLogTip(operationName);</span><br><span class="line">            client1.setLogSys(os);</span><br><span class="line">            client1.setLogBrowser(browser);</span><br><span class="line">            client1.setCreateDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="comment">//保存数据库</span></span><br><span class="line">            sysLogService.save(client1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//记录本地异常日志</span></span><br><span class="line">            log.error(<span class="string">&quot;==后置通知异常==&quot;</span>);</span><br><span class="line">            log.error(<span class="string">&quot;异常信息:&#123;&#125;------&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">接着只需要去Con那边对应的方法上面加入即可</span><br><span class="line"> <span class="meta">@SysLog(operationType = &quot;admin&quot;, operationName = &quot;登录成功&quot;, value = &quot;200&quot;)</span> <span class="comment">//自定义注解来获取日志</span></span><br></pre></td></tr></table></figure>

<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>接着这个下面 2 个主题也同样是 api 生成</p>
<p>正常 1-2 依赖就能用了，为了好看加了 3 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  api文档需要的依赖  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>工具类</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/1/15 -20:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//添加依赖这个才有,下面端口去配置里指定</span></span><br><span class="line"><span class="comment">//访问的地址 http://localhost:9999/swagger-ui.html</span></span><br><span class="line"><span class="comment">//如果添加ui插件。 http://localhost:9999/doc.html</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        ApiInfoBuilder apiInfoBuilder = new ApiInfoBuilder();</span></span><br><span class="line"><span class="comment">//        apiInfoBuilder.title(&quot;小维的后端接口说明&quot;)</span></span><br><span class="line"><span class="comment">//        .description(&quot;此文档详细说明了小维前后端项目端口规范...&quot;).version(&quot;v1.0&quot;)</span></span><br><span class="line"><span class="comment">//                .contact(new Contact(&quot;luckyNWA&quot;,&quot;www.nwa.com&quot;,&quot;1656213092@qq.com&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        ApiInfo apiInfo = apiInfoBuilder.build();</span></span><br><span class="line"><span class="comment">//        //指定文档中的封面信息；版本作者等</span></span><br><span class="line"><span class="comment">//        Docket docket = new Docket(DocumentationType.SWAGGER_2) //指定文档风格</span></span><br><span class="line"><span class="comment">//                .apiInfo(apiInfo).select()</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;com.nwa.controller&quot;))//扫描这个包下所有接口</span></span><br><span class="line"><span class="comment">//                .paths(PathSelectors.any())//PathSelectors.regx(&quot;/user/&quot;)//正则只要user下的接口</span></span><br><span class="line"><span class="comment">//                .build();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        return docket;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.nwa.controller&quot;</span>))<span class="comment">//扫描这个包下所有接口</span></span><br><span class="line">                <span class="comment">//加了ApiOperation注解的类，才生成接口文档</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span></span><br><span class="line">                <span class="comment">//包下的类，才生成接口文档</span></span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.basePackage(&quot;io.sysssc.controller&quot;))</span></span><br><span class="line"><span class="comment">//                .paths(PathSelectors.any())</span></span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(security());  <span class="comment">//主要关注点--统一填写一次token</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">luckyNWA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;luckyNWA&quot;</span>, <span class="string">&quot;www.nwa.com&quot;</span>, <span class="string">&quot;1656213092@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;小维的API接口说明&quot;</span>,</span><br><span class="line">                <span class="string">&quot;此文档详细说明了小维前后端项目端口规范&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;www.nwa.com&quot;</span>,</span><br><span class="line">                luckyNWA,</span><br><span class="line">                <span class="string">&quot;apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;www.nwa.com&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title function_">security</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;ApiKey&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>other</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">控制层中</span><br><span class="line">    可以在类上面加  <span class="meta">@Api(value = &quot;提供了后台主页面的各种接口&quot;, tags = &quot;后台主页面接口&quot;)</span>  <span class="comment">//这是swagger里类的描述</span></span><br><span class="line">	可以在方法上面加</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改密码&quot;)</span><span class="comment">//这是swagger里方法的描述</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;userAcc&quot;, value = &quot;账号&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;newPassword&quot;, value = &quot;新密码&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;newPassword&quot;, value = &quot;老密码&quot;, required = true),</span></span><br><span class="line"><span class="meta">    &#125;)</span><span class="comment">//这里是swagger里面的属性描述</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/modifyPwd&quot;)</span> <span class="comment">//符合RESTFUL接口风格,别用RequsetMapping</span></span><br><span class="line"></span><br><span class="line">实体类中</span><br><span class="line">    可以在类上面加   <span class="meta">@ApiModel(value = &quot;周报里面的实体&quot;, description = &quot;封装的周报对象&quot;)</span><span class="comment">//文档响应的类说明</span></span><br><span class="line">    可以在属性上面加   <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span>  <span class="comment">//文档属性的说明</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h1><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--swagger的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>YML</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="comment"># 开启增强配置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#开启生产环境屏蔽</span></span><br><span class="line">  <span class="attr">production:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 开启Swagger的Basic认证功能,默认是false</span></span><br><span class="line">  <span class="attr">basic:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Basic认证用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test</span></span><br><span class="line">    <span class="comment"># Basic认证密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">  <span class="attr">setting:</span></span><br><span class="line">    <span class="attr">enableSearch:</span> <span class="literal">false</span> <span class="comment"># 开启搜索功能</span></span><br><span class="line">    <span class="attr">enableHomeCustom:</span> <span class="literal">true</span>  <span class="comment">#开启自定义主页</span></span><br><span class="line">    <span class="attr">homeCustomLocation:</span> <span class="string">classpath:markdown/home.md</span> <span class="comment">#地址</span></span><br></pre></td></tr></table></figure>

<p>去 resources–&gt;新建 markdown—&gt;home.md</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">昵称：Lucky 小 a</span><br><span class="line"></span><br><span class="line">职业：全栈开发工程师</span><br><span class="line"></span><br><span class="line">博客地址：http://luckynwa.top</span><br><span class="line"></span><br><span class="line">联系邮箱：1656213092@qq.com</span><br></pre></td></tr></table></figure>

<p>Knife4jConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.extension.OpenApiExtensionResolver;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.github.xiaoymin.knife4j.core.util.CollectionUtils.newArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * knife4j配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luckyNwa</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/10/17</span></span><br><span class="line"><span class="comment"> */</span><span class="comment">//教程地址：https://segmentfault.com/a/1190000041143413#item-6-12</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OpenApiExtensionResolver openApiExtensionResolver;<span class="comment">//全构造注解加他等于引入这个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建Docket对象，指定文档类型为OpenAPI 3.0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//配置API信息</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//配置扫描路径</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//扫描所有@ApiOperation注解的类</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">//扫描指定包下的类</span></span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.basePackage(&quot;com.nwa.modules.lucky.controller&quot;))</span></span><br><span class="line">                <span class="comment">//扫描所有路径</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                <span class="comment">//创建</span></span><br><span class="line">                .build()</span><br><span class="line">                <span class="comment">//添加扩展</span></span><br><span class="line">                <span class="comment">//.extensions(openApiExtensionResolver.buildExtensions(&quot;Lucky&quot;))</span></span><br><span class="line">                <span class="comment">//添加设置自定义主页这个</span></span><br><span class="line">                .extensions(openApiExtensionResolver.buildSettingExtensions())</span><br><span class="line">                <span class="comment">//自定义时间格式</span></span><br><span class="line">                <span class="comment">// .directModelSubstitute(java.util.Date.class, String.class)</span></span><br><span class="line">                <span class="comment">//添加安全认证</span></span><br><span class="line">                .securitySchemes(security());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title function_">security</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//添加ApiKey认证</span></span><br><span class="line">        <span class="keyword">return</span> newArrayList(<span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;Token&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//配置API信息</span></span><br><span class="line">        <span class="type">Contact</span> <span class="variable">luckyNWA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;luckyNWA&quot;</span>, <span class="string">&quot;http://luckynwa.top&quot;</span>, <span class="string">&quot;1656213092@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;小维的API接口说明&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;多个应用系统之间的身份验证和访问控制的接口&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://luckynwa.top&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>).contact(luckyNWA).license(<span class="string">&quot;apache 2.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>后端代码接收解析</title>
    <url>/post/35818.html</url>
    <content><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ul>
<li><p>对于 GET 方法，会将数据转换为 query string。例如 { name: ‘name’, age: 18 } 转换后的结果是 name&#x3D;name&amp;age&#x3D;18。</p>
</li>
<li><p>对于 POST 方法且 header[‘content-type’] 为 application&#x2F;json 的数据，会进行 JSON 序列化。</p>
</li>
<li><p>对于 POST 方法且 header[‘content-type’] 为 application&#x2F;x-www-form-urlencoded 的数据，会将数据转换为 query string。</p>
</li>
</ul>
<p>如果前端是 post 请求，后端直接指定请求字段，那么前端发送的需要 qs 包装一下<br>this.$qs.stringify({ acc: this.form.acc, pwd: this.form.pwd })</p>
<h1 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/method01&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">method01</span><span class="params">(String name, Integer age, Double mon)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setName(name);</span><br><span class="line">       user.setAge(age);</span><br><span class="line">       user.setMoney(mon);</span><br><span class="line">       <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种格式接收的是 method01?name&#x3D;zhangsan&amp;age&#x3D;15&amp;mon&#x3D;20.0 格式的传参,并且要求参数名与 url 地址中携带的参数名完全一致;</p>
<p>这种形式传参与请求方式无关,get post .put 等皆可;</p>
<h1 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/method02&quot;)</span><br><span class="line">    public String method02(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                           @RequestParam(&quot;age&quot;) Integer age,</span><br><span class="line">                           @RequestParam(value = &quot;money&quot;, required = false) Double mon) &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        user.setMoney(mon);</span><br><span class="line">        return JSON.toJSONString(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式原理上与第一种一致,都是接收请求 url 地址种的参数,所以与请求方式无关;</p>
<p>这种方式注解种的 value 值会去映射请求 url 中的同名参数取参然后赋值给加注解的形参,所以注解中的参数名必须与 url 中一致,而方法形参名可以根据自身需求灵活变更;</p>
<p>注意加此注解的 required 属性 默认为 true,也就是接收请求时会根据 value 去 url 寻找同名参数,如果没找到会报错;</p>
<p>所以如果有某一参数可能不传的情况,需要将 required 属性设为 false</p>
<h1 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/method03&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">method03</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>@RequestBody 则是接收<a href="https://so.csdn.net/so/search?q=%E8%AF%B7%E6%B1%82%E4%BD%93&spm=1001.2101.3001.7020">请求体</a>中的 JSON 字符串参数直接映射实体对象,所以 body 类型必须是 JSON 字符串</p>
<p>注意实体类中的属性名称必须与<a href="https://so.csdn.net/so/search?q=JOSN&spm=1001.2101.3001.7020">JOSN</a>串中的参数 key 名称完全一致,不同命参数无法正确接收;;</p>
<p>Post 请求携带 body 参数</p>
<p>通常 get 请求通过 url 携带参数可以根据 url 作为 key 缓存资源,常用的静态资源服务器都是这种原理,如果参数在 body 中这种方式就失效了</p>
<h1 id="方法-4"><a href="#方法-4" class="headerlink" title="方法 4"></a>方法 4</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/method04&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">method04</span><span class="params">(User user)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这种方式要求请求中的参数名与实体中的属性名一致即可自动映射到实体属性中;</p>
<p>支持 url 拼接的多个 params 传参</p>
<p>支持 post 请求 的 form 类型传参(form-data,x-www-form-urlencoded), 不支持 JSON 传参</p>
<h1 id="方法-5"><a href="#方法-5" class="headerlink" title="方法 5"></a>方法 5</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/method06&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">method06</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setName(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">       user.setAge(Integer.valueOf(request.getParameter(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">       user.setMoney(Double.parseDouble(request.getParameter(<span class="string">&quot;money&quot;</span>)));</span><br><span class="line">       <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>传统的接收参数方式,可以接收 url params 传参,支持 post from 类型传参,不支持 JSON 传参</p>
<p>注意如果请求中未传递指定名称的参数,取参时会报错</p>
<h1 id="方法-6"><a href="#方法-6" class="headerlink" title="方法 6"></a>方法 6</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/method07/&#123;name&#125;/&#123;age&#125;/&#123;money&#125;&quot;,&quot;/method07/&#123;name&#125;/&#123;money&#125;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method07</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(value = &quot;age&quot;, required = false)</span> Integer age,</span></span><br><span class="line"><span class="params">                           <span class="meta">@PathVariable(&quot;money&quot;)</span> Double money)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setMoney(money);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过@PathVariable 实现 restFul 风格传参,直接将参数拼接到 url 地址中,支持 get,post,put delete 等多种请求</p>
<p>required 属性默认为 true ,不传递参数会报错;</p>
<p>如果出现某个参数未传递的情况可以通过设置 required 属性为 false 并设置多个 value 字符串的形式实现</p>
<h1 id="方法-7"><a href="#方法-7" class="headerlink" title="方法 7"></a>方法 7</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">@RequiresPermissions(&quot;sys:config:list&quot;)</span><br><span class="line">public R list(@RequestParam Map&lt;String, Object&gt; params)&#123;</span><br><span class="line">	PageUtils page = sysConfigService.queryPage(params);</span><br><span class="line"></span><br><span class="line">	return R.ok().put(&quot;page&quot;, page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="方法-8"><a href="#方法-8" class="headerlink" title="方法 8"></a>方法 8</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/info/&#123;id&#125;&quot;)</span><br><span class="line">@RequiresPermissions(&quot;sys:config:info&quot;)</span><br><span class="line">public R info(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">	SysConfigEntity config = sysConfigService.getById(id);</span><br><span class="line"></span><br><span class="line">	return R.ok().put(&quot;config&quot;, config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法-9"><a href="#方法-9" class="headerlink" title="方法 9"></a>方法 9</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SysLog(&quot;保存配置&quot;)</span><br><span class="line">@PostMapping(&quot;/save&quot;)</span><br><span class="line">@RequiresPermissions(&quot;sys:config:save&quot;)</span><br><span class="line">public R save(@RequestBody SysConfigEntity config)&#123;</span><br><span class="line">	ValidatorUtils.validateEntity(config);</span><br><span class="line"></span><br><span class="line">	sysConfigService.saveConfig(config);</span><br><span class="line"></span><br><span class="line">	return R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法-10"><a href="#方法-10" class="headerlink" title="方法 10"></a>方法 10</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public ResultVO loginHome(@RequestBody JSONObject obj) &#123;</span><br><span class="line">        String userAcc = obj.getString(&quot;userAcc&quot;);</span><br><span class="line">//        List&lt;String&gt; ids = obj.getList(&quot;ids&quot;,String.class);</span><br><span class="line">////        Date date = obj.getDate(&quot;date&quot;);</span><br><span class="line">        String userPwd = obj.getString(&quot;userPwd&quot;);</span><br><span class="line">        return indexService.login(userAcc, userPwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常用功能实现</title>
    <url>/post/25269.html</url>
    <content><![CDATA[<p>tip：无特别标明，技术栈默认是 springboot+vue2+mybatis+mysql+elementui</p>
<h1 id="置顶功能"><a href="#置顶功能" class="headerlink" title="置顶功能"></a>置顶功能</h1><p>1、给数据库添加一个字段来标识 is_top 0 是默认 1 置顶</p>
<p>2、就正常去查询这个列表</p>
<p>3、去处理这列表，并返回有置顶的列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        List&lt;DeviceTopoEntity&gt; dataList = baseMapper.queryPageList(page, params);</span><br><span class="line">        List&lt;DeviceTopoEntity&gt; resultList = dataList.stream()</span><br><span class="line">                .sorted(Comparator.comparing(DeviceTopoEntity::getIsTop, (s1, s2) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s1.equals(<span class="string">&quot;1&quot;</span>) &amp;&amp; !s2.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!s1.equals(<span class="string">&quot;1&quot;</span>) &amp;&amp; s2.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        如果 s1 是 &quot;1&quot; 而 s2 不是 &quot;1&quot;，则将 s1 排在 s2 前面；</span></span><br><span class="line"><span class="comment">//        如果 s1 不是 &quot;1&quot; 而 s2 是 &quot;1&quot;，则将 s1 排在 s2 后面；</span></span><br><span class="line"><span class="comment">//        如果 s1 和 s2 都不是 &quot;1&quot; 或都是 &quot;1&quot;，则使用默认的字符串比较规则。</span></span><br></pre></td></tr></table></figure>

<h1 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h1><p>1、单个删除与批量删除，当实现批量，单个直接被兼容</p>
<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><ul>
<li>api</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">delMyWeekOne</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/delMyWeekOne&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//删除多</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">delMyWeekMore</span> = (<span class="params">list1</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/delMyWeekMore&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">list</span>: list1,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>前端业务</li>
</ul>
<p>通过点击表格前面的复选框来进行传入 id 数组，这是点击删除按钮触发 methods 里的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; delMyWeekOne &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; delMyWeekMore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">deleteSelectedRows</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;请选择要删除的行&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确定要删除选中的行吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行删除操作</span></span><br><span class="line">        <span class="keyword">const</span> filteredIds = [</span><br><span class="line">          ...<span class="keyword">new</span> <span class="title class_">Set</span>(</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">ids, array</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> idsArray = <span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> obj.<span class="property">id</span>)</span><br><span class="line">              <span class="keyword">return</span> [...ids, ...idsArray]</span><br><span class="line">            &#125;, [])</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">// console.log(filteredIds)</span></span><br><span class="line">        <span class="keyword">const</span> result = filteredIds.<span class="title function_">map</span>(<span class="title class_">String</span>).<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        <span class="comment">// console.log(result) // 输出: &quot;1, 2, 3, 4&quot; 多删除兼容了单删除</span></span><br><span class="line">        <span class="comment">// delMyWeekOne(&#123; idOne: value &#125;).then((res) =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   if (res.data.code == 200) &#123;</span></span><br><span class="line">        <span class="comment">//     this.notifySucceed(&#x27;删除成功！&#x27;)</span></span><br><span class="line">        <span class="comment">//     this.getMonthsList()</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">delMyWeekMore</span>(result).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">notifySucceed</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getMonthsList</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><ul>
<li>后端控制层 Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@DeleteMapping(&quot;/delMyWeekOne&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVO <span class="title function_">delMyWeekOne</span><span class="params">(<span class="type">int</span> idOne)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adHomeService.delMyWeekOne(idOne);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//批量删除,过来的数据1,2,3这种。这个实现了上面个就没用了</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delMyWeekMore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVO <span class="title function_">delMyWeekMore</span><span class="params">( String[] list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adHomeService.delMyWeekMore(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后去 service 层添加这个方法，再去实现重写它</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResultVO <span class="title function_">delMyWeekOne</span><span class="params">(<span class="type">int</span> idOne)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> adHomeMapper.delMyWeekOne(idOne);</span><br><span class="line">      <span class="keyword">if</span> (result&gt;<span class="number">0</span>) &#123;</span><br><span class="line">          resultVO = <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.OK, <span class="string">&quot;删除成功!&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultVO;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResultVO <span class="title function_">delMyWeekMore</span><span class="params">(String[] list)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> adHomeMapper.delMyWeekMore(list);</span><br><span class="line">      <span class="keyword">if</span> (result&gt;<span class="number">0</span>) &#123;</span><br><span class="line">          resultVO = <span class="keyword">new</span> <span class="title class_">ResultVO</span>(ResStatus.OK, <span class="string">&quot;删除成功!&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultVO;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapper 层这边也能自动生成，再去 xml 文件那写 sql 语</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delMyWeekOne&quot;</span>&gt;</span></span><br><span class="line">   update tb_months set state=0 where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delMyWeekMore&quot;</span>&gt;</span></span><br><span class="line">    update tb_months set state=0</span><br><span class="line">    WHERE id IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="批量导出"><a href="#批量导出" class="headerlink" title="批量导出"></a>批量导出</h1><p>场景 要求点击展示一周的周报数据，比如周一早上 2 条下午 2 条还有备注 2—–&gt;周日….</p>
<p>表设计时候直接一张表，一行数据就是一周的数据、好处就是用 plus 插入比较方便</p>
<p>easyExcel 可以导出字段那种，一条就是一列，但是我这个格式并不是那种，所以只能采取原生自己绘制表格，在填充数据的方式，很麻烦！</p>
<h2 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h2><ul>
<li>api</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//导出1个选中的行 export const loadOne = (params) =&gt; &#123; return request(&#123; url:</span><br><span class="line">&#x27;/home/export&#x27;, method: &#x27;get&#x27;, params &#125;) &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>前端业务</p>
<p>通过点击表格前面的复选框来进行传入 id，由于后端那边设计需要传 2 个参数，其实就是 months 表的 id，再通过这个 id 获取具体周报内容</p>
<p>excel 文件的导出，后端生成并保存到后端服务器，前端通过 url 访问并自动下载（类似于图片上传）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loadMyWeek () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;请选择要下载的周报!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确定要下载选中的周报吗？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取多行</span></span><br><span class="line">    <span class="keyword">const</span> filteredIds = [</span><br><span class="line">      ...<span class="keyword">new</span> <span class="title class_">Set</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">ids, array</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> idsArray = <span class="variable language_">this</span>.<span class="property">selectedRows</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> obj.<span class="property">id</span>)</span><br><span class="line">          <span class="keyword">return</span> [...ids, ...idsArray]</span><br><span class="line">        &#125;, [])</span><br><span class="line">      )</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这个方法是下载一个excel  //loadOne(&#123;monthsId:this.selectedRows[0].id,id:this.selectedRows[0].id&#125;).then((res) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   window.location.href = res.data</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// 下面下载多个</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; filteredIds.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">loadOne</span>(&#123; <span class="attr">monthsId</span>: filteredIds[i], <span class="attr">id</span>: filteredIds[i] &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = res.<span class="property">data</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h2><ul>
<li>依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xls版本的03版本 快，但是行数有限制65536  这是依赖--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>后端控制层 Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;excel导出&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="meta">@SysLog(operationType = &quot;用户操作&quot;, operationName = &quot;excel导出&quot;, value = &quot;200&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">export</span><span class="params">(String monthsId, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line">    <span class="keyword">return</span> adHomeService.export(monthsId, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后去 service 层添加这个方法，再去实现重写它</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">export</span><span class="params">(String monthsId, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Client&gt; clientS = adHomeMapper.getMyWeekList(<span class="string">&quot;&quot;</span>, monthsId);</span><br><span class="line">    <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> clientS.stream().filter(o -&gt; o.getId() == Integer.valueOf(monthsId)).findFirst().get();</span><br><span class="line">    log.info(<span class="string">&quot;进入下载！excel&quot;</span>);</span><br><span class="line">    QueryWrapper&lt;MyPlus&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    wrapper.eq(<span class="string">&quot;months_id&quot;</span>, monthsId);</span><br><span class="line">    <span class="type">MyPlus</span> <span class="variable">myPlus</span> <span class="operator">=</span> myPlusMapper.selectOne(wrapper);</span><br><span class="line">    <span class="keyword">return</span> Excel.simpleRead(response, myPlus, client);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自己封装的工具类，生成固定的表格模板</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.until;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/9 -13:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nwa.bean.Client;</span><br><span class="line"><span class="keyword">import</span> com.nwa.bean.MyPlus;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellStyle;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2023/7/9 -13:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Excel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">simpleRead</span><span class="params">(HttpServletResponse response, MyPlus myPlus, Client client)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line"><span class="comment">//        String p = &quot;D:\\workspace\\JavaSpace\\weeklyA-master\\&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">l</span> <span class="operator">=</span> <span class="string">&quot;target/classes/static/files/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;周报&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getMonday()) + <span class="string">&quot;至&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getSunday()) + <span class="string">&quot;.xls&quot;</span>;</span><br><span class="line">        response.reset();</span><br><span class="line">        <span class="comment">//设置响应头，</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/msexcel&quot;</span>);</span><br><span class="line">        <span class="comment">//创建工作簿</span></span><br><span class="line">        <span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">//设置它的样式</span></span><br><span class="line">        <span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">        cellStyle.setAlignment(CellStyle.ALIGN_CENTER);<span class="comment">//增加水平居中样式-old</span></span><br><span class="line">        cellStyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);<span class="comment">//增加垂直居中样式-old</span></span><br><span class="line">        <span class="comment">//创建工作表</span></span><br><span class="line">        <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;周报表&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个行,0就是第一行一般都是表头,给row加列就是第一行的每一列了</span></span><br><span class="line">        <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建表头</span></span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell1</span> <span class="operator">=</span> row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell1.setCellValue(<span class="string">&quot;周时间&quot;</span>);</span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell2</span> <span class="operator">=</span> row.createCell(<span class="number">1</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">&quot;日期&quot;</span>);</span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                <span class="number">1</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                <span class="number">2</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">        ));</span><br><span class="line">        cell2.setCellStyle(cellStyle);    <span class="comment">// 应用于单元格居中</span></span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell4</span> <span class="operator">=</span> row.createCell(<span class="number">3</span>);</span><br><span class="line">        cell4.setCellValue(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell5</span> <span class="operator">=</span> row.createCell(<span class="number">4</span>);</span><br><span class="line">        cell5.setCellValue(<span class="string">&quot;具体事宜&quot;</span>);</span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                <span class="number">4</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                <span class="number">9</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">        ));</span><br><span class="line">        cell5.setCellStyle(cellStyle);    <span class="comment">// 应用于单元格居中</span></span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell6</span> <span class="operator">=</span> row.createCell(<span class="number">10</span>);</span><br><span class="line">        cell6.setCellValue(<span class="string">&quot;标记&quot;</span>);</span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">cell7</span> <span class="operator">=</span> row.createCell(<span class="number">11</span>);</span><br><span class="line">        cell7.setCellValue(<span class="string">&quot;结果分析&quot;</span>);</span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                <span class="number">0</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                <span class="number">11</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">        ));</span><br><span class="line">        cell7.setCellStyle(cellStyle);    <span class="comment">// 应用于单元格居中</span></span><br><span class="line">        <span class="comment">//表头结束</span></span><br><span class="line">        <span class="comment">//绘制合并有规律的单元格</span></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;   <span class="comment">//合并有规律的单元格</span></span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">0</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">0</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">1</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">2</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">4</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">9</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">3</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">3</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">4</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">9</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">2</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">2</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">4</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">9</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">4</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">9</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">4</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">11</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">3</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">3</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">11</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">2</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">2</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">11</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i - <span class="number">1</span>,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">11</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//合并1-2之间的单元格</span></span><br><span class="line">            sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(</span><br><span class="line">                    <span class="number">5</span> * i,  <span class="comment">// 第一行（从0开始）</span></span><br><span class="line">                    <span class="number">5</span> * i,  <span class="comment">// 最后一行（从0开始）</span></span><br><span class="line">                    <span class="number">0</span>,  <span class="comment">// 第一列（从0开始）</span></span><br><span class="line">                    <span class="number">16</span>  <span class="comment">// 最后一列（从0开始）</span></span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line"><span class="comment">//周1-日可以绘制的部分</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">weekDay</span> <span class="operator">=</span> (i == <span class="number">1</span>) ? <span class="string">&quot;星期一&quot;</span> :</span><br><span class="line">                    (i == <span class="number">2</span>) ? <span class="string">&quot;星期二&quot;</span> :</span><br><span class="line">                            (i == <span class="number">3</span>) ? <span class="string">&quot;星期三&quot;</span> :</span><br><span class="line">                                    (i == <span class="number">4</span>) ? <span class="string">&quot;星期四&quot;</span> :</span><br><span class="line">                                            (i == <span class="number">5</span>) ? <span class="string">&quot;星期五&quot;</span> :</span><br><span class="line">                                                    (i == <span class="number">6</span>) ? <span class="string">&quot;星期六&quot;</span> :</span><br><span class="line">                                                            <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line"></span><br><span class="line">            sheet.createRow(<span class="number">5</span> * i - <span class="number">4</span>).createCell(<span class="number">0</span>).setCellValue(weekDay);</span><br><span class="line">            sheet.getRow(<span class="number">5</span> * i - <span class="number">4</span>).getCell(<span class="number">0</span>).setCellStyle(cellStyle); <span class="comment">//设置星期一居中</span></span><br><span class="line">            sheet.getRow(<span class="number">5</span> * i - <span class="number">4</span>).createCell(<span class="number">1</span>).setCellStyle(cellStyle);<span class="comment">//日期位置</span></span><br><span class="line">            sheet.createRow(<span class="number">5</span> * i - <span class="number">3</span>).createCell(<span class="number">3</span>).setCellValue(<span class="string">&quot;上午&quot;</span>);</span><br><span class="line">            sheet.createRow(<span class="number">5</span> * i - <span class="number">2</span>).createCell(<span class="number">3</span>).setCellValue(<span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            sheet.createRow(<span class="number">5</span> * i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//星期1的赋值</span></span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">1</span>).getCell(<span class="number">1</span>).setCellValue(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getMonday()));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">1</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getMonMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">2</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getMonMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">3</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getMonAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">4</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getMonAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">1</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getMonMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">2</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getMonMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">3</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getMonMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">4</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getMonAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">1</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getMonMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">2</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getMonMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">3</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getMonAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">4</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getMonAfR2());</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//星期2的部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Calendar calendar = Calendar.getInstance();</span></span><br><span class="line"><span class="comment">//        calendar.setTime(client.getMonday());</span></span><br><span class="line"><span class="comment">//        calendar.add(Calendar.DAY_OF_MONTH, 1);</span></span><br><span class="line"><span class="comment">//        // 获取结果</span></span><br><span class="line"><span class="comment">//        Date nextDay = calendar.getTime();</span></span><br><span class="line"><span class="comment">//        String formattedNextDay = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(nextDay);</span></span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">6</span>).getCell(<span class="number">1</span>).setCellValue(DateTimeUtils.addDate(client.getMonday(), <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">6</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getTuMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">7</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getTuMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">8</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getTuAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">9</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getTuAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">6</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getTuMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">7</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getTuMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">8</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getTuAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">9</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getTuAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">6</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getTuMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">7</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getTuMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">8</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getTuAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">9</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getTuAfR2());</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//星期3的部分</span></span><br><span class="line">        sheet.getRow(<span class="number">11</span>).getCell(<span class="number">1</span>).setCellValue(DateTimeUtils.addDate(client.getMonday(), <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">11</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getWeMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">12</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getWeMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">13</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getWeAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">14</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getWeAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">11</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getWeMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">12</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getWeMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">13</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getWeAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">14</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getWeAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">11</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getWeMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">12</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getWeMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">13</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getWeAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">14</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getWeAfR2());</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//            //星期4的部分</span></span><br><span class="line">        sheet.getRow(<span class="number">16</span>).getCell(<span class="number">1</span>).setCellValue(DateTimeUtils.addDate(client.getMonday(), <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">16</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getThMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">17</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getThMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">18</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getThAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">19</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getThAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">16</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getThMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">17</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getThMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">18</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getThAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">19</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getThAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">16</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getThMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">17</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getThMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">18</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getThAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">19</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getThAfR2());</span><br><span class="line"><span class="comment">////-----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//            //星期5的部分</span></span><br><span class="line">        sheet.getRow(<span class="number">21</span>).getCell(<span class="number">1</span>).setCellValue(DateTimeUtils.addDate(client.getMonday(), <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">21</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getFrMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">22</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getFrMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">23</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getFrAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">24</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getFrAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">21</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getFrMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">22</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getFrMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">23</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getFrAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">24</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getFrAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">21</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getFrMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">22</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getFrMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">23</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getFrAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">24</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getFrAfR2());</span><br><span class="line"><span class="comment">////-----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//            //星期6的部分</span></span><br><span class="line">        sheet.getRow(<span class="number">26</span>).getCell(<span class="number">1</span>).setCellValue(DateTimeUtils.addDate(client.getSunday(), -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">26</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSaMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">27</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSaMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">28</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSaAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">29</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSaAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">26</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSaMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">27</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSaMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">28</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSaAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">29</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSaAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">26</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSaMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">27</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSaMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">28</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSaAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">29</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSaAfR2());</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////-----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//            //星期7的部分</span></span><br><span class="line">        sheet.getRow(<span class="number">31</span>).getCell(<span class="number">1</span>).setCellValue(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getSunday()));</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">31</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSuMoA1());</span><br><span class="line">        sheet.getRow(<span class="number">32</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSuMoA2());</span><br><span class="line">        sheet.getRow(<span class="number">33</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSuAfA1());</span><br><span class="line">        sheet.getRow(<span class="number">34</span>).createCell(<span class="number">4</span>).setCellValue(myPlus.getSuAfA2());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">31</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSuMoA1S());</span><br><span class="line">        sheet.getRow(<span class="number">32</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSuMoA2S());</span><br><span class="line">        sheet.getRow(<span class="number">33</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSuAfA1S());</span><br><span class="line">        sheet.getRow(<span class="number">34</span>).createCell(<span class="number">10</span>).setCellValue(myPlus.getSuAfA2S());</span><br><span class="line"></span><br><span class="line">        sheet.getRow(<span class="number">31</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSuMoR1());</span><br><span class="line">        sheet.getRow(<span class="number">32</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSuMoR2());</span><br><span class="line">        sheet.getRow(<span class="number">33</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSuAfR1());</span><br><span class="line">        sheet.getRow(<span class="number">34</span>).createCell(<span class="number">11</span>).setCellValue(myPlus.getSuAfR2());</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一张表io，03版本是xls结尾,这里生成到后端本地了--------------------------------------------------------</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(l + fileName);</span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">savePos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/static/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">canonicalPath</span> <span class="operator">=</span> savePos.getCanonicalPath();</span><br><span class="line">        System.out.println(<span class="string">&quot;路径是&quot;</span> + canonicalPath);<span class="comment">//这是存到本地项目里的路径</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(canonicalPath + <span class="string">&quot;/files/&quot;</span> + <span class="string">&quot;周报&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getMonday()) + <span class="string">&quot;至&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(client.getSunday()) + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">        workbook.write(fileOutputStream2);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传成功了，路径是:Http://localhost:9999/&quot;</span> + fileName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Http://localhost:9999/static/files/&quot;</span> + fileName;</span><br><span class="line">        <span class="comment">//输出Excel文件输出到前端</span></span><br><span class="line"><span class="comment">//                OutputStream output = response.getOutputStream();</span></span><br><span class="line"><span class="comment">//                workbook.write(output);</span></span><br><span class="line"><span class="comment">//                output.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类，下面比较原生的写法，即可在本地生成</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> @Test</span><br><span class="line">    public void simpleRead() throws IOException &#123;</span><br><span class="line">        String  PATH=&quot;C:\\Users\\Administrator\\Desktop\\Temp\\temp2-main\\weeklyA-master\\&quot;;</span><br><span class="line">        String fileName = PATH+&quot;easyTest.xls&quot;;</span><br><span class="line">        //创建工作簿</span><br><span class="line">        HSSFWorkbook workbook = new HSSFWorkbook();</span><br><span class="line">        //设置它的样式</span><br><span class="line">        HSSFCellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line"></span><br><span class="line">        cellStyle.setAlignment(CellStyle.ALIGN_CENTER);//增加水平居中样式-old</span><br><span class="line">        cellStyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);//增加垂直居中样式-old</span><br><span class="line"></span><br><span class="line">        //创建工作表</span><br><span class="line">        HSSFSheet sheet = workbook.createSheet(&quot;周报表&quot;);</span><br><span class="line">        // 创建一个行,0就是第一行一般都是表头,给row加列就是第一行的每一列了</span><br><span class="line">        HSSFRow row = sheet.createRow(0);</span><br><span class="line">        //创建表头</span><br><span class="line">        HSSFCell cell1 = row.createCell(0);</span><br><span class="line">        cell1.setCellValue(&quot;周时间&quot;);</span><br><span class="line">        HSSFCell cell2 = row.createCell(1);</span><br><span class="line">        cell2.setCellValue(&quot;日期&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                0,  // 第一行（从0开始）</span><br><span class="line">                0,  // 最后一行（从0开始）</span><br><span class="line">                1,  // 第一列（从0开始）</span><br><span class="line">                2  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        cell2.setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line"></span><br><span class="line">        HSSFCell cell4 = row.createCell(3);</span><br><span class="line">        cell4.setCellValue(&quot;时间&quot;);</span><br><span class="line"></span><br><span class="line">        HSSFCell cell5 = row.createCell(4);</span><br><span class="line">        cell5.setCellValue(&quot;具体事宜&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                0,  // 第一行（从0开始）</span><br><span class="line">                0,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        cell5.setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line">        HSSFCell cell6 = row.createCell(10);</span><br><span class="line">        cell6.setCellValue(&quot;标记&quot;);</span><br><span class="line"></span><br><span class="line">        HSSFCell cell7 = row.createCell(11);</span><br><span class="line">        cell7.setCellValue(&quot;结果分析&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                0,  // 第一行（从0开始）</span><br><span class="line">                0,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        cell7.setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line">        //表头结束</span><br><span class="line">//-----------------------------------------------------------------------------------------------------</span><br><span class="line">        //星期1的部分 A1代表星期一的第一行</span><br><span class="line">        HSSFRow rowA1 = sheet.createRow(1);</span><br><span class="line">        HSSFCell cellA1 = rowA1.createCell(0);</span><br><span class="line">        cellA1.setCellValue(&quot;星期一&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                1,  // 第一行（从0开始）</span><br><span class="line">                4,  // 最后一行（从0开始）</span><br><span class="line">                0,  // 第一列（从0开始）</span><br><span class="line">                0  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        cellA1.setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line"></span><br><span class="line">        rowA1.createCell(1).setCellValue(&quot;2023-02-27&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                1,  // 第一行（从0开始）</span><br><span class="line">                4,  // 最后一行（从0开始）</span><br><span class="line">                1,  // 第一列（从0开始）</span><br><span class="line">                2  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        rowA1.getCell(1).setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line"></span><br><span class="line">        HSSFRow rowA2 = sheet.createRow(2);</span><br><span class="line">        HSSFRow rowA3 = sheet.createRow(3);</span><br><span class="line">        HSSFRow rowA4 = sheet.createRow(4);</span><br><span class="line"></span><br><span class="line">        rowA2.createCell(3).setCellValue(&quot;上午&quot;);</span><br><span class="line">        rowA3.createCell(3).setCellValue(&quot;上午&quot;);</span><br><span class="line"></span><br><span class="line">        rowA1.createCell(4).setCellValue(&quot;上午事情1&quot;);</span><br><span class="line">        rowA2.createCell(4).setCellValue(&quot;上午事情2&quot;);</span><br><span class="line">        rowA3.createCell(4).setCellValue(&quot;下午事情1&quot;);</span><br><span class="line">        rowA4.createCell(4).setCellValue(&quot;下午事情2&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                1,  // 第一行（从0开始）</span><br><span class="line">                1,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                2,  // 第一行（从0开始）</span><br><span class="line">                2,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                3,  // 第一行（从0开始）</span><br><span class="line">                3,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                4,  // 第一行（从0开始）</span><br><span class="line">                4,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        rowA1.createCell(10).setCellValue(&quot;完成&quot;);</span><br><span class="line">        rowA2.createCell(10).setCellValue(&quot;未完成&quot;);</span><br><span class="line">        rowA3.createCell(10).setCellValue(&quot;完成&quot;);</span><br><span class="line">        rowA4.createCell(10).setCellValue(&quot;未完成&quot;);</span><br><span class="line"></span><br><span class="line">        rowA1.createCell(11).setCellValue(&quot;上午结果分析1&quot;);</span><br><span class="line">        rowA2.createCell(11).setCellValue(&quot;上午结果分析2&quot;);</span><br><span class="line">        rowA3.createCell(11).setCellValue(&quot;下午结果分析1&quot;);</span><br><span class="line">        rowA4.createCell(11).setCellValue(&quot;下午结果分析2&quot;);</span><br><span class="line"></span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                1,  // 第一行（从0开始）</span><br><span class="line">                1,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                2,  // 第一行（从0开始）</span><br><span class="line">                2,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                3,  // 第一行（从0开始）</span><br><span class="line">                3,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                4,  // 第一行（从0开始）</span><br><span class="line">                4,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">//合并1-2之间的单元格</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                5,  // 第一行（从0开始）</span><br><span class="line">                5,  // 最后一行（从0开始）</span><br><span class="line">                0,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">//-----------------------------------------------------------------------------------------------------</span><br><span class="line"> //星期2的部分</span><br><span class="line">        HSSFRow rowB6 = sheet.createRow(6);</span><br><span class="line">        HSSFCell cellB1 = rowB6.createCell(0);</span><br><span class="line">        cellB1.setCellValue(&quot;星期二&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                6,  // 第一行（从0开始）</span><br><span class="line">                9,  // 最后一行（从0开始）</span><br><span class="line">                0,  // 第一列（从0开始）</span><br><span class="line">                0  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        cellB1.setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line"></span><br><span class="line">        rowB6.createCell(1).setCellValue(&quot;2023-02-27&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                6,  // 第一行（从0开始）</span><br><span class="line">                9,  // 最后一行（从0开始）</span><br><span class="line">                1,  // 第一列（从0开始）</span><br><span class="line">                2  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        rowB6.getCell(1).setCellStyle(cellStyle);	// 应用于单元格居中</span><br><span class="line"></span><br><span class="line">        HSSFRow rowB7 = sheet.createRow(7);</span><br><span class="line">        HSSFRow rowB8 = sheet.createRow(8);</span><br><span class="line">        HSSFRow rowB9 = sheet.createRow(9);</span><br><span class="line">        rowB7.createCell(3).setCellValue(&quot;上午&quot;);</span><br><span class="line">        rowB8.createCell(3).setCellValue(&quot;上午&quot;);</span><br><span class="line">        rowB6.createCell(4).setCellValue(&quot;上午事情1&quot;);</span><br><span class="line">        rowB7.createCell(4).setCellValue(&quot;上午事情2&quot;);</span><br><span class="line">        rowB8.createCell(4).setCellValue(&quot;下午事情1&quot;);</span><br><span class="line">        rowB9.createCell(4).setCellValue(&quot;下午事情2&quot;);</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                6,  // 第一行（从0开始）</span><br><span class="line">                6,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                7,  // 第一行（从0开始）</span><br><span class="line">                7,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                8,  // 第一行（从0开始）</span><br><span class="line">                8,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                9,  // 第一行（从0开始）</span><br><span class="line">                9,  // 最后一行（从0开始）</span><br><span class="line">                4,  // 第一列（从0开始）</span><br><span class="line">                9  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        rowB6.createCell(10).setCellValue(&quot;完成&quot;);</span><br><span class="line">        rowB7.createCell(10).setCellValue(&quot;未完成&quot;);</span><br><span class="line">        rowB8.createCell(10).setCellValue(&quot;完成&quot;);</span><br><span class="line">        rowB9.createCell(10).setCellValue(&quot;未完成&quot;);</span><br><span class="line">        rowB6.createCell(11).setCellValue(&quot;上午结果分析1&quot;);</span><br><span class="line">        rowB7.createCell(11).setCellValue(&quot;上午结果分析2&quot;);</span><br><span class="line">        rowB8.createCell(11).setCellValue(&quot;下午结果分析1&quot;);</span><br><span class="line">        rowB9.createCell(11).setCellValue(&quot;下午结果分析2&quot;);</span><br><span class="line"></span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                6,  // 第一行（从0开始）</span><br><span class="line">                6,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                7,  // 第一行（从0开始）</span><br><span class="line">                7,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                8,  // 第一行（从0开始）</span><br><span class="line">                8,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line">        sheet.addMergedRegion(new CellRangeAddress(</span><br><span class="line">                9,  // 第一行（从0开始）</span><br><span class="line">                9,  // 最后一行（从0开始）</span><br><span class="line">                11,  // 第一列（从0开始）</span><br><span class="line">                16  // 最后一列（从0开始）</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        //生成一张表io，03版本是xls结尾</span><br><span class="line">        FileOutputStream fileOutputStream = new FileOutputStream(fileName);</span><br><span class="line">        workbook.write(fileOutputStream);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        log.info(&quot;表格生成成功！&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>还需要的类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeUtils</span> &#123;</span><br><span class="line">    <span class="comment">//日期增加，输入的参数是date型的1999-03-27这种</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">addDate</span><span class="params">(Date Day, <span class="type">int</span> variable)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.setTime(Day);</span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, variable);</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">nextDay</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(nextDay);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其他配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yml文件配置</span><br><span class="line">  mvc:</span><br><span class="line">    pathmatch:</span><br><span class="line">      matching-strategy: ant_path_matcher  #配置api文档</span><br><span class="line">    static-path-pattern: /static/**  #静态资源存放</span><br><span class="line"></span><br><span class="line">再去resources下新建static文件夹/files文件夹里面随便放一张图片,这样项目跑起来才有这个目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/post/45939.html</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>1、共有<strong>23 种设计模式</strong>，归为创建型、结构型、行为型，<strong>设计模式</strong>是指软件设计问题的<strong>推荐方案</strong></p>
<p><strong>5 个具体的创建型模式</strong>，它们分别是：</p>
<p>工厂方法模式【Factory Method】、抽象工厂模式【Abstract Factory】、创建者模式【Builder】</p>
<p>原型模式【Prototype】、单例模式【Singleton】</p>
<p><strong>7 个结构型模式可供研究</strong>，它们分别是：</p>
<p>外观模式【Facade】、适配器模式【Adapter】、代理模式【Proxy】、装饰模式【Decorator】</p>
<p>桥接模式【Bridge】、组合模式【Composite】、享元模式【Flyweight】</p>
<p><strong>11 个具体的行为型模式</strong>，它们分别是：</p>
<p>模板方法模式【Template Method】、观察者模式【Observer】、状态模式【State】、策略模式【Strategy】</p>
<p>职责链模式【Chain of Responsibility】、命令模式【Command】、访问者模式【Visitor】、</p>
<p>调停者模式【Mediator】、备忘录模式【Memento】、迭代器模式【Iterator】、解释器模式【Interpreter】</p>
<h1 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h1><p><strong>1、单一原则（Single Responsibility Principle）</strong></p>
<p>一个类只负责一项职责，尽量做到类只有一个行为原因引起变化；</p>
<p>业务对象（BO business object）、业务逻辑（BL business logic）拆分</p>
<p><strong>2.里氏替换原则（LSP liskov substitution principle）</strong></p>
<p>子类可以扩展父类的功能，但不能改变原有父类的功能；</p>
<p>目的：增强程序的健壮性。实际项目中，每个子类对应不同的业务含义，使父类作为参数，传递不同的子类完成不同的业务逻辑。</p>
<p><strong>3.依赖倒置原则（dependence inversion principle）</strong></p>
<p>面向接口编程；（通过接口作为参数实现应用场景）</p>
<p>依赖于抽象而不依赖于具体。</p>
<p>抽象就是接口或者抽象类，细节就是实现类</p>
<p>依赖倒置原则定义：</p>
<p>上层模块不应该依赖下层模块，两者应依赖其抽象抽象不应该依赖细节细节应该依赖抽象接口负责定义 public 属性和方法，并且申明与其他对象依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑。</p>
<p><strong>4.接口隔离（interface segregation principle）</strong></p>
<p>建立单一接口；（扩展为类也是一种接口，一切皆接口）。</p>
<p>使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度。</p>
<p>降低依赖，降低耦合。</p>
<p>定义：</p>
<p>客户端不应该依赖它不需要的接口；类之间依赖关系应该建立在最小的接口上；</p>
<p><strong>5.迪米特原则（law of demeter LOD）</strong></p>
<p>最少知道原则，尽量降低类与类之间的耦合；</p>
<p>一个对象应该对其他对象有最少的了解，即一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><strong>6.开闭原则（open closed principle）</strong></p>
<p>用抽象构建架构，用实现扩展原则；</p>
<p>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。</p>
<p>一个软件实体通过扩展来实现变化，而不是通过修改原来的代码来实现变化。实现一个热插拔的效果。</p>
<p>开闭原则是对软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。</p>
<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><strong>创建型模式</strong></h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>在讲这个之前，先说说我们常用的<strong>简单工厂模式，这个不算设计模式，只能算编程习惯</strong></p>
<p>首先我们定义一个工厂类，通过传入不同的参数返回不同的实例，被创建的实例具有共同的父类或接口</p>
<p><strong>适用场景</strong></p>
<p>创建的对象较少、客户端不关心对象的创建过程</p>
<p>现在有个任务、要求做个绘图工具、可以画长方形、圆形、正方形、每个图形都要 draw()方法</p>
<span class="hide-inline"><button type="button" class="hide-button" style="background-color: pink;color: #fff">查看
  </button><span class="hide-content">面向对象的思想，都属于图形，并且都有draw方法，可以去定义一个接口或抽象类作为这3的公共父类，并在其中声明公共方法draw，然后每个图形去实现这个方法</span></span>

<p>主要角色：</p>
<p>抽象产品（Product）：是简单工厂创建的所有对象的父类，负责描述所有实例共有的公共接口。</p>
<p>具体产品（ConcreteProduct）：具体产品类，是简单工厂模式的创建目标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;长方形...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Round</span> <span class="keyword">implements</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;圆形...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;正方形...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举类、防止输错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ShapeType</span> &#123;</span><br><span class="line"></span><br><span class="line">ROUND,</span><br><span class="line"></span><br><span class="line">RECTANGLE,</span><br><span class="line"></span><br><span class="line">SQUARE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>创建工厂类，提供一个静态方法，客户端只需要传入产品的类型，就会实例化相应的产品。</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的参数改为我们定义的枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(ShapeType shapeType)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;round&quot;</span>.equalsIgnoreCase(shapeType.name()))&#123;</span><br><span class="line"></span><br><span class="line">shape = <span class="keyword">new</span> <span class="title class_">Round</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;rectangle&quot;</span>.equalsIgnoreCase(shapeType.name()))&#123;</span><br><span class="line"></span><br><span class="line">shape = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;square&quot;</span>.equalsIgnoreCase(shapeType.name()))&#123;</span><br><span class="line"></span><br><span class="line">shape = <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shape;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Shape</span> <span class="variable">round</span> <span class="operator">=</span> ShapeFactory.getShape(ShapeType.ROUND);</span><br><span class="line"></span><br><span class="line">round.draw();</span><br><span class="line"></span><br><span class="line"><span class="type">Shape</span> <span class="variable">rectangle</span> <span class="operator">=</span> ShapeFactory.getShape(ShapeType.RECTANGLE);</span><br><span class="line"></span><br><span class="line">rectangle.draw();</span><br><span class="line"></span><br><span class="line"><span class="type">Shape</span> <span class="variable">square</span> <span class="operator">=</span> ShapeFactory.getShape(ShapeType.SQUARE);</span><br><span class="line"></span><br><span class="line">square.draw();</span><br></pre></td></tr></table></figure>

<p>上面简单工厂模式 demo 违背了<strong>开闭原则</strong>，如果我需要再来一个五边形呢，是不是要去工厂类里的方法继续加入这个图形的判断，所以违背，不该修改工厂类的源码</p>
<p>而工厂方法模式则是简单工厂模式的进一步深化，其不像简单工厂模式通过<strong>一个工厂</strong>来完成所有对象的创建，而是<strong>通过不同的工厂来创建不同的对象</strong>，每个对象有对应的工厂创建。</p>
<p>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类<code>所对应的参数</code>即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</p>
<p>使用了 静态（static） 工厂方法，造成工厂角色无法形成基于继承的等级结构</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h2><p>工厂方法模式是简单工厂的进一步抽象和推广，由于工厂方法模式具有多态性，工厂方法模式既保持了简单工厂的优点，同时又克服了它的缺点，简单工厂模式中的工厂类负责创建实例，那么如果有新的类型添加，就要修改工厂类，这样也不利于进一步松耦合。工厂方法模式中核心工厂类不负责所有实例的创建，而是将具体的创建工作交给了子类去完成，这个核心类成为了一个抽象工厂角色。</p>
<p>主要角色：</p>
<p>1、抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。<br>2、具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。<br>3、抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。<br>4、具体工厂（ConcreteFactory）：主要是实现抽象工厂中的接口，完成具体产品的创建。</p>
<p>现在要求设计一个图片加载器、具有多个图片加载器用来加载 jpg、png、gif 格式的图片、每个加载器有 read 方法、用来读取图片</p>
<p>定义公共接口·</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者创建抽象工厂类，上面就接口也可以</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建抽象工厂类，提供了工厂的生成方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">newProduct</span><span class="params">()</span>;<span class="comment">//这种还需要创建抽象产品类Product,具体产品要继承它</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPGReader</span> <span class="keyword">implements</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;read jpg...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PngReader</span> <span class="keyword">implements</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;read png...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GIFReader</span> <span class="keyword">implements</span> <span class="title class_">Reader</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;read gif...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义一个抽象的工厂接口 ReaderFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReaderFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Reader <span class="title function_">getReader</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>getReader()方法返回我们的 Reader 类，接下来我们把上面定义好的每个图片加载器都提供一个工厂类，这些工厂类实现了 ReaderFactory</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPGFactory</span> <span class="keyword">implements</span> <span class="title class_">ReaderFactory</span>&#123;  <span class="comment">//具体产品1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Reader <span class="title function_">getReader</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JPGReader</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PNGFactory</span> <span class="keyword">implements</span> <span class="title class_">ReaderFactory</span>&#123;  <span class="comment">//具体产品2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Reader <span class="title function_">getReader</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PngReader</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>……</p>
<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取JPG</span></span><br><span class="line"></span><br><span class="line"><span class="type">ReaderFactory</span> <span class="variable">jpgFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPGFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Reader</span> <span class="variable">jpgReader</span> <span class="operator">=</span> jpgFactory.getReader();</span><br><span class="line"></span><br><span class="line">jpgReader.read();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取PNG</span></span><br><span class="line"></span><br><span class="line"><span class="type">ReaderFactory</span> <span class="variable">pngFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PNGFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Reader</span> <span class="variable">pngReader</span> <span class="operator">=</span> pngFactory.getReader();</span><br><span class="line"></span><br><span class="line">pngReader.read();</span><br></pre></td></tr></table></figure>

<p>分别读取了不同格式的图片，不同之处在于针对不同的图片格式声明了不同的工厂，进而创建了相应的图片加载器</p>
<p>和简单工厂对比一下，最根本的区别在于简单工厂只有一个统一的工厂类，而工厂方法是针对每个要创建的对象都会提供一个工厂类，这些工厂类都实现了一个工厂基类。</p>
<p>简单来说就是给你一个接口，你去实现它，并重写成自己需要的。灵活性增强，对于新产品的创建，只需多写一个相应的工厂类，典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类</p>
<p>缺点就是类的个数容易过多、增加复杂度、抽象产品只能生产一种产品，此弊端可使用<code>抽象工厂模式</code>解决</p>
<p>应用场景：</p>
<ul>
<li><p>客户端不需要知道它所创建的对象的类。例子中我们不知道每个图片加载器具体叫什么名，只知道创建它的工厂名就完成了创建过程。</p>
</li>
<li><p>客户端可以通过子类来指定创建对应的对象。 以上场景使用于采用工厂方法模式。</p>
</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a><strong>抽象工厂模式</strong></h2><p>抽象工厂模式是工厂方法的进一步深化，在这个模式中的工厂类不单单可以创建一个对象，而是可以<strong>创建一组对象</strong>。这是和工厂方法最大的不同点</p>
<p>抽象工厂和工厂方法一样可以划分为 4 大部分：</p>
<ul>
<li>AbstractFactory（抽象工厂）工厂方法模式的核心，与应用程序无关。任何在模式中创建对象的工厂类必须实现这个接口。</li>
<li>ConcreteFactory（具体工厂）：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用就可以创建某一种产品对象。</li>
<li>AbstractProduct（抽象产品）：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>ConcreteProduct（具体产品）：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于工厂模式中的工厂只创建单一产品。</li>
</ul>
<p>例子：现在需要做一款跨平台的游戏，需要兼容 Android，IOS，Windows PC 三个移动操作系统，该游戏针对每个系统都设计了一套操作控制器（OperationController）和界面控制器（UIController），下面通过抽象工厂方式完成这款游戏的架构设计。</p>
<p><strong>定义公共接口 OperationController 和 UIController –&gt; 抽象产品</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Android</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Android OperationController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Android UIController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>IOS</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOSOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;IOS OperationController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOSUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;IOS UIController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>WP</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WpOperationController</span> <span class="keyword">implements</span> <span class="title class_">OperationController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">control</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Wp OperationController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WpUIController</span> <span class="keyword">implements</span> <span class="title class_">UIController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Wp UIController System&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>然后我们在定义一个抽象工厂类，这个工厂可以生产 OperationController 和 UIController –&gt; 抽象工厂</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SystemFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> UIController <span class="title function_">createUIController</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们再来写各个平台的具体工厂实现 –&gt; 具体工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Android</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidOperationController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> UIController <span class="title function_">createUIController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidUIController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IOS</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOSFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IOSOperationController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> UIController <span class="title function_">createUIController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IOSUIController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WP</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WPFactory</span> <span class="keyword">implements</span> <span class="title class_">SystemFactory</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> OperationController <span class="title function_">createOperationController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WpOperationController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> UIController <span class="title function_">createUIController</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WpUIController</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//android操作系统使用示例</span></span><br><span class="line"></span><br><span class="line"><span class="type">SystemFactory</span> <span class="variable">androidFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AndroidFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">OperationController</span> <span class="variable">operationController</span> <span class="operator">=</span> androidFactory.createOperationController();</span><br><span class="line"></span><br><span class="line"><span class="type">UIController</span> <span class="variable">uiController</span> <span class="operator">=</span> androidFactory.createUIController();</span><br><span class="line"></span><br><span class="line">operationController.control();</span><br><span class="line"></span><br><span class="line">uiController.display();</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他操作系统使用方式一样</span></span><br></pre></td></tr></table></figure>

<p>抽象工厂模式中，存在多个相关的产品族，每个产品族都有对应的具体产品类。而工厂方法模式则针对单个产品族，每个具体产品类有对应的工厂类来创建。</p>
<p>以下是抽象工厂模式的示例代码，用于创建多个产品族（形状和颜色）的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 形状接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体形状：圆形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体形状：长方形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体颜色：红色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filling with red color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体颜色：蓝色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filling with blue color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    Shape <span class="title function_">createShape</span><span class="params">()</span>;</span><br><span class="line">    Color <span class="title function_">createColor</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂：形状工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(); <span class="comment">// 返回圆形对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Color <span class="title function_">createColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 不负责颜色的创建，返回 null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂：颜色工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 不负责形状的创建，返回 null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Color <span class="title function_">createColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Red</span>(); <span class="comment">// 返回红色对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractFactory</span> <span class="variable">shapeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> shapeFactory.createShape();</span><br><span class="line">        <span class="keyword">if</span> (circle != <span class="literal">null</span>) &#123;</span><br><span class="line">            circle.draw(); <span class="comment">// Output: Drawing a circle</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractFactory</span> <span class="variable">colorFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorFactory</span>();</span><br><span class="line">        <span class="type">Color</span> <span class="variable">red</span> <span class="operator">=</span> colorFactory.createColor();</span><br><span class="line">        <span class="keyword">if</span> (red != <span class="literal">null</span>) &#123;</span><br><span class="line">            red.fill(); <span class="comment">// Output: Filling with red color</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>AbstractFactory</code> 是抽象工厂接口，定义了创建形状和颜色对象的方法。<code>ShapeFactory</code> 和 <code>ColorFactory</code> 是具体工厂类，分别用于创建形状和颜色对象。</p>
<p>每个具体工厂类只负责创建对应的产品族，<code>ShapeFactory</code> 创建形状对象，<code>ColorFactory</code> 创建颜色对象。这样，客户端可以通过选择合适的工厂类来获取所需的产品。</p>
<p>1、优点：抽象工厂模式除了具有工厂方法模式的优点外，还有如下几个优点<br>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。<br>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组。<br>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。<br>2、缺点：<br>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂和抽象工厂的创建步骤：</p>
<p>先创建产品接口含有方法（抽象就多个）——&gt;具体产品去实现它重写它的方法——&gt;创建工厂类（抽象就是含多方法）——&gt;具体工厂（抽象继承 1 个实现多个方法)——-&gt;调用 new 工厂—–&gt;获取里面的产品—–&gt;调用产品的方法</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>它允许一个对象创建另一个可定制的对象，而无需知道创建的细节。其工作原理是通过拷贝实现对象创建，即 clone()。原型模式类似于工厂模式，提供了隔离对象与使用者之间的耦合关系，绕开了 new 的过程，但需要这些具体的对象有稳定的接口。</p>
<p>原型模式的应用场景包括：利用拷贝替换构造对象，提升效率；避免了重复 new 相同对象的操作。</p>
<p>原型模式在性能和创建过程方面有优势，但需要解决一些克隆方法和循环引用的问题</p>
<p><strong>浅克隆</strong><br>将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向相同的内存地址。</p>
<p><strong>深克隆</strong><br>将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深克隆进行了完全彻底的复制，而浅克隆不彻底。</p>
<h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><p>new Person(“”….)一大堆，mp 里的也用到</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>类的单例设计模式，就是<code>采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</code>，并且该类只提供一个取得其对象实例的方法（静态方法）</p>
<p><code>指一个类只有一个实例，且该类能自行创建这个实例的一种模式</code>。</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>某个类只能有一个实例（<code>即构造器私有，防止外部通过new XXX()创建对象</code>）</p>
<p>自行在类的内部创建对象实例</p>
<p>向外暴露一个静态的公共方法</p>
<h3 id="八种单例模式实现方式："><a href="#八种单例模式实现方式：" class="headerlink" title="八种单例模式实现方式："></a>八种<a href="https://so.csdn.net/so/search?q=%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">单例模式</a>实现方式：</h3><ul>
<li><p><code>饿汉式（静态常量）</code></p>
</li>
<li><p><code>饿汉式（静态代码块）</code></p>
</li>
<li><p>懒汉式（线程不安全）</p>
</li>
<li><p>懒汉式（线程安全，同步方法）</p>
</li>
<li><p>懒汉式（线程安全，同步代码块）</p>
</li>
<li><p><code>双重检查</code></p>
</li>
<li><p><code>静态内部类</code></p>
</li>
<li><p><code>枚举</code></p>
</li>
</ul>
<h3 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//创建实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化，防止外部类能直接new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类装载的时候就完成实例化，避免了线程同步问题，如果从始至终都没有用到这个实例，则会造成内存的浪费</p>
<h3 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在静态代码块中，创建单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化，防止外部类能直接new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同上</p>
<h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><p>当需要使用到对象的时候，才会创建对象即懒汉式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化，防止外部类能直接new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法，当使用到该方法时，才会创建instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//若对象为空，则创建</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>起到了懒加载的效果，但是只能在单线程下使用，在实际开发中，不要使用这种方式</p>
<h3 id="懒汉式（线程安全，同步方法）"><a href="#懒汉式（线程安全，同步方法）" class="headerlink" title="懒汉式（线程安全，同步方法）"></a>懒汉式（线程安全，同步方法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> YamlUtils instance; <span class="comment">// 类实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">YamlUtils</span><span class="params">()</span> &#123;</span><br><span class="line">        loadConfig(); <span class="comment">// 加载配置信息</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法，加入同步处理，解决线程安全问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> YamlUtils <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 若实例为空，则创建新实例</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">YamlUtils</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效率低，每个线程在想获得类的实例时候，执行 getInstance()方法都要进行同步，而其实这个方法只执行一次实例化代码就够了，后面的想获得该类的实例，直接 return 就行，方法进行同步效率太低</p>
<p>在实际开发中，不推荐使用</p>
<h3 id="懒汉式（线程安全，同步代码块）"><a href="#懒汉式（线程安全，同步代码块）" class="headerlink" title="懒汉式（线程安全，同步代码块）"></a>懒汉式（线程安全，同步代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化，防止外部类能直接new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//若对象为空，则创建</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为上面实现方式的同步方法效率太低，改为同步产生实例化的代码块</p>
<p>同步并不能起到线程同步的作用，假如一个线程进入了判断语句，还没有执行对象实例化，另一个线程也通过了这个判断语句，这是便会产生多个实例</p>
<p>实际开发中，不能使用这种方式</p>
<h3 id="双重检查-🤠"><a href="#双重检查-🤠" class="headerlink" title="双重检查 🤠"></a>双重检查 🤠</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化，防止外部类能直接new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的静态方法，加入双重检查处理，解决线程安全问题，</span></span><br><span class="line"><span class="comment">     * 同时解决懒加载问题，也保证了效率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//实例没创建，才会进入内部的 synchronized代码块</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">//此处再判断一次，可能会出现其他线程创建了实例</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1、DoubleCheck 概念是多线程开发中常使用到的，如代码中所示，进行了两次 if (instance &#x3D;&#x3D; null)检查，这样就保证了线程安全。<br>2、实例化代码只用执行一次，后面再次访问时，判断 if (instance &#x3D;&#x3D; null)，直接 return 实例化对象，也避免反复进行方法同步。<br>3、线程安全，延迟加载，效率较高。<br>4、推荐使用这种单例设计模式。</p>
<h3 id="静态内部类-🧐"><a href="#静态内部类-🧐" class="headerlink" title="静态内部类 🧐"></a>静态内部类 🧐</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类，类中有一个静态属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1、这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>2、静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法时，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。<br>3、类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。<br>4、避免了线程不安全，利用静态内部类特点实现延迟加载，效率高，推荐使用。</p>
<h3 id="枚举实现单例模式"><a href="#枚举实现单例模式" class="headerlink" title="枚举实现单例模式"></a>枚举实现单例模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1=&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2=&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1、借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</p>
<p>推荐使用</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>1、单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。<br>2、当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 new。<br>3、单例模式使用的场景：<br>需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象（如：数据源、session 工厂等）</p>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p>场景 new buffstream()</p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>理解中介，被代理人不需要改变原来的代码就能实现想要的功能</p>
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>将复杂的组件都不管，只要将它的接口啥的放到外观类里面，客户端只负责调用外观</p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接，顾名思义，就是用来连接两个部分，为被分离了的抽象部分和实现部分搭桥</p>
<p>假设我们有一个画笔，可以画正方形、长方形、圆形。现在我们需要给这些形状进行上色，这里有三种颜色：白色、灰色、黑色。这里我们可以画出 3*3&#x3D;9 种图形：白色正方形、白色长方形、白色圆形。。。。。。</p>
<p>此时我们可以将图形和颜色抽象出来，根据实际需要对颜色和形状进行组合</p>
<p>对于这样的实现方案，我们就可以称之为<strong>桥接模式</strong>。</p>
<p><strong>将抽象和实现解耦，让它们可以独立变化。</strong></p>
<p>JDBC 驱动是桥接模式的经典应用。如果我们想要把 MySQL 数据库切换成 Oracle 数据库，只需要更换数据库驱动，动一行代码就可以实现了：</p>
<p>将 com.mysql.jdbc.Driver 换成 oracle.jdbc.driver.OracleDriver。</p>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>“组合模式”也被称为“部分整体模式”</p>
<p>组合模式就运用了树形结构，该模式的核心思想是：将多个对象组合成树形结构，以此结构来表示“<strong>整体-部分</strong>”之间的层次关系。</p>
<p>组合模式的主要优点有：</p>
<ol>
<li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；</li>
<li>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；</li>
</ol>
<p>其主要缺点是：</p>
<ol>
<li>设计较复杂，客户端需要花更多时间理清类之间的层次关系；</li>
<li>不容易限制容器中的构件；</li>
<li>不容易用继承的方法来增加构件的新功能；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Bags BigBag, mediumBag, smallRedBag, smallWhiteBag;</span><br><span class="line">        Goods sp;</span><br><span class="line">        BigBag = <span class="keyword">new</span> <span class="title class_">Bags</span>(<span class="string">&quot;大袋子&quot;</span>);</span><br><span class="line">        mediumBag = <span class="keyword">new</span> <span class="title class_">Bags</span>(<span class="string">&quot;中袋子&quot;</span>);</span><br><span class="line">        smallRedBag = <span class="keyword">new</span> <span class="title class_">Bags</span>(<span class="string">&quot;红色小袋子&quot;</span>);</span><br><span class="line">        smallWhiteBag = <span class="keyword">new</span> <span class="title class_">Bags</span>(<span class="string">&quot;白色小袋子&quot;</span>);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;婺源特产&quot;</span>, <span class="number">2</span>, <span class="number">7.9f</span>);</span><br><span class="line">        smallRedBag.add(sp);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;婺源地图&quot;</span>, <span class="number">1</span>, <span class="number">9.9f</span>);</span><br><span class="line">        smallRedBag.add(sp);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;韶关香菇&quot;</span>, <span class="number">2</span>, <span class="number">68</span>);</span><br><span class="line">        smallWhiteBag.add(sp);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;韶关红茶&quot;</span>, <span class="number">3</span>, <span class="number">180</span>);</span><br><span class="line">        smallWhiteBag.add(sp);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;景德镇瓷器&quot;</span>, <span class="number">1</span>, <span class="number">380</span>);</span><br><span class="line">        mediumBag.add(sp);</span><br><span class="line">        mediumBag.add(smallRedBag);</span><br><span class="line">        sp = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;李宁牌运动鞋&quot;</span>, <span class="number">1</span>, <span class="number">198</span>);</span><br><span class="line">        BigBag.add(sp);</span><br><span class="line">        BigBag.add(smallWhiteBag);</span><br><span class="line">        BigBag.add(mediumBag);</span><br><span class="line">        System.out.println(<span class="string">&quot;您选购的商品有：&quot;</span>);</span><br><span class="line">        BigBag.show();</span><br><span class="line">        s = BigBag.calculation();</span><br><span class="line">        System.out.println(<span class="string">&quot;要支付的总价是：&quot;</span> + s + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象构件：物品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Articles</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">calculation</span><span class="params">()</span>; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树叶构件：商品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Articles</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;     <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> quantity;    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> unitPrice; <span class="comment">//单价</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">(String name, <span class="type">int</span> quantity, <span class="type">float</span> unitPrice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">        <span class="built_in">this</span>.unitPrice = unitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">calculation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity * unitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;(数量：&quot;</span> + quantity + <span class="string">&quot;，单价：&quot;</span> + unitPrice + <span class="string">&quot;元)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树枝构件：袋子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bags</span> <span class="keyword">implements</span> <span class="title class_">Articles</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;     <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Articles&gt; bags = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Articles&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bags</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Articles c)</span> &#123;</span><br><span class="line">        bags.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Articles c)</span> &#123;</span><br><span class="line">        bags.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Articles <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bags.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">calculation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : bags) &#123;</span><br><span class="line">            s += ((Articles) obj).calculation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : bags) &#123;</span><br><span class="line">            ((Articles) obj).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，抽象构件为 Articles 接口，其中定义了两个方法：calculation 和 show。Goods 和 Bags 分别实现了 Articles 接口。Goods 是树叶构件，表示商品，包含了商品的名称、数量和单价。Bags 是树枝构件，表示袋子，包括了一个 List 类型的属性 bags，用于存储袋子中的商品或子袋子。</p>
<p>在客户端代码中，创建了 4 个袋子和 5 个商品，并将它们放入不同的袋子之中。最终将货物放入大袋子中，并计算出袋子中所有商品的总价钱.结果为：</p>
<p>您选购的商品有：<br>李宁牌运动鞋(数量：1，单价：198.0 元)<br>韶关香菇(数量：2，单价：68.0 元)<br>韶关红茶(数量：3，单价：180.0 元)<br>景德镇瓷器(数量：1，单价：380.0 元)<br>婺源特产(数量：2，单价：7.9 元)<br>婺源地图(数量：1，单价：9.9 元)<br>要支付的总价是：1279.7 元</p>
<p>在组合模式中，抽象构件定义了统一的操作接口，文件夹和文件都是具体的构件，它们都实现了这个接口。文件夹是树枝构件，可以包含其他文件夹或者文件作为子节点，形成一个层次结构。文件是树叶构件，表示最底层的叶子节点，不能再包含其他节点。</p>
<p>通过使用组合模式，可以将文件夹和文件统一地看待为构件对象，客户端可以以相同的方式进行操作，无论是访问文件夹还是文件。例如，可以通过递归遍历的方式对整个文件夹结构进行操作，或者针对单个文件进行特定的操作。</p>
<p>此外，还可以使用其他设计模式来增强文件夹和文件的功能。例如，可以使用迭代器模式来遍历文件夹中所有的文件和子文件夹；可以使用装饰器模式来为文件夹和文件添加额外的功能；可以使用访问者模式来对文件夹和文件进行不同的操作等等。</p>
<p>综上所述，组合模式是对文件夹和文件进行设计的一种常用模式，它能够将它们组织成树形结构，并提供统一的操作接口，同时还可以与其他设计模式结合使用，以满足更复杂的需求。</p>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>旨在通过共享对象来减少内存占用和提高性能</p>
<p>String 类底层就是通过享元模式进行完成的</p>
<p>String s1 &#x3D; “hello”</p>
<p>此时栈中是 String s1 而 hello 会放入常量池中，当 s2 也等于它的时候，由于 String 内部的缓存机制，有则复用的原则继续用同一内存地址</p>
<p>数据库连接池，线程池以及缓存池 共性，那就是通过共享对象或者说共享内存来解决系统开销问题，充分利用系统的内存与性能，从而达到用最小的系统开销去适应更多的数据响应。</p>
<p><strong>抽象享元类：</strong>在享元模式中，存在一个抽象的享元父类，其中一共包含两部分，第一部分为可共享的内部状态，也就是不随着外部而改变的部分；第二部分为不可共享的外部状态，即可能会随时外部环境随时发生改变的部分。</p>
<p><strong>具体享元类：</strong>抽象享元类的具体实现，它主要实现了抽象享元类的内部状态，对于外部状态我们需要外部提供，通常在调用该方法时通过参数传递的方式进行动态改变即可；</p>
<p><strong><em>享元工厂类：</em>主要用于创建享元对象的一个角色，其中聚合一种数据结构，用于起一个缓存以及复用作用。</strong></p>
<p>Mybatis 的一二级缓存，redis 缓存</p>
<p>-128-127,在 Integer 底层，对这一区间的整数是做了缓存的，即有就复用，相应的享元对象，所以就直接返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer num1 = 127;</span><br><span class="line">Integer num2 = 127;</span><br><span class="line">Integer num3 = 128;</span><br><span class="line">Integer num4 = 128;</span><br><span class="line"></span><br><span class="line">System.out.println(num1 == num2);  //true</span><br><span class="line">System.out.println(num3 == num4);  //false</span><br></pre></td></tr></table></figure>

<p>正常扑克牌 54 张需要 54 个对象，用了享元模式只要 4 个对象即可</p>
<p>2 黑桃和 3 黑桃都属于黑桃花色的一种，它们只有点数这一项状态不同。因此，1 黑桃和 2 黑桃可以共享同一个黑桃对象，只需要为它们分别动态添加点数（外部状态）即可。</p>
<p>在享元模式中，相同的内部状态只会被创建一次，并在需要使用时进行共享。这样可以大幅减少重复对象的创建，提高了资源利用率，并且可以使得系统更加灵活和可扩展。</p>
<p>扑克牌来说每种牌点的花色是固定的，即黑桃、红桃、梅花以及方块，所以可以把四种花色看作共享状态。那对每种花色而言，会根据当前的牌点范围又是在不断变化的，所以可以将扑克牌的点数看作不共享的外部状态。</p>
<p>比如我们早上去买豆浆，因为每个人的口味不一样，有的人喜欢吃加糖的，有的人喜欢吃加辣的。卖主不可能每种口味都做一锅，第一是浪费精力，其次就是万一第二天某种口味不受欢迎就会造成极大的浪费。所以卖主在出摊前会做好一锅纯豆浆，然后售卖时根据顾客的口味，只需在原有的纯豆浆中加入相应的调料即可。这样一来呢，卖主就不会担心某种豆浆因为不收欢迎而造成浪费，也不会担心豆浆的口味做得太少而造成亏损。相比较做纯豆浆而言，能够充分利用豆浆，卖的时候针对每位顾客的口味不同，只需要调好对应的调料就可以了。</p>
<h1 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h1><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>它在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。</p>
<p>定制表格<br>设计者先将所有需要填写的信息头（字段名）抽取出来，再将它们整合在一起成为一种既定格式的表格，最后让填表人按照这个标准化模板去填写自己特有的信息，而不必为书写内容、先后顺序、格式而感到困扰。</p>
<p>模版方法模式很好体现了这点，作为父类的模板会在需要的时候，调用子类相应的方法，也就是由父类找子类，而不是子类找父类。</p>
<p>这其实也是一种反向的控制结构，按照通常的思路，是子类找父类才对，也就是应该是子类来调用父类的方法，因为父类根本就不知道子类，而子类是知道父类的，但是在模板方法模式里面，是父类来找子类，所以是一种反向的控制结构。</p>
<p>开闭原则：对修改关闭，对扩展开放。首先从设计上，先分离变与不变，然后把不变的部分抽取出来，定义到父类里面，比如算法骨架，比如一些公共的、固定的实现等等。这些不变的部分被封闭起来，尽量不去修改它了，要扩展新的功能，那就使用子类来扩展，通过子类来实现可变化的步骤，对于这种新增功能的做法是开放的。</p>
<p>李氏替换原则：派生类型（子类）必须能够替换掉它们的基类型（父类），运行时子类对象覆盖父类对象。能够实现统一的算法骨架，通过切换不同的具体实现来切换不同的功能，一个根本原因就是里氏替换原则，遵循这个原则，保证所有的子类实现的是同一个算法模板(为了防止子类改变模板方法中的算法，可以将模板方法声明为 final)，并能在使用模板的地方，根据需要，切换不同的具体实现。</p>
<ul>
<li>背景：小成希望学炒菜：手撕包菜 &amp; 蒜蓉炒菜心</li>
<li>冲突：两道菜的炒菜步骤有的重复有的却差异很大，记不住</li>
<li>解决方案：利用代码记录下来</li>
</ul>
<p>步骤 1： 创建抽象模板结构（Abstract Class）：炒菜的步骤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Cookie</span>&#123;</span><br><span class="line"><span class="comment">//模板方法，用来控制炒菜的流程 (炒菜的流程是一样的-复用）</span></span><br><span class="line"><span class="comment">//声明为final，不希望子类覆盖这个方法，防止更改流程的执行顺序</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cookProcess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一步：倒油</span></span><br><span class="line">        <span class="built_in">this</span>.pourOil()；</span><br><span class="line">        <span class="comment">//第二步：热油</span></span><br><span class="line">         <span class="built_in">this</span>.HeatOil();</span><br><span class="line">        <span class="comment">//第三步：倒蔬菜</span></span><br><span class="line">         <span class="built_in">this</span>.pourVegetable();</span><br><span class="line">        <span class="comment">//第四步：倒调味料</span></span><br><span class="line">         <span class="built_in">this</span>.pourSauce（)；</span><br><span class="line">        <span class="comment">//第五步：翻炒</span></span><br><span class="line">         <span class="built_in">this</span>.fry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构里哪些方法是所有过程都是一样的可复用的，哪些是需要子类进行实现的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：倒油是一样的，所以直接实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">pourOil</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒油&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//第二步：热油是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">void</span>  <span class="title function_">HeatOil</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;热油&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：倒蔬菜是不一样的(一个下包菜，一个是下菜心)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所以声明为抽象方法，具体由子类实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span>  <span class="title function_">pourVegetable</span><span class="params">()</span>；</span><br><span class="line"><span class="comment">//第四步：倒调味料是不一样的(一个下辣椒，一个是下蒜蓉)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//所以声明为抽象方法，具体由子类实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span>  <span class="title function_">pourSauce</span><span class="params">()</span>；</span><br><span class="line"><span class="comment">//第五步：翻炒是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒啊炒啊炒到熟啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 2： 创建具体模板（Concrete Class）,即”手撕包菜“和”蒜蓉炒菜心“的具体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//炒手撕包菜的类</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_BaoCai</span> extend  Abstract Class&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">pourVegetable</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(”下锅的蔬菜是包菜“);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">pourSauce</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(”下锅的酱料是辣椒“);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//炒蒜蓉菜心的类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_CaiXin</span> extend  Abstract Class&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">pourVegetable</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(”下锅的蔬菜是菜心“);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">pourSauce</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(”下锅的酱料是蒜蓉“);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 3：客户端调用-炒菜了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> Method&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//炒 - 手撕包菜</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ConcreteClass_BaoCai</span> <span class="variable">BaoCai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_BaoCai</span>()；</span><br><span class="line"></span><br><span class="line">    BaoCai.cookProcess()；</span><br><span class="line"></span><br><span class="line"><span class="comment">//炒 - 蒜蓉菜心</span></span><br><span class="line"></span><br><span class="line">   <span class="type">ConcreteClass_</span> <span class="variable">CaiXin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_CaiXin</span>()；</span><br><span class="line"></span><br><span class="line">    CaiXin.cookProcess()；</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果输出</p>
<p>倒油<br>热油<br>下锅的蔬菜是包菜<br>下锅的酱料是辣椒<br>炒啊炒啊炒到熟</p>
<p>倒油<br>热油<br>下锅的蔬菜是菜心<br>下锅的酱料是蒜蓉</p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>在程序设计中，观察者模式通常由两个对象组成：观察者和被观察者。当被观察者状态发生改变时，它会通知所有的观察者对象，使他们能够及时做出响应，所以也被称作“发布-订阅模式”。</p>
<p>优点：被观察者和观察者对象之间不需要知道对方的具体实现，只需要知道对方的接口，避免了紧耦合的关系。<br>由于被观察者对象并不关心具体的观察者是谁，所以在程序运行的过程中，可以动态地增加或者删除观察者对象，增加了灵活性。<br>符合开闭原则，当需要添加新的观察者时，只需要添加一个实现观察者接口的类，而不需要修改被观察者对象的代码。</p>
<p>缺点：当观察者没有被正确移除时，可能会导致内存泄漏的问题。<br>实现观察者模式，需要定义多个接口和类，增加了程序的复杂度。<br>在某些情况下，被观察者和观察者对象之间可能出现循环依赖的问题。</p>
<p>场景：</p>
<p>当一个对象的状态发生改变时，需要通知多个对象做出相应的响应。例如，王者荣耀更新前，会通知所有用户要更新的时间。<br>当很多对象同时对某一个主题感兴趣时，可以采用观察者模式实现发布-订阅模式。例如，生产者发送消息到消息队列中，并通知所有订阅此队列的消费者进行消费。<br>数据库开发中，当数据库表中的数据发生变化时，需要通知相关的模块进行更新或其他操作。例如，当用户更新了数据库中的某个记录时，就可以通过观察者模式通知所有注册的监听器进行响应。</p>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>它将一个对象的状态封装成不同的类，使得对象在不同状态下可以表现出不同的行为，从而实现了状态与行为的解耦。</p>
<p>状态模式的核心思想是将各种状态抽象成独立的类，并定义一个公共的状态接口。具体的状态类实现该接口，每个具体的状态类负责处理对象在该状态下的行为。而对象本身会持有一个当前状态的引用，并在运行时根据状态的不同来调用相应的方法。</p>
<p>典型的状态模式包含以下角色：</p>
<ul>
<li>Context（上下文）：定义客户端所感兴趣的接口，同时维护一个具体状态类的实例，将请求委托给当前状态对象。</li>
<li>State（抽象状态类）：定义状态的接口，描述不同状态下对象的行为。</li>
<li>ConcreteState（具体状态类）：实现状态接口，负责处理对象在该状态下的行为和状态转换。</li>
</ul>
<p>使用状态模式的好处在于可以使代码更加清晰、可维护、可扩展。当对象的状态较多且状态之间的行为存在复杂的转换逻辑时，状态模式能够将各个状态的处理逻辑分散到各个具体状态类中，降低了代码的复杂度，提高了代码的可读性和可维护性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态是A&quot;</span>);</span><br><span class="line">        <span class="comment">// 具体的A状态处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态是B&quot;</span>);</span><br><span class="line">        <span class="comment">// 具体的B状态处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> State currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 委托给具体的状态对象进行处理</span></span><br><span class="line">        currentState.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">stateA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteStateA</span>();</span><br><span class="line">        context.setState(stateA);</span><br><span class="line">        context.request();  <span class="comment">// 输出：当前状态是A</span></span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">stateB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteStateB</span>();</span><br><span class="line">        context.setState(stateB);</span><br><span class="line">        context.request();  <span class="comment">// 输出：当前状态是B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>假设我们有一个电灯的控制器，可以通过按钮进行开关操作。在每个操作中，我们需要判断当前电灯的状态，并根据状态执行相应的逻辑。下面是使用大量条件语句的实现方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codeenum LightState &#123;</span><br><span class="line">    ON,</span><br><span class="line">    OFF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LightState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentState == LightState.ON) &#123;</span><br><span class="line">            turnOffLight();</span><br><span class="line">            currentState = LightState.OFF;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentState == LightState.OFF) &#123;</span><br><span class="line">            turnOnLight();</span><br><span class="line">            currentState = LightState.ON;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">turnOnLight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 打开电灯的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;打开电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">turnOffLight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭电灯的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中使用了条件语句来判断电灯的状态，然后根据状态执行相应的操作。但是，随着业务逻辑的复杂度增加以及状态种类的增多，条件语句会变得越来越复杂和臃肿，不易维护和扩展。</p>
<p>下面是使用状态模式进行重构的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codeinterface LightState &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">switchButton</span><span class="params">(LightController controller)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OnState</span> <span class="keyword">implements</span> <span class="title class_">LightState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchButton</span><span class="params">(LightController controller)</span> &#123;</span><br><span class="line">        controller.turnOffLight();</span><br><span class="line">        controller.setState(<span class="keyword">new</span> <span class="title class_">OffState</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OffState</span> <span class="keyword">implements</span> <span class="title class_">LightState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchButton</span><span class="params">(LightController controller)</span> &#123;</span><br><span class="line">        controller.turnOnLight();</span><br><span class="line">        controller.setState(<span class="keyword">new</span> <span class="title class_">OnState</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LightState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightController</span><span class="params">()</span> &#123;</span><br><span class="line">        currentState = <span class="keyword">new</span> <span class="title class_">OffState</span>();  <span class="comment">// 初始状态为关闭</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchButton</span><span class="params">()</span> &#123;</span><br><span class="line">        currentState.switchButton(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOnLight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 打开电灯的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;打开电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOffLight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭电灯的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(LightState state)</span> &#123;</span><br><span class="line">        currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在重构后的代码中，我们将每种状态抽象成一个独立的类，并实现了共同的接口。在<code>LightController</code>中维护了当前状态的引用，而不再依赖于条件语句。每个状态类负责自己的行为，并在需要切换状态时更新控制器的状态。</p>
<p>这样，在新增状态时，只需要创建一个新的状态类并实现相应的逻辑即可，无需修改原有的条件语句，实现了开闭原则和单一职责原则。同时，代码变得更加简洁、可扩展和易于理解。</p>
<p>总结来说，使用状态模式可以将复杂的条件语句进行解耦，提高代码的可维护性和可扩展性，同时使得代码逻辑更加清晰。特别是在状态种类较多、状态之间的转换逻辑复杂时，使用状态模式能够有效地管理状态，减少代码的耦合性。</p>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>它允许在运行时根据需要选择算法的行为。该模式通过将算法封装成独立的类，使得它们可以相互替换，而不影响使用算法的客户端代码。</p>
<p>策略模式主要包含以下角色：</p>
<ol>
<li>环境（Context）：环境对象持有一个策略对象的引用，它提供了一个接口用于执行具体的算法。</li>
<li>抽象策略（Strategy）：定义了策略类的统一接口，用于约束具体策略类的行为。</li>
<li>具体策略（Concrete Strategy）：实现了抽象策略定义的接口，具体实现算法逻辑。</li>
</ol>
<p>下面以一个简单的支付系统为例来说明策略模式的应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用支付宝支付：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="comment">// 具体的支付逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用微信支付：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="comment">// 具体的支付逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PaymentStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        strategy.pay(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述示例中，我们定义了一个抽象策略类<code>PaymentStrategy</code>，并有两个具体的策略类<code>AliPayStrategy</code>和<code>WeChatPayStrategy</code>分别实现了支付宝支付和微信支付的具体逻辑。</p>
<p>环境类<code>PaymentContext</code>持有一个策略对象的引用，并提供了设置策略和支付方法。客户端通过设置不同的策略对象来实现不同的支付方式。这样，客户端代码与具体的支付算法解耦，可以动态地在运行时切换支付策略。</p>
<p>下面是使用策略模式实现的客户端代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PaymentContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用支付宝支付</span></span><br><span class="line">        <span class="type">PaymentStrategy</span> <span class="variable">aliPayStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AliPayStrategy</span>();</span><br><span class="line">        context.setPaymentStrategy(aliPayStrategy);</span><br><span class="line">        context.pay(<span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用微信支付</span></span><br><span class="line">        <span class="type">PaymentStrategy</span> <span class="variable">weChatPayStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeChatPayStrategy</span>();</span><br><span class="line">        context.setPaymentStrategy(weChatPayStrategy);</span><br><span class="line">        context.pay(<span class="number">200.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述客户端代码，输出如下：</p>
<p>Copy Code 使用支付宝支付：100.0 元<br>使用微信支付：200.0 元</p>
<p>通过策略模式，我们可以轻松地在运行时切换不同的支付方式，而不需要改动客户端代码。策略模式将算法的选择和使用进行了解耦，提高了代码的灵活性和可维护性。同时，策略模式也符合开闭原则，当需要新增一种支付方式时，只需要添加新的具体策略类即可，无需修改原有代码逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;normal&quot;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">discount</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据商品类型设置折扣率</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;vip&quot;</span>)) &#123;</span><br><span class="line">            discount = <span class="number">0.9</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;member&quot;</span>)) &#123;</span><br><span class="line">            discount = <span class="number">0.95</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;promotion&quot;</span>)) &#123;</span><br><span class="line">            discount = <span class="number">0.8</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">actualPrice</span> <span class="operator">=</span> price * discount;</span><br><span class="line">        System.out.println(<span class="string">&quot;商品的实际价格为：&quot;</span> + actualPrice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，我们根据商品类型手动设置相应的折扣率，然后计算实际价格。这样的代码虽然简单，但存在以下问题：</p>
<ol>
<li>客户端代码与具体的折扣算法高度耦合，如果需要更改算法，例如新增一种商品类型，就需要修改客户端代码，这会导致代码的可维护性变差。</li>
<li>没有遵循开闭原则，当需要新增一种商品类型时，就需要修改原有代码逻辑，这样会影响到其他代码的稳定性。</li>
</ol>
<p>因此，采用策略模式能更好地解决这些问题，实现代码的松耦合和可维护性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nwa.sheji;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Lucky友人a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/1/19 -14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CeLue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;vip&quot;</span>;</span><br><span class="line">        <span class="type">PayStrategy</span> <span class="variable">conType</span> <span class="operator">=</span> getPayStrategy(type);</span><br><span class="line">        <span class="type">PayContext</span> <span class="variable">payContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayContext</span>(conType);</span><br><span class="line">        payContext.pay(price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PayStrategy <span class="title function_">getPayStrategy</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;vip&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VipType</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NormalType</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NormalType</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通支付&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VipType</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;vip支付&quot;</span> + amount * <span class="number">0.9</span> + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PayStrategy payStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PayContext</span><span class="params">(PayStrategy payStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.payStrategy = payStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        payStrategy.pay(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分享一个案例：统一认证登录</p>
<p>认证接口类 AuthService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line"></span><br><span class="line">  UserExt <span class="title function_">execute</span><span class="params">(AuthParamsDto authParamsDto)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的实现类 可以是密码登录 PasswordAuthServiceImpl 手机号登录 PhoneAuthServiceImpl 微信登录 WxAuthServiceImpl 等，获取前缀，拼接 bean 名称，Spring 上下文拿到 bean</p>
<p>调用，我用的是 SpringsSecurity 框架并重写了 UserDetailsService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入的是AuthParamsDto的json串</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="type">AuthParamsDto</span> <span class="variable">authParamsDto</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将认证参数转为AuthParamsDto类型</span></span><br><span class="line">        authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;认证请求不符合项目要求:&#123;&#125;&quot;</span>,s);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证方式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">authType</span> <span class="operator">=</span> authParamsDto.getAuthType();</span><br><span class="line">    <span class="comment">//从spring容器中拿具体的认证bean实例</span></span><br><span class="line">    <span class="type">AuthService</span> <span class="variable">authService</span> <span class="operator">=</span> applicationContext.getBean(authType + <span class="string">&quot;_authservice&quot;</span>, AuthService.class);</span><br><span class="line">    <span class="comment">//开始认证,认证成功拿到用户信息</span></span><br><span class="line">    <span class="type">XcUserExt</span> <span class="variable">xcUserExt</span> <span class="operator">=</span> authService.execute(authParamsDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getUserPrincipal(xcUserExt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthParamsDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//域  用于扩展</span></span><br><span class="line">    <span class="keyword">private</span> String cellphone;<span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String checkcode;<span class="comment">//验证码</span></span><br><span class="line">    <span class="keyword">private</span> String checkcodekey;<span class="comment">//验证码key</span></span><br><span class="line">    <span class="keyword">private</span> String authType; <span class="comment">// 认证的类型   password:用户名密码模式类型    sms:短信模式类型</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//附加数据，作为扩展，不同认证类型可拥有不同的附加数据。如认证类型为短信时包含smsKey : sms:3d21042d054548b08477142bbca95cfa; 所有情况下都包含clientId</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><p>它允许多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连接成一条链，并沿着这条链传递请求，直到有一个对象处理请求为止。</p>
<p>在职责链模式中，每个处理请求的对象都有一个处理方法，并且持有对下一个处理对象的引用。当一个请求到达时，它会被传递给当前处理对象进行处理，如果当前对象无法处理，则将请求传递给下一个处理对象，直到有一个对象处理为止。</p>
<p>职责链模式的主要优点：</p>
<ol>
<li>将请求的发送者和接收者解耦，可以灵活地增加或删除处理对象，改变它们之间的顺序，从而简化对象的相互连接。</li>
<li>可以动态地组合处理器，添加或删除某些处理器，从而为客户端提供更多的选择。</li>
<li>具有良好的可扩展性，可以在不影响其他处理器的情况下添加新的处理器。</li>
</ol>
<p>职责链模式的主要缺点：</p>
<ol>
<li>如果链条过长，会影响系统的性能。</li>
<li>可能存在请求得不到处理的情况，因此需要及时对链条进行检查、维护和优化，确保请求能够得到正确的处理。</li>
</ol>
<p>职责链模式适用于以下场景：</p>
<ol>
<li>需要将一个请求发送给多个对象进行处理，但不知道哪个对象能够处理请求；</li>
<li>需要动态地指定可以处理请求的对象集合；</li>
<li>对象需要按照特定的顺序进行处理；</li>
<li>一个请求可能被多个对象处理，但最终结果只取决于其中一个对象。</li>
</ol>
<p>总之，职责链模式可有效解耦代码中不同模块的处理逻辑，提高代码的灵活性和可维护性，如果应用得当，它可以是优秀的扩展点和优化点。</p>
<p>假设我们有一个订单处理系统，订单的处理需要经过多个环节，如验证、折扣计算、库存检查和物流安排等。我们可以使用职责链模式来实现这个订单处理过程。</p>
<p>首先，我们定义一个抽象处理器（Handler）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextHandler</span><span class="params">(Handler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextHandler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Order order)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们创建具体的处理器类，分别是验证处理器（ValidationHandler）、折扣处理器（DiscountHandler）、库存处理器（InventoryHandler）和物流处理器（LogisticsHandler）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">ValidationHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (order.isDataValid()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;订单数据验证通过&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                nextHandler.handleRequest(order);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;订单数据验证失败，无法继续处理&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscountHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        order.applyDiscount();</span><br><span class="line">        System.out.println(<span class="string">&quot;折扣计算完成&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextHandler.handleRequest(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (order.checkInventory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;库存检查通过&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (nextHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                nextHandler.handleRequest(order);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;库存不足，无法继续处理&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogisticsHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        order.arrangeLogistics();</span><br><span class="line">        System.out.println(<span class="string">&quot;物流安排完成&quot;</span>);</span><br><span class="line">        <span class="comment">// 不需要调用nextHandler，这是处理链的最后一个处理器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们创建一个客户端示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">validationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidationHandler</span>();</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">discountHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiscountHandler</span>();</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">inventoryHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InventoryHandler</span>();</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">logisticsHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogisticsHandler</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建处理链</span></span><br><span class="line">        validationHandler.setNextHandler(discountHandler);</span><br><span class="line">        discountHandler.setNextHandler(inventoryHandler);</span><br><span class="line">        inventoryHandler.setNextHandler(logisticsHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建订单并提交处理请求</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        validationHandler.handleRequest(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，订单的处理经过了验证、折扣计算、库存检查和物流安排四个环节。每个处理器都有一个处理方法来处理请求，并且持有对下一个处理器的引用。当一个处理器完成自己的处理逻辑后，如果存在下一个处理器，则将请求传递给下一个处理器进行处理。最终，订单会依次经过所有的处理器进行处理。</p>
<p>使用职责链模式可以灵活地修改、扩展和调整订单处理过程，例如可以在处理器中添加日志记录、异常处理等功能，而不需要修改原有的处理逻辑。此外，职责链模式还可以简化客户端和处理器之间的耦合关系，提高代码的可维护性和扩展性。</p>
<p>职责链模式可以在许多地方应用，常见的应用场景包括：</p>
<ol>
<li>请求处理。职责链模式可以用于请求处理中，将请求传递给不同的处理器进行处理，例如 Java Servlet 中的过滤器、Spring 框架中的拦截器等。</li>
<li>异常处理。职责链模式可以用于异常处理中，将异常传递给不同的异常处理器进行处理，例如 Java 中的异常链、.NET 中的异常过滤器等。</li>
<li>日志记录。职责链模式可以用于日志记录中，将日志信息传递给不同的日志记录器进行记录，例如 Log4j、Slf4j 等。</li>
<li>权限控制。职责链模式可以用于权限控制中，将权限验证请求传递给不同的权限验证器进行验证，例如 Shiro 框架中的过滤器链、Spring Security 框架中的过滤器链等。</li>
<li>消息通知。职责链模式可以用于消息通知中，将消息传递给不同的通知接收者进行处理，例如 Android 中的事件传递机制、Node.js 中的 EventEmitter 等。</li>
</ol>
<p>总之，职责链模式可以应用于任何需要处理一个请求或消息的场景，特别是在业务逻辑比较复杂、处理流程变化频繁的情况下，使用职责链模式可以提高代码的可维护性和可扩展性。</p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>它将请求封装成一个对象，从而使你可以使用不同的请求对客户端进行参数化。该模式允许请求的发送者和接收者彻底解耦。</p>
<p>在命令模式中，包含以下几个角色：</p>
<ol>
<li>命令（Command）：定义了执行操作的接口，通常包括一个执行方法（execute）。</li>
<li>具体命令（Concrete Command）：实现了命令接口，并且包含一个接收者对象（Receiver），用于执行具体的操作。</li>
<li>接收者（Receiver）：负责执行与请求相关的操作。</li>
<li>调用者（Invoker）：持有一个命令对象，并在需要的时候调用命令对象的执行方法。调用者并不直接与接收者交互，而是通过命令对象来间接执行请求。</li>
<li>客户端（Client）：创建具体命令对象，并设置命令对象的接收者。</li>
</ol>
<p>命令模式的工作流程如下：</p>
<ol>
<li>客户端创建具体命令对象，并设置命令对象的接收者。</li>
<li>调用者持有命令对象。</li>
<li>调用者通过调用命令对象的执行方法，间接地执行与请求相关的操作。</li>
<li>命令对象将请求传递给接收者，接收者执行具体操作。</li>
</ol>
<p>通过使用命令模式，可以将请求的发送者和接收者解耦，实现了请求的封装、参数化和灵活性。命令模式也可以用于实现可撤销的操作、日志记录以及事务管理等功能。</p>
<p>总结来说，命令模式适用于需要将请求封装成对象，并支持请求的参数化、排队、记录日志和撤销等操作的场景。它提供了一种更加灵活和可扩展的方式来处理命令相关的操作。</p>
<ol>
<li>定义命令接口（Command）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现具体命令类（Concrete Command）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">PlayMusicCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MusicPlayer player;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlayMusicCommand</span><span class="params">(MusicPlayer player)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        player.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义接收者类（Receiver）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">MusicPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放音乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;停止播放&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adjustVolume</span><span class="params">(<span class="type">int</span> volume)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调整音量为：&quot;</span> + volume);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现调用者类（Invoker）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">RemoteController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pressButton</span><span class="params">()</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建接收者对象</span></span><br><span class="line">        <span class="type">MusicPlayer</span> <span class="variable">player</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MusicPlayer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建具体命令对象，并设置接收者</span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">playCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PlayMusicCommand</span>(player);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建调用者对象，并设置具体命令</span></span><br><span class="line">        <span class="type">RemoteController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteController</span>();</span><br><span class="line">        controller.setCommand(playCommand);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按下按钮，执行具体命令</span></span><br><span class="line">        controller.pressButton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述示例中，家庭智能音响系统中的播放音乐操作被封装成了一个具体的命令对象（PlayMusicCommand）。通过使用命令模式，可以将播放音乐这个请求与发送者（RemoteController）和接收者（MusicPlayer）进行解耦。当用户按下遥控器按钮时，命令对象被执行，从而触发音乐播放操作。</p>
<p>通过命令模式，我们可以轻松地添加新的命令，如停止播放、调节音量等，而无需修改原有的代码。这种设计使得系统更加灵活和可扩展，同时提高了代码的可维护性。</p>
<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>它可以将算法与对象结构分离，使得算法可以独立于该对象结构来变化。</p>
<p>在访问者模式中，包含以下几个角色：</p>
<ol>
<li>访问者（Visitor）：定义了对每个元素对象访问时所要执行的操作。可以通过多态实现不同的访问策略。</li>
<li>具体访问者（Concrete Visitor）：实现了访问者接口，并包含了针对各个具体元素的访问方法。</li>
<li>元素（Element）：定义了一个接受访问的方法（accept），通常以访问者作为参数。</li>
<li>具体元素（Concrete Element）：实现了元素接口，并且包含一个接受访问的方法。</li>
<li>对象结构（Object Structure）：包含了元素的集合，并提供了遍历元素集合的方法。</li>
</ol>
<p>访问者模式的工作流程如下：</p>
<ol>
<li>访问者对象被创建。</li>
<li>具体元素对象被创建，并传递给访问者对象。</li>
<li>访问者对象调用该元素对象的接受访问的方法，并将自己作为参数传递进去。</li>
<li>元素对象将自己作为参数传递给访问者对象中相应的访问方法，从而完成对该元素对象的访问操作。</li>
</ol>
<p>通过使用访问者模式，可以将具体元素对象与访问算法分离开来，使得两者可以独立变化而不会对彼此产生影响。这样的设计也便于添加新的访问算法。</p>
<p>访问者模式常常用于数据结构相对稳定的系统，需要用于定义、扩展和修改一些操作。它的优点是易于增加新的访问操作，同时也能保证访问者对象的行为符合单一职责原则。但是它的缺点是增加新的元素类比较困难，并且会导致访问者类的代码复杂度增加。</p>
<p>一个简单的例子：假设我们要对一组不同类型的电脑进行访问，该电脑由 CPU、硬盘和内存三个部分组成。我们可以使用访问者模式将访问者对象与具体电脑对象分离开来，并实现多种不同的访问策略。</p>
<ol>
<li>定义元素接口（Element）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerVisitor visitor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现具体元素类（Concrete Element）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Cpu</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitCpu(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HardDisk</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitHardDisk(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitMemory(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义访问者接口（Visitor）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">ComputerVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitCpu</span><span class="params">(Cpu cpu)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitHardDisk</span><span class="params">(HardDisk hardDisk)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitMemory</span><span class="params">(Memory memory)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现具体访问者类（Concrete Visitor）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">RepairVisitor</span> <span class="keyword">implements</span> <span class="title class_">ComputerVisitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitCpu</span><span class="params">(Cpu cpu)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在修复CPU&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitHardDisk</span><span class="params">(HardDisk hardDisk)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在修复硬盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitMemory</span><span class="params">(Memory memory)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在修复内存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpgradeVisitor</span> <span class="keyword">implements</span> <span class="title class_">ComputerVisitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitCpu</span><span class="params">(Cpu cpu)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在升级CPU&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitHardDisk</span><span class="params">(HardDisk hardDisk)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在升级硬盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitMemory</span><span class="params">(Memory memory)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在升级内存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现对象结构类（Object Structure）：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic class Computer &#123;</span><br><span class="line">    private List&lt;ComputerPart&gt; parts = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Computer() &#123;</span><br><span class="line">        parts.add(new Cpu());</span><br><span class="line">        parts.add(new HardDisk());</span><br><span class="line">        parts.add(new Memory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void accept(ComputerVisitor visitor) &#123;</span><br><span class="line">        for (ComputerPart part : parts) &#123;</span><br><span class="line">            part.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ComputerVisitor</span> <span class="variable">repairVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepairVisitor</span>();</span><br><span class="line">        <span class="type">ComputerVisitor</span> <span class="variable">upgradeVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpgradeVisitor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对电脑进行维修操作</span></span><br><span class="line">        computer.accept(repairVisitor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对电脑进行升级操作</span></span><br><span class="line">        computer.accept(upgradeVisitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述示例中，访问者模式被用于实现对不同类型电脑部件的维修或升级操作。通过将访问者对象与具体元素对象分离开来，我们可以轻松地添加新的访问操作，如更换显示器等，同时也能保证访问者对象的行为符合单一职责原则。</p>
<h2 id="调停者模式"><a href="#调停者模式" class="headerlink" title="调停者模式"></a>调停者模式</h2><p>它用于降低多个对象之间的耦合度，并且通过中介者对象来协调它们的交互。</p>
<p>在调停者模式中，有以下几个角色：</p>
<ol>
<li>抽象中介者（Abstract Mediator）：定义了中介者对象的接口，它知道各个同事对象，并负责协调它们之间的交互关系。</li>
<li>具体中介者（Concrete Mediator）：实现了中介者接口，它通过协调各个同事对象之间的交互来实现协作行为。</li>
<li>抽象同事类（Abstract Colleague）：定义了同事类的接口，它保存了一个对中介者对象的引用，可以通过中介者与其他同事进行通信。</li>
<li>具体同事类（Concrete Colleague）：实现了同事类的接口，它与其他具体同事类通过中介者进行通信。</li>
</ol>
<p>调停者模式的工作流程如下：</p>
<ol>
<li>同事对象将自己的信息发送给中介者对象。</li>
<li>中介者对象收到信息后，根据具体的业务逻辑，协调其他同事对象并向它们发送通知。</li>
<li>各个同事对象根据中介者发出的通知进行自身操作。</li>
</ol>
<p>通过使用调停者模式，可以将对象之间的交互逻辑封装在中介者对象中，降低了对象之间的直接耦合。各个同事对象只需与中介者对象进行通信，而不需要与其他同事对象进行直接通信，从而简化了对象之间的交互关系。</p>
<p>一个简单的例子：假设有一个聊天室，里面有多个用户参与，并且用户之间可以相互发送消息。我们可以使用调停者模式将聊天室作为中介者对象，并让每个用户作为具体同事类。</p>
<ol>
<li>定义抽象中介者类（Abstract Mediator）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ChatRoom</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, User sender)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现具体中介者类（Concrete Mediator）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">ConcreteChatRoom</span> <span class="keyword">extends</span> <span class="title class_">ChatRoom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, User sender)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user != sender) &#123;</span><br><span class="line">                user.receiveMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义抽象同事类（Abstract Colleague）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ChatRoom chatRoom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(ChatRoom chatRoom)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatRoom = chatRoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现具体同事类（Concrete Colleague）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">ConcreteUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteUser</span><span class="params">(String name, ChatRoom chatRoom)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(chatRoom);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        chatRoom.sendMessage(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChatRoom</span> <span class="variable">chatRoom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteChatRoom</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteUser</span>(<span class="string">&quot;User1&quot;</span>, chatRoom);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteUser</span>(<span class="string">&quot;User2&quot;</span>, chatRoom);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteUser</span>(<span class="string">&quot;User3&quot;</span>, chatRoom);</span><br><span class="line"></span><br><span class="line">        chatRoom.addUser(user1);</span><br><span class="line">        chatRoom.addUser(user2);</span><br><span class="line">        chatRoom.addUser(user3);</span><br><span class="line"></span><br><span class="line">        user1.sendMessage(<span class="string">&quot;大家好！&quot;</span>);</span><br><span class="line">        user2.sendMessage(<span class="string">&quot;你好，User1！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述示例中，调停者模式被用于实现聊天室的功能。聊天室作为中介者对象，负责协调各个用户之间的消息交互。每个用户都是具体同事类，通过中介者对象发送和接收消息。通过使用调停者模式，用户之间的交互逻辑被封装在中介者对象中，使得系统结构更加清晰且易于扩展。</p>
<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>它用于捕获一个对象的内部状态，并在不破坏封装性的前提下将其保存，以便在需要时进行恢复。</p>
<p>备忘录模式主要涉及以下几个角色：</p>
<ol>
<li>发起人（Originator）：负责创建一个备忘录（Memento），并记录当前对象的内部状态。</li>
<li>备忘录（Memento）：存储发起人对象的内部状态。可以包含发起人的部分或全部状态。</li>
<li>管理者（Caretaker）：负责保存备忘录，并在需要时将备忘录返回给发起人。</li>
</ol>
<p>备忘录模式的工作流程如下：</p>
<ol>
<li>发起人创建备忘录对象，并将需要保存的状态传递给备忘录。</li>
<li>管理者接收到备忘录对象后，将其保存起来。</li>
<li>当需要恢复状态时，管理者将备忘录对象返回给发起人。</li>
<li>发起人使用备忘录对象中保存的状态进行恢复。</li>
</ol>
<p>备忘录模式的主要目的是让对象能够保存和恢复内部状态，同时保持对其他对象的封装。这样可以在不暴露对象实现细节的情况下，提供一种可靠的恢复机制。</p>
<p>下面是一个简单的示例来说明备忘录模式的使用场景和实现方法：</p>
<ol>
<li>定义发起人类（Originator）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">saveToMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreFromMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义备忘录类（Memento）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memento</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义管理者类（Caretaker）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">retrieveMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line">        <span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置初始状态并保存到备忘录</span></span><br><span class="line">        originator.setState(<span class="string">&quot;State 1&quot;</span>);</span><br><span class="line">        caretaker.saveMemento(originator.saveToMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态并保存到备忘录</span></span><br><span class="line">        originator.setState(<span class="string">&quot;State 2&quot;</span>);</span><br><span class="line">        caretaker.saveMemento(originator.saveToMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态并保存到备忘录</span></span><br><span class="line">        originator.setState(<span class="string">&quot;State 3&quot;</span>);</span><br><span class="line">        caretaker.saveMemento(originator.saveToMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复到之前保存的备忘录状态</span></span><br><span class="line">        originator.restoreFromMemento(caretaker.retrieveMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;Current State: &quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述示例中，我们使用备忘录模式保存和恢复对象的状态。发起人类（Originator）负责创建备忘录对象，并记录当前的内部状态；备忘录类（Memento）用于存储发起人对象的状态；管理者类（Caretaker）负责保存和提供备忘录对象；客户端代码根据需要设置、保存和恢复对象的状态。</p>
<p>通过使用备忘录模式，可以在不违反封装性的情况下，实现对象的状态保存和恢复。这样可以有效地处理撤销、重做、历史记录以及错误恢复等场景，提高系统的可靠性和灵活性。</p>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>它提供了一种遍历集合对象的统一接口，而无需关心集合对象的内部结构。通过使用迭代器模式，我们可以在不暴露集合对象的内部实现细节的情况下，逐个访问集合中的元素。</p>
<p>迭代器模式包含以下几个角色：</p>
<ol>
<li>迭代器（Iterator）：定义访问和遍历元素的接口，通常包括方法如获取下一个元素、判断是否还有下一个元素等。</li>
<li>具体迭代器（ConcreteIterator）：实现迭代器接口，负责具体的元素遍历和访问操作。</li>
<li>集合（Aggregate）：定义创建迭代器的接口，通常包含获取迭代器的方法。</li>
<li>具体集合（ConcreteAggregate）：实现集合接口，创建对应的具体迭代器，并返回该迭代器。</li>
</ol>
<p>使用迭代器模式的优点包括：</p>
<ol>
<li>简化集合类的接口：通过将遍历集合的行为委托给迭代器，集合类可以更专注于自身的功能实现。</li>
<li>封装集合的内部结构：迭代器模式将集合类的内部结构进行封装，使得客户端无需了解具体的迭代算法和内部存储方式。</li>
<li>支持多种遍历方式：同一个集合可以使用不同的迭代器进行遍历，满足不同的需求。</li>
</ol>
<p>迭代器模式常见的应用场景包括：</p>
<ol>
<li>需要遍历不同类型的集合对象而无需关注其内部实现结构的情况。</li>
<li>需要提供统一的访问接口以支持多种遍历方式的情况。</li>
</ol>
<p>总之，迭代器模式通过将遍历行为抽象出来，使得我们可以以一种统一且灵活的方式遍历集合对象，提高了代码的可复用性和扩展性。</p>
<p>首先，我们需要定义迭代器接口（Iterator），包含获取下一个任务和判断是否还有下一个任务的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Task <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们定义具体的迭代器类（ConcreteIterator），实现迭代器接口，负责实现具体的遍历逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">TaskIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TaskList taskList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskIterator</span><span class="params">(TaskList taskList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskList = taskList;</span><br><span class="line">        <span class="built_in">this</span>.position = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; taskList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Task <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskList.get(position);</span><br><span class="line">            position++;</span><br><span class="line">            <span class="keyword">return</span> task;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们定义集合接口（Aggregate），包含获取迭代器的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    Iterator <span class="title function_">createIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们定义具体的集合类（ConcreteAggregate），实现集合接口，创建对应的具体迭代器，并返回该迭代器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">TaskList</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Task&gt; tasks;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(Task task)</span> &#123;</span><br><span class="line">        tasks.add(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Task <span class="title function_">getTask</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tasks.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tasks.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TaskIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以使用迭代器模式来遍历任务列表并处理每个任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy <span class="type">CodeTaskList</span> <span class="variable">taskList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskList</span>();</span><br><span class="line">taskList.addTask(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">&quot;Task 1&quot;</span>));</span><br><span class="line">taskList.addTask(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">&quot;Task 2&quot;</span>));</span><br><span class="line">taskList.addTask(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">&quot;Task 3&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> taskList.createIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="comment">// 处理任务逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Processing task: &quot;</span> + task.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过使用迭代器模式，我们可以方便地遍历任务列表，并且不需要关心具体的遍历实现方式。这样，我们可以将集合的内部结构进行封装，提高代码的灵活性和可维护性。</p>
<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p>它用于解析特定的语法或表达式，并执行相应的操作。该模式将一个复杂的语法规则表示为类的层次结构，并使用解释器来解析和执行这些语法规则。</p>
<p>解释器模式包含以下几个角色：</p>
<ol>
<li>抽象表达式（Abstract Expression）：定义一个解释器的接口，声明了解释器需要实现的方法，通常包括解释方法 interpret()。</li>
<li>终结符表达式（Terminal Expression）：实现抽象表达式接口，并表示语法规则中的终结符，不能再进行拆分的最小单位。终结符表达式通常是一些具体的类，可以有自己的内部状态和逻辑。</li>
<li>非终结符表达式（Non-terminal Expression）：实现抽象表达式接口，并表示语法规则中的非终结符，可以进行进一步的拆分和解析。非终结符表达式通常包含其他表达式作为其子表达式，用于构建语法树。</li>
<li>上下文（Context）：包含解释器需要解析的语句或表达式，并提供给解释器进行解释和执行的环境。</li>
</ol>
<p>使用解释器模式的关键是将复杂的语法规则表示为解释器的类层次结构，每个类对应不同的语法规则或语法元素。通过解释器的递归调用，可以逐步分解和解析语法规则，最终得到执行结果。</p>
<p>解释器模式常见的应用场景包括：</p>
<ol>
<li>正则表达式的解析与匹配。</li>
<li>编程语言中的解释器，如解析并执行脚本语言。</li>
<li>配置文件解析，例如 XML、JSON 等配置文件的解释器。</li>
</ol>
<p>总之，解释器模式提供了一种处理特定语法或表达式的灵活方式，使得我们可以根据需要定义复杂的语法规则，并通过解释器进行解析和执行。这种模式的好处是能够将解析逻辑与具体表达式的结构进行解耦，增加了系统的灵活性和可扩展性。</p>
<p>假设我们需要解析一些简单的数学表达式，例如 “3 + 2 * 4 - 1”。为了实现解析和计算，可以使用解释器模式来将该表达式表示为一个解释器对象，并依次对表达式中的每个元素进行解释，最终得到计算结果。</p>
<p>首先，我们定义抽象表达式接口 Expression，包含解析方法 interpret()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">interface</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们定义具体的终结符表达式类 NumberExpression，表示简单的数字表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">NumberExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberExpression</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们定义具体的非终结符表达式类 AddExpression、SubtractExpression、MultiplyExpression 和 DivideExpression，表示加减乘除等运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">AddExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() + right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubtractExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubtractExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() - right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiplyExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MultiplyExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() * right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivideExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DivideExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">denominator</span> <span class="operator">=</span> right.interpret();</span><br><span class="line">        <span class="keyword">if</span> (denominator == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Division by zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.interpret() / denominator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们定义上下文类 Context，包含待解析的表达式和解释器实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy Codepublic <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String expression;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Expression&gt; parserStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.expression = expression;</span><br><span class="line">        <span class="built_in">this</span>.parserStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushParser</span><span class="params">(Expression expression)</span> &#123;</span><br><span class="line">        parserStack.push(expression);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Expression <span class="title function_">popParser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!parserStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> parserStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getExpression</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expression;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以使用这些类来解析并计算数学表达式了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy <span class="type">CodeString</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;3 + 2 * 4 - 1&quot;</span>;</span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(expression);</span><br><span class="line"></span><br><span class="line">String[] tokens = expression.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">    <span class="keyword">if</span> (token.equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> context.popParser();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(Integer.parseInt(tokens[++i]));</span><br><span class="line">        context.pushParser(<span class="keyword">new</span> <span class="title class_">AddExpression</span>(left, right));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> context.popParser();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(Integer.parseInt(tokens[++i]));</span><br><span class="line">        context.pushParser(<span class="keyword">new</span> <span class="title class_">SubtractExpression</span>(left, right));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> context.popParser();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(Integer.parseInt(tokens[++i]));</span><br><span class="line">        context.pushParser(<span class="keyword">new</span> <span class="title class_">MultiplyExpression</span>(left, right));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> context.popParser();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(Integer.parseInt(tokens[++i]));</span><br><span class="line">        context.pushParser(<span class="keyword">new</span> <span class="title class_">DivideExpression</span>(left, right));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.pushParser(<span class="keyword">new</span> <span class="title class_">NumberExpression</span>(Integer.parseInt(token)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(expression + <span class="string">&quot; = &quot;</span> + context.popParser().interpret());</span><br></pre></td></tr></table></figure>

<p>通过使用解释器模式，我们将数学表达式表示为一个解释器对象，并逐个解析其元素，最终得到计算结果。这种方式虽然比较繁琐，但是可以处理更加复杂的表达式，并且不需要构建抽象语法树。</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射可以让我们在程序运行时动态加载类并获取类的详细信息，本质是<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>得到 java.lang.Class 对象之后，再对 class 对象进行反编译，从而获取对象的各种信息</p>
<p>下面的一个案例是简单工厂模式的升级版也就是工厂模式，结合反射机制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing a rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Class&lt;? <span class="keyword">extends</span> <span class="title class_">Shape</span>&gt;&gt; registeredShapes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerShape</span><span class="params">(String shapeName, Class&lt;? extends Shape&gt; shapeClass)</span> &#123;</span><br><span class="line">        registeredShapes.put(shapeName, shapeClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">(String shapeName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (registeredShapes.containsKey(shapeName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;? <span class="keyword">extends</span> <span class="title class_">Shape</span>&gt; shapeClass = registeredShapes.get(shapeName);</span><br><span class="line">                <span class="keyword">return</span> shapeClass.getDeclaredConstructor().newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ShapeFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line">        factory.registerShape(<span class="string">&quot;Circle&quot;</span>, Circle.class);</span><br><span class="line">        factory.registerShape(<span class="string">&quot;Rectangle&quot;</span>, Rectangle.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> factory.createShape(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (circle != <span class="literal">null</span>) &#123;</span><br><span class="line">            circle.draw(); <span class="comment">// Output: Drawing a circle</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">rectangle</span> <span class="operator">=</span> factory.createShape(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rectangle != <span class="literal">null</span>) &#123;</span><br><span class="line">            rectangle.draw(); <span class="comment">// Output: Drawing a rectangle</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述代码，我们将具体产品的类名以字符串的形式注册到工厂类中，并使用反射在创建对象时动态实例化具体产品。这样，当需要添加新的具体产品时，只需调用 <code>registerShape</code> 方法来注册即可，无需修改工厂类的代码。</p>
<p>这种方式更符合开闭原则，使得工厂类对于新增具体产品类型是开放的，而对于修改已有代码是封闭的。</p>
<p>满足六大原则</p>
<ol>
<li>单一职责原则（Single Responsibility Principle，SRP）：<ul>
<li>在示例中，<code>ShapeFactory</code> 类负责创建形状对象的职责，它只有一个职责。它没有额外的功能或责任，符合 SRP 原则。</li>
</ul>
</li>
<li>开放封闭原则（Open-Closed Principle，OCP）：<ul>
<li>示例中的工厂类可以通过扩展来支持更多类型的形状，而无需修改现有代码。只需要新增具体产品类并在工厂中加入相应的判断即可，符合 OCP 原则。</li>
</ul>
</li>
<li>里氏替换原则（Liskov Substitution Principle，LSP）：<ul>
<li><code>Circle</code> 和 <code>Rectangle</code> 类都实现了 <code>Shape</code> 接口，可以在不影响代码功能的情况下互相替换，符合 LSP 原则。</li>
</ul>
</li>
<li>接口隔离原则（Interface Segregation Principle，ISP）：<ul>
<li>示例中的抽象产品接口 <code>Shape</code> 只包含一个方法 <code>draw()</code>，而具体产品类只需实现该方法。没有强制要求具体产品类实现其不需要的方法，符合 ISP 原则。</li>
</ul>
</li>
<li>依赖倒置原则（Dependency Inversion Principle，DIP）：<ul>
<li>工厂类 <code>ShapeFactory</code> 依赖于抽象接口 <code>Shape</code> 而不是具体的产品类，符合 DIP 原则。这样，当需要扩展工厂类以支持新的形状时，不需要修改工厂类的代码。</li>
</ul>
</li>
<li>迪米特法则（Law of Demeter，LoD）：<ul>
<li>示例中的客户端只与工厂类 <code>ShapeFactory</code> 交互，而不与具体产品类直接交互。客户端只需要知道如何使用工厂类来创建对象，无需知道具体对象的创建细节，符合 LoD 原则。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
